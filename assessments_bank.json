{
  "Python": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which keyword is used to define a function in Python?", "choices": ["def", "function", "fun", "define"], "answer": "def"},
        {"question": "Which function is used to print output in Python?", "choices": ["print", "echo", "printf", "write"], "answer": "print"},
        {"question": "Which symbol is used to end a statement in Python?", "choices": ["No symbol needed", ";", ".", ":"], "answer": "No symbol needed"},
        {"question": "Which operator is used for assignment in Python?", "choices": ["=", "==", ":=", "<-"], "answer": "="},
        {"question": "Which symbol is used for single-line comments in Python?", "choices": ["#", "//", "<!--", "**"], "answer": "#"},
        {"question": "Which data type is used for decimal numbers in Python?", "choices": ["float", "int", "decimal", "number"], "answer": "float"},
        {"question": "Which method gets the length of a string?", "choices": ["len()", "length()", "size()", "count()"], "answer": "len()"},
        {"question": "Which method converts a string to uppercase?", "choices": ["upper()", "uppercase()", "toUpper()", "capitalize()"], "answer": "upper()"},
        {"question": "Which method converts a string to lowercase?", "choices": ["lower()", "lowercase()", "toLower()", "small()"], "answer": "lower()"},
        {"question": "Which function gets input from the user?", "choices": ["input()", "get()", "read()", "scanf()"], "answer": "input()"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this code for printing a message?",
        "code": "print \"Hello, World!\"",
        "choices": [
          "A. print should use parentheses in Python 3.",
          "B. The string should use single quotes.",
          "C. print is not a valid function.",
          "D. There should be a semicolon at the end."
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this variable assignment and print statement?",
        "code": "name = Alice\nprint(name)",
        "choices": [
          "A. Variable names cannot be 'name'.",
          "B. The value Alice should be in quotes.",
          "C. print should use curly braces.",
          "D. There should be a colon after the assignment."
        ],
        "answer": "B"
      },
      {
        "question": "What is wrong with this if statement?",
        "code": "age = 18\nif age >= 18\n    print(\"You are an adult\")",
        "choices": [
          "A. The comparison operator is incorrect.",
          "B. The print statement should be outside the if.",
          "C. Missing colon at the end of the if statement.",
          "D. age should be a string."
        ],
        "answer": "C"
      },
      {
        "question": "What is the bug in this for loop?",
        "code": "for i in range(5):\nprint(i)",
        "choices": [
          "A. range should start at 1.",
          "B. print should be indented inside the loop.",
          "C. The colon is not needed.",
          "D. i should be a string."
        ],
        "answer": "B"
      },
      {
        "question": "What is wrong with this list operation?",
        "code": "fruits = [\"apple\", \"banana\", \"orange\"]\nprint(fruits[3])",
        "choices": [
          "A. fruits is not a list.",
          "B. Index 3 is out of range.",
          "C. print should use curly braces.",
          "D. The list should use parentheses."
        ],
        "answer": "B"
      }
    ],
    "coding": [
      {
        "question": "What is the output of this code?\n\nx = 3\ny = 4\nprint(x + y)",
        "choices": [
          "A. 7",
          "B. 34",
          "C. x + y",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code correctly prints 'Hello, Python!'?",
        "choices": [
          "A. print('Hello, Python!')",
          "B. echo 'Hello, Python!'",
          "C. printf('Hello, Python!')",
          "D. print Hello, Python!"
        ],
        "answer": "A"
      },
      {
        "question": "What is the result of this code?\n\ns = 'abc'\nprint(len(s))",
        "choices": [
          "A. 2",
          "B. 3",
          "C. 'abc'",
          "D. Error"
        ],
        "answer": "B"
      },
      {
        "question": "Which code creates a list of numbers from 0 to 4?",
        "choices": [
          "A. list = [0, 1, 2, 3, 4]",
          "B. list = range(5)",
          "C. list = [range(5)]",
          "D. list = (0, 1, 2, 3, 4)"
        ],
        "answer": "A"
      },
      {
        "question": "What does this code print?\n\nfor i in range(3):\n    print(i)",
        "choices": [
          "A. 1 2 3",
          "B. 0 1 2",
          "C. 0 1 2 3",
          "D. 1 2"
        ],
        "answer": "B"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which method adds an element to a list?", "choices": ["append()", "add()", "insert()", "push()"], "answer": "append()"},
        {"question": "Which method removes an element from a list?", "choices": ["remove()", "delete()", "pop()", "clear()"], "answer": "remove()"},
        {"question": "Which method sorts a list in ascending order?", "choices": ["sort()", "order()", "arrange()", "organize()"], "answer": "sort()"},
        {"question": "Which method reverses a list?", "choices": ["reverse()", "flip()", "invert()", "turn()"], "answer": "reverse()"},
        {"question": "Which function creates a range of numbers?", "choices": ["range()", "sequence()", "series()", "numbers()"], "answer": "range()"},
        {"question": "Which keyword is used for loops in Python?", "choices": ["for", "loop", "while", "repeat"], "answer": "for"},
        {"question": "Which keyword is used for conditional statements?", "choices": ["if", "when", "check", "test"], "answer": "if"},
        {"question": "Which method splits a string into a list?", "choices": ["split()", "divide()", "separate()", "break()"], "answer": "split()"},
        {"question": "Which method joins list elements into a string?", "choices": ["join()", "combine()", "merge()", "connect()"], "answer": "join()"},
        {"question": "Which function converts a string to an integer?", "choices": ["int()", "integer()", "convert()", "parse()"], "answer": "int()"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this list comprehension?",
          "code": "squares = [x**2 for x in range(5) if x%2 = 0]",
          "choices": [
            "A. The range should start at 1.",
            "B. The if condition should use '==', not '='.",
            "C. x should be a string.",
            "D. The list should use parentheses."
          ],
          "answer": "B"
        },
        {
          "question": "What is the bug in this lambda usage?",
          "code": "nums = [1, 2, 3]\ndoubled = map(lambda x: x*2, nums)\nprint(doubled[0])",
          "choices": [
            "A. lambda cannot be used with map.",
            "B. map returns an iterator, not a list in Python 3.",
            "C. doubled should be a dictionary.",
            "D. The lambda function is missing a return statement."
          ],
          "answer": "B"
        },
        {
          "question": "What is wrong with this import and function call?",
          "code": "import mymodule\ngreet('Alice')",
          "choices": [
            "A. greet should be called as mymodule.greet('Alice').",
            "B. greet is not a function.",
            "C. mymodule should be a string.",
            "D. The import statement is incorrect."
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this error handling code?",
          "code": "try:\n    x = 1 / 0\nexcept:\n    print('Error:', e)",
          "choices": [
            "A. The except block should specify the exception type.",
            "B. The variable 'e' is not defined.",
            "C. The try block should be after except.",
            "D. Division by zero is allowed in Python."
          ],
          "answer": "B"
        },
        {
          "question": "What is wrong with this file I/O code?",
          "code": "f = open('file.txt', 'w')\nf.write('Hello!')\nprint(f.read())\nf.close()",
          "choices": [
            "A. The file should be opened in read mode before reading.",
            "B. f.write is not a valid method.",
            "C. The file should be closed before writing.",
            "D. print should use curly braces."
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "What is the output of this code?\n\nnums = [1, 2, 3]\nprint([x*2 for x in nums])",
          "choices": [
            "A. [2, 4, 6]",
            "B. [1, 2, 3, 1, 2, 3]",
            "C. [1, 4, 9]",
            "D. [1, 2, 3, 2, 4, 6]"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a function that returns the square of a number?",
          "choices": [
            "A. def square(x): return x**2",
            "B. def square(x): print(x**2)",
            "C. def square(): return x**2",
            "D. def square(x): return x*2"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nx = lambda a, b: a + b\nprint(x(2, 3))",
          "choices": [
            "A. 5",
            "B. 6",
            "C. (2, 3)",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly handles a division by zero error?",
          "choices": [
            "A. try:\n    x = 1/0\nexcept ZeroDivisionError:\n    print('Error')",
            "B. x = 1/0",
            "C. if x == 0: print('Error')",
            "D. print(1/0)"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\ndef greet(name='World'):\n    print('Hello,', name)\ngreet()",
          "choices": [
            "A. Hello, World",
            "B. Hello,",
            "C. Hello, name",
            "D. Error"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which keyword is used to define a class?", "choices": ["class", "object", "type", "struct"], "answer": "class"},
        {"question": "Which keyword is used for inheritance?", "choices": ["class Child(Parent):", "inherits", "extends", "subclass"], "answer": "class Child(Parent):"},
        {"question": "Which method is called when an object is created?", "choices": ["__init__", "constructor", "create", "new"], "answer": "__init__"},
        {"question": "Which keyword is used for exception handling?", "choices": ["try", "catch", "except", "handle"], "answer": "try"},
        {"question": "Which keyword is used to import a module?", "choices": ["import", "include", "require", "use"], "answer": "import"},
        {"question": "Which function creates a generator?", "choices": ["yield", "return", "generate", "create"], "answer": "yield"},
        {"question": "Which decorator is used for class methods?", "choices": ["@classmethod", "@staticmethod", "@method", "@class"], "answer": "@classmethod"},
        {"question": "Which function creates a lambda function?", "choices": ["lambda", "def", "function", "create"], "answer": "lambda"},
        {"question": "Which method is used for string formatting?", "choices": ["format()", "f-string", "stringify", "template"], "answer": "format()"},
        {"question": "Which function creates a list comprehension?", "choices": ["[x for x in range(5)]", "list(range(5))", "for x in range(5)", "range(5).list()"], "answer": "[x for x in range(5)]"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this class definition?",
          "code": "class Dog:\n    def __init__(self, name):\n        name = name",
          "choices": [
            "A. The class name should be lowercase.",
            "B. The __init__ method should not have parameters.",
            "C. The instance variable should be self.name = name.",
            "D. The colon after class Dog is not needed."
          ],
          "answer": "C"
        },
        {
          "question": "What is the bug in this decorator usage?",
          "code": "def my_decorator(func):\n    def wrapper():\n        print('Before')\n        func()\n        print('After')\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    print(f'Hello, {name}!')\n\nsay_hello('Alice')",
          "choices": [
            "A. The decorator should not be used with functions that take arguments.",
            "B. The wrapper function should accept *args and **kwargs.",
            "C. The print statement is incorrect.",
            "D. The decorator should return func, not wrapper."
          ],
          "answer": "B"
        },
        {
          "question": "What is wrong with this generator function?",
          "code": "def count_up_to(n):\n    for i in range(n):\n        return i",
          "choices": [
            "A. The function should use yield instead of return.",
            "B. The range should start at 1.",
            "C. The function should not have parameters.",
            "D. The for loop is not needed."
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this exception handling code?",
          "code": "try:\n    x = int('abc')\nexcept ValueError:\n    print('Conversion failed')\nelse:\n    print('Success')\nfinally:\n    print(x)",
          "choices": [
            "A. The except block should not specify ValueError.",
            "B. The variable x may not be defined if an exception occurs.",
            "C. The finally block should come before else.",
            "D. The print statement in else is incorrect."
          ],
          "answer": "B"
        },
        {
          "question": "What is wrong with this set operation?",
          "code": "a = {1, 2, 3}\nb = {3, 4, 5}\nprint(a + b)",
          "choices": [
            "A. Sets cannot be added with '+', use a.union(b) or a | b.",
            "B. The set should use parentheses.",
            "C. The print statement is incorrect.",
            "D. Sets must have unique elements."
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "What is the output?\n\nclass A:\n    def __init__(self):\n        self.x = 1\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        self.y = 2\nb = B()\nprint(b.x, b.y)",
          "choices": [
            "A. 1 2",
            "B. 2 1",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code creates a generator that yields numbers 0 to 2?",
          "choices": [
            "A. def gen():\n    for i in range(3):\n        yield i",
            "B. def gen():\n    return [0, 1, 2]",
            "C. def gen():\n    print(i)",
            "D. def gen():\n    yield [0, 1, 2]"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\ndef add(*args):\n    return sum(args)\nprint(add(1, 2, 3))",
          "choices": [
            "A. 6",
            "B. (1, 2, 3)",
            "C. 123",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly applies a decorator to a function?",
          "choices": [
            "A. @my_decorator\ndef func(): pass",
            "B. my_decorator(func())",
            "C. def func(): pass @my_decorator",
            "D. func = my_decorator"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\ndef f(x, y=2):\n    return x * y\nprint(f(3))",
          "choices": [
            "A. 6",
            "B. 5",
            "C. 3",
            "D. Error"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "Java": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which keyword is used to define a class in Java?", "choices": ["class", "struct", "object", "define"], "answer": "class"},
        {"question": "Which method is the entry point of a Java program?", "choices": ["main", "start", "run", "init"], "answer": "main"},
        {"question": "Which symbol is used to end a statement in Java?", "choices": [";", ".", ":", ","], "answer": ";"},
        {"question": "Which keyword is used to create an object?", "choices": ["new", "create", "object", "make"], "answer": "new"},
        {"question": "Which function is used to print output in Java?", "choices": ["System.out.println", "print", "echo", "printf"], "answer": "System.out.println"},
        {"question": "Which data type is used for decimal numbers in Java?", "choices": ["double", "int", "char", "boolean"], "answer": "double"},
        {"question": "Which keyword is used to inherit a class in Java?", "choices": ["extends", "inherits", "implements", "instanceof"], "answer": "extends"},
        {"question": "Which operator is used for assignment in Java?", "choices": ["=", "==", ":=", "<-"], "answer": "="},
        {"question": "Which keyword is used to define a constant in Java?", "choices": ["final", "const", "static", "define"], "answer": "final"},
        {"question": "Which symbol is used for single-line comments in Java?", "choices": ["//", "#", "<!--", "**"], "answer": "//"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this code?\n\nint x = 5\nSystem.out.println(x);",
        "choices": [
          "A. Missing semicolon after int x = 5",
          "B. println should be print",
          "C. x should be a String",
          "D. System should be system"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this code?\n\nString s = 'hello';",
        "choices": [
          "A. Strings must use double quotes in Java",
          "B. s should be an int",
          "C. Missing semicolon",
          "D. String should be string"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nif (x = 5) {\n  System.out.println(\"Yes\");\n}",
        "choices": [
          "A. Use == for comparison, not =",
          "B. Missing parentheses",
          "C. if should be If",
          "D. System should be system"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nint[] arr = {1, 2, 3};\nSystem.out.println(arr[3]);",
        "choices": [
          "A. Index 3 is out of bounds",
          "B. arr should be a String",
          "C. Use arr(3) instead of arr[3]",
          "D. Missing semicolon"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\npublic void main(String[] args) {\n  System.out.println(\"Hi\");\n}",
        "choices": [
          "A. main should be static",
          "B. args should be int[]",
          "C. println should be print",
          "D. public should be private"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code correctly prints 'Hello, Java!'?",
        "choices": [
          "A. System.out.println(\"Hello, Java!\");",
          "B. print(\"Hello, Java!\");",
          "C. echo 'Hello, Java!';",
          "D. System.print(\"Hello, Java!\");"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nint a = 2, b = 3;\nSystem.out.println(a + b);",
        "choices": [
          "A. 5",
          "B. 23",
          "C. a + b",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code creates an array of 3 integers?",
        "choices": [
          "A. int[] arr = {1, 2, 3};",
          "B. int arr = [1, 2, 3];",
          "C. int arr = {1, 2, 3};",
          "D. int[] arr = (1, 2, 3);"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nfor (int i = 0; i < 2; i++) {\n  System.out.print(i);\n}",
        "choices": [
          "A. 01",
          "B. 12",
          "C. 0 1",
          "D. 1 2"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a method that returns the sum of two ints?",
        "choices": [
          "A. int sum(int a, int b) { return a + b; }",
          "B. void sum(int a, int b) { return a + b; }",
          "C. int sum(a, b) { return a + b; }",
          "D. int sum(int a, int b) print(a + b);"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which keyword is used for inheritance in Java?", "choices": ["extends", "implements", "inherits", "base"], "answer": "extends"},
        {"question": "Which operator is used to compare two values?", "choices": ["==", "=", "!=", "<="], "answer": "=="},
        {"question": "Which keyword is used to implement an interface?", "choices": ["implements", "extends", "interface", "uses"], "answer": "implements"},
        {"question": "Which method is used to start a thread?", "choices": ["start", "run", "begin", "init"], "answer": "start"},
        {"question": "Which exception is thrown for array index out of bounds?", "choices": ["ArrayIndexOutOfBoundsException", "NullPointerException", "IndexException", "OutOfBoundsException"], "answer": "ArrayIndexOutOfBoundsException"},
        {"question": "Which keyword is used to handle exceptions?", "choices": ["try", "catch", "throw", "all of the above"], "answer": "all of the above"},
        {"question": "Which access modifier makes a member visible only within its class?", "choices": ["private", "public", "protected", "default"], "answer": "private"},
        {"question": "Which method is used to get the length of a string?", "choices": ["length()", "size()", "count()", "getLength()"], "answer": "length()"},
        {"question": "Which keyword is used to create a subclass?", "choices": ["extends", "implements", "inherits", "subclass"], "answer": "extends"},
        {"question": "Which keyword is used to prevent inheritance?", "choices": ["final", "static", "const", "private"], "answer": "final"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nfor (int i = 0; i < 5; i++)\n  System.out.println(i)",
          "choices": [
            "A. Missing semicolon after println(i)",
            "B. for should be For",
            "C. i should be a String",
            "D. Use curly braces for the loop"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nString[] arr = new String[2];\nSystem.out.println(arr[0].length());",
          "choices": [
            "A. arr[0] is null, so .length() throws NullPointerException",
            "B. arr should be an int array",
            "C. Use arr.length instead of arr[0].length()",
            "D. System should be system"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\npublic class Test {\n  private int x;\n  public void setX(int x) {\n    x = x;\n  }\n}",
          "choices": [
            "A. Should use this.x = x to assign to the field",
            "B. setX should be static",
            "C. x should be a String",
            "D. setX should return int"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  int x = 1 / 0;\n} catch (Exception e) {\n  System.out.println(\"Error\");\n}",
          "choices": [
            "A. Division by zero throws ArithmeticException",
            "B. catch should be Catch",
            "C. System should be system",
            "D. x should be a double"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nList<Integer> list = new ArrayList<>();\nlist.add(\"5\");",
          "choices": [
            "A. Cannot add a String to a List<Integer>",
            "B. list should be a Set",
            "C. add should be append",
            "D. ArrayList should be arraylist"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates an ArrayList of Strings?",
          "choices": [
            "A. ArrayList<String> list = new ArrayList<>();",
            "B. ArrayList list = new ArrayList<String>();",
            "C. List<String> list = new ArrayList<>();",
            "D. All of the above"
          ],
          "answer": "D"
        },
        {
          "question": "What is the output?\n\nString s = \"abc\";\nSystem.out.println(s.toUpperCase());",
          "choices": [
            "A. ABC",
            "B. abc",
            "C. error",
            "D. Abc"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines an interface?",
          "choices": [
            "A. interface MyInterface { void doSomething(); }",
            "B. class MyInterface { void doSomething(); }",
            "C. public interface MyInterface() {}",
            "D. interface MyInterface: void doSomething();"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nint[] arr = {1, 2, 3};\nSystem.out.println(arr.length);",
          "choices": [
            "A. 3",
            "B. 2",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly overrides the toString() method?",
          "choices": [
            "A. public String toString() { return \"Hello\"; }",
            "B. String toString() { return \"Hello\"; }",
            "C. public void toString() { return \"Hello\"; }",
            "D. public String ToString() { return \"Hello\"; }"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which keyword is used for abstract classes?", "choices": ["abstract", "interface", "virtual", "base"], "answer": "abstract"},
        {"question": "Which method is called when an object is created?", "choices": ["constructor", "main", "init", "start"], "answer": "constructor"},
        {"question": "Which keyword is used for interfaces?", "choices": ["interface", "abstract", "implements", "extends"], "answer": "interface"},
        {"question": "Which keyword is used to inherit from an interface?", "choices": ["implements", "extends", "inherits", "uses"], "answer": "implements"},
        {"question": "Which exception is thrown for division by zero?", "choices": ["ArithmeticException", "NullPointerException", "IndexOutOfBoundsException", "ZeroDivisionException"], "answer": "ArithmeticException"},
        {"question": "Which keyword is used to define a package?", "choices": ["package", "import", "namespace", "module"], "answer": "package"},
        {"question": "Which keyword is used to import a class?", "choices": ["import", "package", "include", "require"], "answer": "import"},
        {"question": "Which method is used to start a thread?", "choices": ["start", "run", "begin", "init"], "answer": "start"},
        {"question": "Which keyword is used to override a method?", "choices": ["@Override", "override", "overload", "overwrite"], "answer": "@Override"},
        {"question": "Which keyword is used to define a static method?", "choices": ["static", "final", "const", "private"], "answer": "static"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\npublic class A {\n  public void foo() {\n    bar();\n  }\n}\nclass B extends A {}",
          "choices": [
            "A. bar() is not defined in A or its superclasses",
            "B. foo() should be static",
            "C. B should not extend A",
            "D. class A should be abstract"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nList<String> list = Arrays.asList(\"a\", \"b\");\nlist.add(\"c\");",
          "choices": [
            "A. Arrays.asList returns a fixed-size list; add() throws UnsupportedOperationException",
            "B. list should be a Set",
            "C. add should be append",
            "D. Arrays should be Array"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\npublic class Test {\n  public static void main(String[] args) {\n    int x = null;\n  }\n}",
          "choices": [
            "A. Cannot assign null to a primitive int",
            "B. main should not be static",
            "C. x should be a String",
            "D. args should be int[]"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  File f = new File(\"test.txt\");\n  FileReader fr = new FileReader(f);\n} catch (IOException e) {\n  System.out.println(\"IO Error\");\n}",
          "choices": [
            "A. FileReader constructor can throw FileNotFoundException, which is not caught by IOException in some Java versions",
            "B. File should be file",
            "C. catch should be Catch",
            "D. System should be system"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\npublic interface MyIntf {\n  void foo() { System.out.println(\"foo\"); }\n}",
          "choices": [
            "A. Interface methods cannot have a body (unless default or static)",
            "B. foo should be static",
            "C. MyIntf should be a class",
            "D. System should be system"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates a generic method that returns the first element of a list?",
          "choices": [
            "A. public <T> T first(List<T> list) { return list.get(0); }",
            "B. public T first(List<T> list) { return list.get(0); }",
            "C. public <T> T first(List<T> list) { return list[0]; }",
            "D. public <T> T first(List<T> list) { return list.get(1); }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nStringBuilder sb = new StringBuilder();\nsb.append(\"a\");\nsb.append(\"b\");\nSystem.out.println(sb.toString());",
          "choices": [
            "A. ab",
            "B. a b",
            "C. ba",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines an abstract class with an abstract method?",
          "choices": [
            "A. abstract class A { abstract void foo(); }",
            "B. class A { void foo(); }",
            "C. abstract class A { void foo() {} }",
            "D. interface A { void foo(); }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"a\", 1);\nmap.put(\"b\", 2);\nSystem.out.println(map.get(\"b\"));",
          "choices": [
            "A. 2",
            "B. 1",
            "C. b",
            "D. null"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly implements a functional interface?",
          "choices": [
            "A. interface F { void f(); }\nF f = () -> {};",
            "B. interface F { void f(); }\nF f = new F();",
            "C. interface F { void f(); }\nF f = () => {};",
            "D. interface F { void f(); }\nF f = function() {};"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "C": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which of the following is the correct way to declare an integer variable in C?", "choices": ["int x;", "x int;", "declare int x;", "var x int;"], "answer": "int x;"},
        {"question": "Which symbol is used to end a statement in C?", "choices": [";", ".", ":", ","], "answer": ";"},
        {"question": "Which function is used to print output in C?", "choices": ["printf", "print", "cout", "echo"], "answer": "printf"},
        {"question": "Which header file is required for printf?", "choices": ["stdio.h", "conio.h", "math.h", "stdlib.h"], "answer": "stdio.h"},
        {"question": "What is the correct syntax for a main function in C?", "choices": ["int main()", "void main[]", "main() int", "function main()"], "answer": "int main()"},
        {"question": "Which operator is used for assignment in C?", "choices": ["=", "==", ":=", "<-"], "answer": "="},
        {"question": "How do you write a single-line comment in C?", "choices": ["// comment", "# comment", "<!-- comment -->", "** comment"], "answer": "// comment"},
        {"question": "Which data type is used for decimal numbers in C?", "choices": ["float", "int", "char", "bool"], "answer": "float"},
        {"question": "Which function reads input from the user in C?", "choices": ["scanf", "input", "read", "gets"], "answer": "scanf"},
        {"question": "What is the output of printf(\"%d\", 2 + 3);?", "choices": ["5", "23", "2+3", "Error"], "answer": "5"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this code?\n\nint x = 5\nprintf(\"%d\", x);",
        "choices": [
          "A. Missing semicolon after int x = 5",
          "B. printf should be print",
          "C. x should be a float",
          "D. %d should be %f"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this code?\n\nchar* s = 'hello';",
        "choices": [
          "A. Strings must use double quotes in C",
          "B. s should be an int",
          "C. Missing semicolon",
          "D. char* should be char"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nif (x = 5) {\n  printf(\"Yes\");\n}",
        "choices": [
          "A. Use == for comparison, not =",
          "B. Missing parentheses",
          "C. if should be If",
          "D. printf should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nint arr[3] = {1, 2, 3};\nprintf(\"%d\", arr[3]);",
        "choices": [
          "A. Index 3 is out of bounds",
          "B. arr should be a char array",
          "C. Use arr(3) instead of arr[3]",
          "D. Missing semicolon"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nvoid main() {\n  printf(\"Hi\");\n}",
        "choices": [
          "A. main should return int",
          "B. printf should be print",
          "C. void should be int",
          "D. main should be Main"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code correctly prints 'Hello, C!'?",
        "choices": [
          "A. printf(\"Hello, C!\\n\");",
          "B. print(\"Hello, C!\");",
          "C. echo 'Hello, C!';",
          "D. printf('Hello, C!');"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nint a = 2, b = 3;\nprintf(\"%d\", a + b);",
        "choices": [
          "A. 5",
          "B. 23",
          "C. a + b",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code creates an array of 3 integers?",
        "choices": [
          "A. int arr[3] = {1, 2, 3};",
          "B. int arr = [1, 2, 3];",
          "C. int arr = {1, 2, 3};",
          "D. int arr[3] = (1, 2, 3);"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nfor (int i = 0; i < 2; i++) {\n  printf(\"%d\", i);\n}",
        "choices": [
          "A. 01",
          "B. 12",
          "C. 0 1",
          "D. 1 2"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a function that returns the sum of two ints?",
        "choices": [
          "A. int sum(int a, int b) { return a + b; }",
          "B. void sum(int a, int b) { return a + b; }",
          "C. int sum(a, b) { return a + b; }",
          "D. int sum(int a, int b) printf(\"%d\", a + b);"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which keyword is used to define a constant in C?", "choices": ["const", "define", "static", "final"], "answer": "const"},
        {"question": "What is the output of: int a = 5; printf(\"%d\", a++);?", "choices": ["5", "6", "Error", "Undefined"], "answer": "5"},
        {"question": "Which operator is used to access members of a struct?", "choices": [".", "->", ":", "#"], "answer": "."},
        {"question": "How do you declare a pointer to an integer?", "choices": ["int *p;", "int p*;", "*int p;", "pointer int p;"], "answer": "int *p;"},
        {"question": "Which function is used to allocate memory dynamically?", "choices": ["malloc", "alloc", "new", "calloc"], "answer": "malloc"},
        {"question": "What is the correct way to define an array of 10 integers?", "choices": ["int arr[10];", "int arr(10);", "array int arr[10];", "int[10] arr;"], "answer": "int arr[10];"},
        {"question": "Which format specifier is used for float in printf?", "choices": ["%f", "%d", "%c", "%s"], "answer": "%f"},
        {"question": "What is the output of: int a = 2, b = 3; printf(\"%d\", a == b);?", "choices": ["0", "1", "2", "3"], "answer": "0"},
        {"question": "Which function is used to copy strings in C?", "choices": ["strcpy", "copy", "strcat", "strcopy"], "answer": "strcpy"},
        {"question": "What is the value of arr[2] after: int arr[3] = {1, 2, 3};?", "choices": ["3", "2", "1", "Undefined"], "answer": "3"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nfor (int i = 0; i < 5; i++)\n  printf(\"%d\", i)",
          "choices": [
            "A. Missing semicolon after printf(i)",
            "B. for should be For",
            "C. i should be a char",
            "D. Use curly braces for the loop"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nint* arr = malloc(3 * sizeof(int));\nprintf(\"%d\", arr[0]);\nfree(arr);",
          "choices": [
            "A. arr[0] is uninitialized, may print garbage value",
            "B. arr should be a char array",
            "C. Use arr(0) instead of arr[0]",
            "D. free should be delete"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nvoid setX(int x) {\n  x = x;\n}",
          "choices": [
            "A. Should use a pointer or return value to modify the original variable",
            "B. setX should be static",
            "C. x should be a char",
            "D. setX should return int"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nint x = 1 / 0;\nprintf(\"%d\", x);",
          "choices": [
            "A. Division by zero is undefined behavior",
            "B. printf should be print",
            "C. x should be a float",
            "D. 1/0 is allowed in C"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nint arr[2];\narr[0] = 1;\narr[1] = 2;\narr[2] = 3;",
          "choices": [
            "A. arr[2] is out of bounds",
            "B. arr should be a pointer",
            "C. arr[0] should be arr(0)",
            "D. arr should be a char array"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates a pointer to an int?",
          "choices": [
            "A. int* p;",
            "B. int p*;",
            "C. int &p;",
            "D. pointer int p;"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nint arr[3] = {1, 2, 3};\nprintf(\"%d\", arr[1]);",
          "choices": [
            "A. 2",
            "B. 1",
            "C. 3",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a struct with two ints?",
          "choices": [
            "A. struct Point { int x; int y; };",
            "B. struct Point { x, y; };",
            "C. struct Point (int x, int y);",
            "D. struct Point { int x, y };"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nint x = 5;\nint* p = &x;\nprintf(\"%d\", *p);",
          "choices": [
            "A. 5",
            "B. x",
            "C. &x",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly frees dynamically allocated memory?",
          "choices": [
            "A. int* p = malloc(sizeof(int)); free(p);",
            "B. int* p = malloc(sizeof(int)); delete p;",
            "C. int* p = new int; free(p);",
            "D. int* p = malloc(sizeof(int)); p = NULL;"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which function is used to deallocate memory in C?", "choices": ["free", "delete", "dispose", "release"], "answer": "free"},
        {"question": "What is the output of: int x = 5; printf(\"%d\", ++x);?", "choices": ["6", "5", "Error", "Undefined"], "answer": "6"},
        {"question": "Which keyword is used for conditional compilation?", "choices": ["#ifdef", "#if", "#define", "#endif"], "answer": "#ifdef"},
        {"question": "What is the size of a pointer on a 64-bit system?", "choices": ["8 bytes", "4 bytes", "2 bytes", "16 bytes"], "answer": "8 bytes"},
        {"question": "Which function compares two strings in C?", "choices": ["strcmp", "strcomp", "compare", "strcompare"], "answer": "strcmp"},
        {"question": "What is the output of: printf(\"%d\", sizeof(double));?", "choices": ["8", "4", "2", "16"], "answer": "8"},
        {"question": "Which operator is used to access a member of a struct through a pointer?", "choices": ["->", ".", ":", "*"], "answer": "->"},
        {"question": "What is the result of: int a = 5, b = 2; printf(\"%d\", a / b);?", "choices": ["2", "2.5", "3", "0"], "answer": "2"},
        {"question": "Which header file is required for dynamic memory allocation?", "choices": ["stdlib.h", "stdio.h", "string.h", "math.h"], "answer": "stdlib.h"},
        {"question": "What is the output of: int a = 5; printf(\"%d\", a == 5 ? 1 : 0);?", "choices": ["1", "0", "5", "Error"], "answer": "1"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\nstruct Node n;\nn.next = NULL;\nprintf(\"%d\", n->data);",
          "choices": [
            "A. n is not a pointer, use n.data instead of n->data",
            "B. struct Node should be struct node",
            "C. next should be data",
            "D. printf should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nint* p = NULL;\nprintf(\"%d\", *p);",
          "choices": [
            "A. Dereferencing NULL pointer causes segmentation fault",
            "B. p should be a char pointer",
            "C. printf should be print",
            "D. *p should be p*"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nvoid foo() {\n  static int x = 0;\n  x++;\n}\nint main() {\n  foo();\n  printf(\"%d\", x);\n}",
          "choices": [
            "A. x is not visible in main, it's local to foo",
            "B. foo should be static",
            "C. x should be global",
            "D. printf should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nchar s[5] = \"hello\";",
          "choices": [
            "A. \"hello\" needs 6 bytes (including null terminator), s[5] is too small",
            "B. s should be an int array",
            "C. Use single quotes for hello",
            "D. char* should be char"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nint a = 5, b = 0;\nprintf(\"%d\", a / b);",
          "choices": [
            "A. Division by zero is undefined behavior",
            "B. a should be a float",
            "C. printf should be print",
            "D. b should be 1"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code defines a function pointer to a function taking int and returning int?",
          "choices": [
            "A. int (*fptr)(int);",
            "B. int fptr(int*);",
            "C. int* fptr(int);",
            "D. int (*fptr)();"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nint arr[5] = {1,2,3,4,5};\nint sum = 0;\nfor(int i=0;i<5;i++) sum += arr[i];\nprintf(\"%d\", sum);",
          "choices": [
            "A. 15",
            "B. 10",
            "C. 5",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly allocates a 2D array of ints (3x3) dynamically?",
          "choices": [
            "A. int** arr = malloc(3 * sizeof(int*)); for(int i=0;i<3;i++) arr[i] = malloc(3 * sizeof(int));",
            "B. int arr[3][3];",
            "C. int* arr = malloc(9 * sizeof(int));",
            "D. int arr[3] = malloc(3 * sizeof(int));"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nchar s[] = \"abc\";\nprintf(\"%c\", s[1]);",
          "choices": [
            "A. b",
            "B. a",
            "C. c",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly frees all memory for a dynamically allocated 2D array?",
          "choices": [
            "A. for(int i=0;i<3;i++) free(arr[i]); free(arr);",
            "B. free(arr);",
            "C. delete[] arr;",
            "D. arr = NULL;"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "C++": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which operator is used for input in C++?", "choices": [">>", "<<", "==", "&&"], "answer": ">>"},
        {"question": "Which header file is required for cout and cin?", "choices": ["iostream", "stdio.h", "conio.h", "fstream"], "answer": "iostream"},
        {"question": "What is the correct way to declare a string in C++?", "choices": ["string s;", "str s;", "char s[];", "String s;"], "answer": "string s;"},
        {"question": "Which keyword is used to create an object in C++?", "choices": ["new", "create", "object", "make"], "answer": "new"},
        {"question": "Which function is used to print output in C++?", "choices": ["cout", "printf", "print", "echo"], "answer": "cout"},
        {"question": "Which symbol is used to end a statement in C++?", "choices": [";", ".", ":", ","], "answer": ";"},
        {"question": "Which keyword is used to define a class in C++?", "choices": ["class", "struct", "object", "define"], "answer": "class"},
        {"question": "Which function is the entry point of a C++ program?", "choices": ["main", "start", "entry", "init"], "answer": "main"},
        {"question": "Which data type is used for decimal numbers in C++?", "choices": ["float", "int", "char", "bool"], "answer": "float"},
        {"question": "Which operator is used for output in C++?", "choices": ["<<", ">>", "==", "&&"], "answer": "<<"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this code?\n\nint x = 5\nstd::cout << x << std::endl;",
        "choices": [
          "A. Missing semicolon after int x = 5",
          "B. cout should be printf",
          "C. x should be a float",
          "D. std:: should be removed"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this code?\n\nstring s = \"hello\";",
        "choices": [
          "A. Must include <string> and use std::string",
          "B. s should be an int",
          "C. Missing semicolon",
          "D. Use single quotes for hello"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nif (x = 5) {\n  std::cout << \"Yes\" << std::endl;\n}",
        "choices": [
          "A. Use == for comparison, not =",
          "B. Missing parentheses",
          "C. if should be If",
          "D. cout should be printf"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nint arr[3] = {1, 2, 3};\nstd::cout << arr[3] << std::endl;",
        "choices": [
          "A. Index 3 is out of bounds",
          "B. arr should be a char array",
          "C. Use arr(3) instead of arr[3]",
          "D. Missing semicolon"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nvoid main() {\n  std::cout << \"Hi\" << std::endl;\n}",
        "choices": [
          "A. main should return int",
          "B. cout should be printf",
          "C. void should be int",
          "D. main should be Main"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code correctly prints 'Hello, C++!'?",
        "choices": [
          "A. std::cout << \"Hello, C++!\" << std::endl;",
          "B. printf(\"Hello, C++!\\n\");",
          "C. echo 'Hello, C++!';",
          "D. cout << 'Hello, C++!';"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nint a = 2, b = 3;\nstd::cout << a + b << std::endl;",
        "choices": [
          "A. 5",
          "B. 23",
          "C. a + b",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code creates an array of 3 integers?",
        "choices": [
          "A. int arr[3] = {1, 2, 3};",
          "B. int arr = [1, 2, 3];",
          "C. int arr = {1, 2, 3};",
          "D. int arr[3] = (1, 2, 3);"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nfor (int i = 0; i < 2; i++) {\n  std::cout << i;\n}",
        "choices": [
          "A. 01",
          "B. 12",
          "C. 0 1",
          "D. 1 2"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a function that returns the sum of two ints?",
        "choices": [
          "A. int sum(int a, int b) { return a + b; }",
          "B. void sum(int a, int b) { return a + b; }",
          "C. int sum(a, b) { return a + b; }",
          "D. int sum(int a, int b) std::cout << a + b;"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which keyword is used for inheritance in C++?", "choices": ["public", "extends", "inherits", "base"], "answer": "public"},
        {"question": "What is the output of: int a = 5; cout << a++;?", "choices": ["5", "6", "Error", "Undefined"], "answer": "5"},
        {"question": "Which operator is used to access members of a class?", "choices": [".", "->", ":", "#"], "answer": "."},
        {"question": "How do you declare a pointer to an integer in C++?", "choices": ["int *p;", "int p*;", "*int p;", "pointer int p;"], "answer": "int *p;"},
        {"question": "Which function is used to allocate memory dynamically in C++?", "choices": ["new", "malloc", "alloc", "calloc"], "answer": "new"},
        {"question": "What is the correct way to define an array of 10 integers in C++?", "choices": ["int arr[10];", "int arr(10);", "array int arr[10];", "int[10] arr;"], "answer": "int arr[10];"},
        {"question": "Which format specifier is used for float in printf in C++?", "choices": ["%f", "%d", "%c", "%s"], "answer": "%f"},
        {"question": "What is the output of: int a = 2, b = 3; cout << (a == b);?", "choices": ["0", "1", "2", "3"], "answer": "0"},
        {"question": "Which function is used to copy strings in C++?", "choices": ["strcpy", "copy", "strcat", "strcopy"], "answer": "strcpy"},
        {"question": "What is the value of arr[2] after: int arr[3] = {1, 2, 3};?", "choices": ["3", "2", "1", "Undefined"], "answer": "3"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nfor (int i = 0; i < 5; i++)\n  std::cout << i;",
          "choices": [
            "A. Missing curly braces for the loop if multiple statements",
            "B. for should be For",
            "C. i should be a char",
            "D. Use parentheses for the loop"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nstd::vector<int> v;\nstd::cout << v.at(0);",
          "choices": [
            "A. v is empty, v.at(0) throws an exception",
            "B. v should be an array",
            "C. Use v[0] instead of v.at(0)",
            "D. std:: should be removed"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nclass Test {\n  int x;\n  void setX(int x) {\n    x = x;\n  }\n};",
          "choices": [
            "A. Should use this->x = x to assign to the field",
            "B. setX should be static",
            "C. x should be a char",
            "D. setX should return int"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  int x = 1 / 0;\n} catch (std::exception& e) {\n  std::cout << \"Error\";\n}",
          "choices": [
            "A. Division by zero throws a runtime error, not a std::exception",
            "B. catch should be Catch",
            "C. std:: should be removed",
            "D. x should be a double"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nstd::vector<int> v;\nv.push_back(\"5\");",
          "choices": [
            "A. Cannot add a string to a vector of int",
            "B. v should be a set",
            "C. push_back should be append",
            "D. std:: should be removed"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates a std::vector of ints?",
          "choices": [
            "A. std::vector<int> v;",
            "B. vector<int> v;",
            "C. std::vector v;",
            "D. std::vector<int> v = new vector<int>();"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nstd::string s = \"abc\";\nstd::cout << s.size();",
          "choices": [
            "A. 3",
            "B. 2",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a class with a public method?",
          "choices": [
            "A. class A { public: void foo() {} };",
            "B. class A { void foo() public {}; };",
            "C. class A { public void foo() {}; };",
            "D. class A { foo() public {}; };"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nint arr[3] = {1, 2, 3};\nstd::cout << arr[1];",
          "choices": [
            "A. 2",
            "B. 1",
            "C. 3",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly overloads the + operator for a class?",
          "choices": [
            "A. MyClass operator+(const MyClass& other);",
            "B. MyClass operator+(MyClass other);",
            "C. operator+ MyClass(const MyClass& other);",
            "D. MyClass +operator(const MyClass& other);"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which function is used to deallocate memory in C++?", "choices": ["delete", "free", "dispose", "release"], "answer": "delete"},
        {"question": "What is the output of: int x = 5; cout << ++x;?", "choices": ["6", "5", "Error", "Undefined"], "answer": "6"},
        {"question": "Which keyword is used for exception handling in C++?", "choices": ["try", "catch", "throw", "all of the above"], "answer": "all of the above"},
        {"question": "What is the size of a pointer on a 64-bit system in C++?", "choices": ["8 bytes", "4 bytes", "2 bytes", "16 bytes"], "answer": "8 bytes"},
        {"question": "Which function compares two strings in C++?", "choices": ["strcmp", "compare", "strcomp", "strcompare"], "answer": "strcmp"},
        {"question": "What is the output of: cout << sizeof(double);?", "choices": ["8", "4", "2", "16"], "answer": "8"},
        {"question": "Which operator is used to access a member of a class through a pointer?", "choices": ["->", ".", ":", "*"], "answer": "->"},
        {"question": "What is the result of: int a = 5, b = 2; cout << a / b;?", "choices": ["2", "2.5", "3", "0"], "answer": "2"},
        {"question": "Which header file is required for dynamic memory allocation in C++?", "choices": ["cstdlib", "iostream", "string", "cmath"], "answer": "cstdlib"},
        {"question": "What is the output of: int a = 5; cout << (a == 5 ? 1 : 0);?", "choices": ["1", "0", "5", "Error"], "answer": "1"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nclass A {\n  virtual void foo() = 0;\n};\nA a;",
          "choices": [
            "A. Cannot instantiate an abstract class",
            "B. foo should not be virtual",
            "C. a should be a pointer",
            "D. class A should be struct"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nstd::unique_ptr<int> p;\n*p = 5;",
          "choices": [
            "A. p is not initialized, dereferencing is undefined",
            "B. p should be a shared_ptr",
            "C. *p should be p*",
            "D. unique_ptr should be auto_ptr"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\ntemplate<typename T>\nvoid swap(T a, T b) {\n  T temp = a;\n  a = b;\n  b = temp;\n}",
          "choices": [
            "A. swap does not swap the original arguments, only copies",
            "B. T should be int",
            "C. swap should return T",
            "D. template should be class"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nstd::map<int, std::string> m;\nstd::cout << m[1];",
          "choices": [
            "A. m[1] creates a default value if key 1 does not exist",
            "B. m should be a vector",
            "C. cout should be printf",
            "D. map should be unordered_map"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nclass B : public A {};\nA* a = new B();\ndelete a;",
          "choices": [
            "A. A's destructor should be virtual for proper cleanup",
            "B. B should not inherit from A",
            "C. delete should be free",
            "D. a should be a reference"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code defines a template function that returns the maximum of two values?",
          "choices": [
            "A. template<typename T> T max(T a, T b) { return a > b ? a : b; }",
            "B. T max(T a, T b) { return a > b ? a : b; }",
            "C. template<class T> T max(T a, T b) { return a < b ? a : b; }",
            "D. template<typename T> T max(T a, T b) { return a < b ? a : b; }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nstd::vector<int> v = {1,2,3};\nstd::cout << v.size();",
          "choices": [
            "A. 3",
            "B. 2",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a class with a virtual function?",
          "choices": [
            "A. class A { public: virtual void foo() {}; };",
            "B. class A { public: void virtual foo() {}; };",
            "C. class A { public: foo() virtual {}; };",
            "D. class A { public: void foo() {}; };"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nstd::string s = \"abc\";\nstd::cout << s[1];",
          "choices": [
            "A. b",
            "B. a",
            "C. c",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly uses a smart pointer?",
          "choices": [
            "A. std::unique_ptr<int> p = std::make_unique<int>(5);",
            "B. int* p = new int(5);",
            "C. std::auto_ptr<int> p(new int(5));",
            "D. std::shared_ptr<int> p = new int(5);"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "PHP": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which symbol is used to start a variable in PHP?", "choices": ["$", "@", "#", "%"], "answer": "$"},
        {"question": "Which tag is used to start PHP code?", "choices": ["<?php", "<php>", "<?", "<script>"], "answer": "<?php"},
        {"question": "Which function prints output in PHP?", "choices": ["echo", "print", "printf", "write"], "answer": "echo"},
        {"question": "Which symbol is used to end a statement in PHP?", "choices": [";", ".", ":", ","], "answer": ";"},
        {"question": "Which function gets the length of a string?", "choices": ["strlen", "length", "count", "size"], "answer": "strlen"},
        {"question": "Which function is used to include another PHP file?", "choices": ["include", "require", "import", "add"], "answer": "include"},
        {"question": "Which function checks if a variable is set?", "choices": ["isset", "empty", "defined", "exists"], "answer": "isset"},
        {"question": "Which function is used to start a session?", "choices": ["session_start", "start_session", "begin_session", "init_session"], "answer": "session_start"},
        {"question": "Which function is used to connect to a MySQL database?", "choices": ["mysqli_connect", "mysql_connect", "db_connect", "connect_db"], "answer": "mysqli_connect"},
        {"question": "Which function is used to get the value of a POST variable?", "choices": ["$_POST", "$_GET", "$POST", "$GET"], "answer": "$_POST"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this code?\n\n<?php\necho 'Hello World'\n?>",
        "choices": [
          "A. Missing semicolon after 'Hello World'",
          "B. echo should be print",
          "C. 'Hello World' should be in double quotes",
          "D. <?php should be <?"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this code?\n\n$name = John;",
        "choices": [
          "A. John should be in quotes",
          "B. $name should be $Name",
          "C. Missing semicolon",
          "D. $name should be an int"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nif ($x = 5) {\n  echo 'Yes';\n}",
        "choices": [
          "A. Use == for comparison, not =",
          "B. Missing parentheses",
          "C. if should be If",
          "D. echo should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\n$arr = array(1, 2, 3);\necho $arr[3];",
        "choices": [
          "A. Index 3 is out of bounds",
          "B. arr should be a string",
          "C. Use $arr(3) instead of $arr[3]",
          "D. Missing semicolon"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nfunction greet() {\n  echo 'Hi';\n}\ngreet;",
        "choices": [
          "A. greet should be called as greet()",
          "B. echo should be print",
          "C. greet should be a variable",
          "D. function should be method"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code correctly prints 'Hello, PHP!'?",
        "choices": [
          "A. echo 'Hello, PHP!';",
          "B. print('Hello, PHP!');",
          "C. echo Hello, PHP!;",
          "D. printf('Hello, PHP!');"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\n$a = 2; $b = 3;\necho $a + $b;",
        "choices": [
          "A. 5",
          "B. 23",
          "C. $a + $b",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code creates an array of 3 integers?",
        "choices": [
          "A. $arr = array(1, 2, 3);",
          "B. $arr = [1, 2, 3];",
          "C. $arr = {1, 2, 3};",
          "D. $arr = (1, 2, 3);"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nfor ($i = 0; $i < 2; $i++) {\n  echo $i;\n}",
        "choices": [
          "A. 01",
          "B. 12",
          "C. 0 1",
          "D. 1 2"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a function that returns the sum of two numbers?",
        "choices": [
          "A. function sum($a, $b) { return $a + $b; }",
          "B. function sum($a, $b) { echo $a + $b; }",
          "C. function sum(a, b) { return a + b; }",
          "D. function sum($a, $b) echo $a + $b;"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which function checks if a file exists?", "choices": ["file_exists", "is_file", "exists", "check_file"], "answer": "file_exists"},
        {"question": "Which function reads a file into a string?", "choices": ["file_get_contents", "read_file", "get_file", "fread"], "answer": "file_get_contents"},
        {"question": "Which function removes whitespace from both ends of a string?", "choices": ["trim", "strip", "cut", "clean"], "answer": "trim"},
        {"question": "Which function splits a string into an array?", "choices": ["explode", "split", "divide", "separate"], "answer": "explode"},
        {"question": "Which function joins array elements into a string?", "choices": ["implode", "join", "combine", "merge"], "answer": "implode"},
        {"question": "Which function sorts an array in ascending order?", "choices": ["sort", "asort", "ksort", "rsort"], "answer": "sort"},
        {"question": "Which function returns the number of elements in an array?", "choices": ["count", "size", "length", "elements"], "answer": "count"},
        {"question": "Which function gets the current Unix timestamp?", "choices": ["time", "now", "timestamp", "date"], "answer": "time"},
        {"question": "Which function sends a raw HTTP header?", "choices": ["header", "send_header", "set_header", "http_header"], "answer": "header"},
        {"question": "Which function redirects to another page?", "choices": ["header('Location: ...')", "redirect", "goto", "move"], "answer": "header('Location: ...')"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nfor ($i = 0; $i < 5; $i++)\n  echo $i",
          "choices": [
            "A. Missing semicolon after echo $i",
            "B. for should be For",
            "C. $i should be a string",
            "D. Use curly braces for the loop"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n$arr = array();\necho $arr[0];",
          "choices": [
            "A. $arr[0] is undefined, will cause a notice",
            "B. arr should be a string",
            "C. Use $arr(0) instead of $arr[0]",
            "D. echo should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nfunction setX($x) {\n  $x = $x;\n}",
          "choices": [
            "A. Should use global or return value to modify the original variable",
            "B. setX should be static",
            "C. $x should be a string",
            "D. setX should return int"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  $x = 1 / 0;\n} catch (Exception $e) {\n  echo 'Error';\n}",
          "choices": [
            "A. Division by zero throws a warning, not an Exception",
            "B. catch should be Catch",
            "C. echo should be print",
            "D. $x should be a float"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\n$arr = array();\narray_push($arr, '5');\necho $arr[1];",
          "choices": [
            "A. $arr[1] is undefined after one push",
            "B. arr should be a string",
            "C. array_push should be append",
            "D. echo should be print"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates an associative array?",
          "choices": [
            "A. $arr = array('a' => 1, 'b' => 2);",
            "B. $arr = [1, 2, 3];",
            "C. $arr = array(1, 2, 3);",
            "D. $arr = (a:1, b:2);"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\n$str = 'abc';\necho strtoupper($str);",
          "choices": [
            "A. ABC",
            "B. abc",
            "C. error",
            "D. Abc"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a class with a public method?",
          "choices": [
            "A. class A { public function foo() {} }",
            "B. class A { function foo() public {} }",
            "C. class A { public foo() {} }",
            "D. class A { foo() public {} }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\n$arr = array(1, 2, 3);\necho count($arr);",
          "choices": [
            "A. 3",
            "B. 2",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly defines a constructor in PHP?",
          "choices": [
            "A. function __construct() {}",
            "B. function construct() {}",
            "C. function new() {}",
            "D. function __constructor() {}"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which function serializes a value?", "choices": ["serialize", "json_encode", "pack", "stringify"], "answer": "serialize"},
        {"question": "Which function unserializes a value?", "choices": ["unserialize", "json_decode", "unpack", "parse"], "answer": "unserialize"},
        {"question": "Which function encodes a value to JSON?", "choices": ["json_encode", "serialize", "stringify", "pack"], "answer": "json_encode"},
        {"question": "Which function decodes a JSON string?", "choices": ["json_decode", "unserialize", "parse_json", "decode"], "answer": "json_decode"},
        {"question": "Which function creates a new object?", "choices": ["new", "create", "object", "make"], "answer": "new"},
        {"question": "Which function defines a class method?", "choices": ["function", "method", "def", "define"], "answer": "function"},
        {"question": "Which function gets all keys of an array?", "choices": ["array_keys", "keys", "get_keys", "all_keys"], "answer": "array_keys"},
        {"question": "Which function gets all values of an array?", "choices": ["array_values", "values", "get_values", "all_values"], "answer": "array_values"},
        {"question": "Which function checks if a key exists in an array?", "choices": ["array_key_exists", "key_exists", "has_key", "exists_key"], "answer": "array_key_exists"},
        {"question": "Which function merges two arrays?", "choices": ["array_merge", "merge", "combine", "join"], "answer": "array_merge"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nclass A {\n  abstract function foo();\n}",
          "choices": [
            "A. Class must be declared abstract to have abstract methods",
            "B. foo should be static",
            "C. A should be an interface",
            "D. function should be method"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n$arr = array('a' => 1, 'b' => 2);\necho $arr['c'];",
          "choices": [
            "A. $arr['c'] is undefined, will cause a notice",
            "B. arr should be a string",
            "C. echo should be print",
            "D. array should be list"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\ninterface MyIntf {\n  function foo() { echo 'foo'; }\n}",
          "choices": [
            "A. Interface methods cannot have a body",
            "B. foo should be static",
            "C. MyIntf should be a class",
            "D. echo should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  throw new Exception('Error');\n} catch (Error $e) {\n  echo $e->getMessage();\n}",
          "choices": [
            "A. Exception is not caught by catch (Error $e)",
            "B. throw should be Throw",
            "C. echo should be print",
            "D. $e should be $E"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nclass B extends A {}\n$a = new B();\n$a->foo();",
          "choices": [
            "A. A must define foo() or B must override it",
            "B. B should not extend A",
            "C. foo should be static",
            "D. $a should be a string"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code defines a trait and uses it in a class?",
          "choices": [
            "A. trait T { function foo() {} } class A { use T; }",
            "B. class T { function foo() {} } class A { use T; }",
            "C. trait T { function foo() {} } class A extends T {}",
            "D. class T { function foo() {} } class A extends T {}"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nclass A { public static function foo() { return 5; } }\necho A::foo();",
          "choices": [
            "A. 5",
            "B. foo",
            "C. Error",
            "D. A"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines an abstract class with an abstract method?",
          "choices": [
            "A. abstract class A { abstract function foo(); }",
            "B. class A { abstract function foo(); }",
            "C. abstract class A { function foo(); }",
            "D. interface A { function foo(); }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\n$arr = array('a' => 1, 'b' => 2);\necho $arr['b'];",
          "choices": [
            "A. 2",
            "B. 1",
            "C. b",
            "D. null"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly implements a magic __get method?",
          "choices": [
            "A. function __get($name) { return $this->$name; }",
            "B. function get($name) { return $this->$name; }",
            "C. function __get() { return $this->$name; }",
            "D. function __get($name) { return $name; }"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "Javascript": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which keyword declares a variable in Javascript?", "choices": ["var", "let", "const", "all of the above"], "answer": "all of the above"},
        {"question": "Which symbol is used to end a statement in Javascript?", "choices": [";", ".", ":", ","], "answer": ";"},
        {"question": "Which function is used to print output in Javascript?", "choices": ["console.log", "print", "echo", "printf"], "answer": "console.log"},
        {"question": "Which operator is used for assignment in Javascript?", "choices": ["=", "==", ":=", "<-"], "answer": "="},
        {"question": "Which keyword is used to define a function?", "choices": ["function", "def", "fun", "define"], "answer": "function"},
        {"question": "Which data type is used for decimal numbers in Javascript?", "choices": ["number", "int", "float", "decimal"], "answer": "number"},
        {"question": "Which symbol is used for single-line comments in Javascript?", "choices": ["//", "#", "<!--", "**"], "answer": "//"},
        {"question": "Which method is used to get the length of a string?", "choices": ["length", "size", "count", "getLength"], "answer": "length"},
        {"question": "Which keyword is used to declare a constant?", "choices": ["const", "let", "var", "constant"], "answer": "const"},
        {"question": "Which operator is used to compare two values for equality?", "choices": ["==", "=", "===", "!="], "answer": "=="}
    ],
    "debugging":[
      {
        "question": "What is wrong with this code?\n\nlet x = 5\nconsole.log(x);",
        "choices": [
          "A. Missing semicolon after let x = 5",
          "B. log should be print",
          "C. x should be a string",
          "D. console should be Console"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this code?\n\nvar s = 'hello;\nconsole.log(s);",
        "choices": [
          "A. Missing closing quote in string",
          "B. s should be a number",
          "C. log should be print",
          "D. var should be let"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nif (x = 5) {\n  console.log('Yes');\n}",
        "choices": [
          "A. Use == for comparison, not =",
          "B. Missing parentheses",
          "C. if should be If",
          "D. log should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nlet arr = [1, 2, 3];\nconsole.log(arr[3]);",
        "choices": [
          "A. arr[3] is undefined",
          "B. arr should be a string",
          "C. Use arr(3) instead of arr[3]",
          "D. log should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nfunction greet() {\n  console.log('Hi');\n}\ngreet;",
        "choices": [
          "A. greet should be called as greet()",
          "B. log should be print",
          "C. greet should be a variable",
          "D. function should be method"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code correctly prints 'Hello, JavaScript!'?",
        "choices": [
          "A. console.log('Hello, JavaScript!');",
          "B. print('Hello, JavaScript!');",
          "C. echo 'Hello, JavaScript!';",
          "D. log('Hello, JavaScript!');"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nlet a = 2, b = 3;\nconsole.log(a + b);",
        "choices": [
          "A. 5",
          "B. 23",
          "C. a + b",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code creates an array of 3 numbers?",
        "choices": [
          "A. let arr = [1, 2, 3];",
          "B. let arr = (1, 2, 3);",
          "C. let arr = {1, 2, 3};",
          "D. let arr = '1,2,3';"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nfor (let i = 0; i < 2; i++) {\n  console.log(i);\n}",
        "choices": [
          "A. 0 1",
          "B. 1 2",
          "C. 01",
          "D. 12"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a function that returns the sum of two numbers?",
        "choices": [
          "A. function sum(a, b) { return a + b; }",
          "B. function sum(a, b) { console.log(a + b); }",
          "C. function sum(a, b) return a + b;",
          "D. function sum(a, b) { print(a + b); }"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which keyword is used for block-scoped variables?", "choices": ["let", "var", "const", "static"], "answer": "let"},
        {"question": "Which method is used to parse a string to an integer?", "choices": ["parseInt", "parseFloat", "Number", "toInt"], "answer": "parseInt"},
        {"question": "Which method is used to add an element to the end of an array?", "choices": ["push", "pop", "shift", "unshift"], "answer": "push"},
        {"question": "Which method is used to remove the last element from an array?", "choices": ["pop", "push", "shift", "unshift"], "answer": "pop"},
        {"question": "Which keyword is used to define a class in Javascript?", "choices": ["class", "function", "object", "define"], "answer": "class"},
        {"question": "Which method is used to join array elements into a string?", "choices": ["join", "concat", "toString", "merge"], "answer": "join"},
        {"question": "Which operator is used for strict equality?", "choices": ["===", "==", "=", "!=="], "answer": "==="},
        {"question": "Which method is used to filter elements in an array?", "choices": ["filter", "map", "reduce", "find"], "answer": "filter"},
        {"question": "Which method is used to execute a function for each array element?", "choices": ["forEach", "map", "filter", "reduce"], "answer": "forEach"},
        {"question": "Which method is used to convert a JSON string to an object?", "choices": ["JSON.parse", "JSON.stringify", "parseJSON", "toObject"], "answer": "JSON.parse"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nfor (let i = 0; i < 5; i++)\n  console.log(i)",
          "choices": [
            "A. Missing semicolon after console.log(i)",
            "B. for should be For",
            "C. i should be a string",
            "D. Use curly braces for the loop"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nlet arr = [];\nconsole.log(arr[0].length);",
          "choices": [
            "A. arr[0] is undefined, so .length is an error",
            "B. arr should be a string",
            "C. Use arr(0) instead of arr[0]",
            "D. log should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nfunction setX(x) {\n  x = x;\n}",
          "choices": [
            "A. Should use an object or return value to modify the original variable",
            "B. setX should be static",
            "C. x should be a string",
            "D. setX should return int"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  let x = 1 / 0;\n} catch (e) {\n  console.log('Error');\n}",
          "choices": [
            "A. Division by zero does not throw in JavaScript",
            "B. catch should be Catch",
            "C. log should be print",
            "D. x should be a float"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nlet arr = [];\narr.push('5');\nconsole.log(arr[1]);",
          "choices": [
            "A. arr[1] is undefined after one push",
            "B. arr should be a string",
            "C. push should be append",
            "D. log should be print"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates an object with properties a and b?",
          "choices": [
            "A. let obj = {a: 1, b: 2};",
            "B. let obj = [a, b];",
            "C. let obj = (a: 1, b: 2);",
            "D. let obj = 'a:1, b:2';"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet str = 'abc';\nconsole.log(str.toUpperCase());",
          "choices": [
            "A. ABC",
            "B. abc",
            "C. error",
            "D. Abc"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a class with a method?",
          "choices": [
            "A. class A { foo() {} }",
            "B. class A { function foo() {} }",
            "C. class A { foo: function() {} }",
            "D. class A { public foo() {} }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet arr = [1, 2, 3];\nconsole.log(arr.length);",
          "choices": [
            "A. 3",
            "B. 2",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly defines a constructor in a class?",
          "choices": [
            "A. constructor() {}",
            "B. function constructor() {}",
            "C. __construct() {}",
            "D. new() {}"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which method is used to create a promise?", "choices": ["Promise", "new Promise", "createPromise", "makePromise"], "answer": "new Promise"},
        {"question": "Which keyword is used for asynchronous functions?", "choices": ["async", "await", "defer", "promise"], "answer": "async"},
        {"question": "Which method is used to handle promise resolution?", "choices": ["then", "catch", "finally", "all of the above"], "answer": "then"},
        {"question": "Which method is used to handle promise rejection?", "choices": ["catch", "then", "finally", "resolve"], "answer": "catch"},
        {"question": "Which method is used to run code after a promise settles?", "choices": ["finally", "then", "catch", "done"], "answer": "finally"},
        {"question": "Which method is used to fetch data from a URL?", "choices": ["fetch", "get", "request", "ajax"], "answer": "fetch"},
        {"question": "Which method is used to convert an object to a JSON string?", "choices": ["JSON.stringify", "JSON.parse", "toJSON", "stringifyJSON"], "answer": "JSON.stringify"},
        {"question": "Which method is used to bind a function to an object?", "choices": ["bind", "call", "apply", "attach"], "answer": "bind"},
        {"question": "Which method is used to schedule a function after a delay?", "choices": ["setTimeout", "setInterval", "delay", "wait"], "answer": "setTimeout"},
        {"question": "Which method is used to schedule a function repeatedly?", "choices": ["setInterval", "setTimeout", "repeat", "loop"], "answer": "setInterval"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nclass A {\n  static foo() { this.x = 5; }\n}\nA.foo();\nconsole.log(A.x);",
          "choices": [
            "A. this.x in static method refers to the class, not the instance",
            "B. foo should not be static",
            "C. x should be a string",
            "D. foo should be a getter"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nlet arr = [1, 2, 3];\narr.map(x => { x * 2; });",
          "choices": [
            "A. The arrow function does not return a value",
            "B. map should be forEach",
            "C. arr should be an object",
            "D. x should be a string"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nasync function foo() {\n  return await 5;\n}",
          "choices": [
            "A. Unnecessary use of await with a non-promise value",
            "B. foo should not be async",
            "C. 5 should be a string",
            "D. return should be yield"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nlet obj = {};\nObject.defineProperty(obj, 'x', {value: 5, writable: false});\nobj.x = 10;",
          "choices": [
            "A. Cannot assign to read-only property 'x'",
            "B. obj should be an array",
            "C. defineProperty should be defineProperties",
            "D. x should be a string"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nlet s = new Set([1,2,2,3]);\nconsole.log(s.length);",
          "choices": [
            "A. Set does not have a length property, use size",
            "B. Set should be Array",
            "C. s should be a string",
            "D. log should be print"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code defines a class with a static method?",
          "choices": [
            "A. class A { static foo() {} }",
            "B. class A { foo static() {} }",
            "C. class A { foo() static {} }",
            "D. class A { function foo() {} }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet arr = [1,2,3];\nconsole.log(arr.map(x => x * 2));",
          "choices": [
            "A. [2, 4, 6]",
            "B. [1, 2, 3, 1, 2, 3]",
            "C. [1, 4, 9]",
            "D. [1, 2, 3, 2, 4, 6]"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a promise that resolves to 5?",
          "choices": [
            "A. new Promise(resolve => resolve(5));",
            "B. Promise(5);",
            "C. new Promise(5);",
            "D. Promise.resolve(5);"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet obj = {a: 1, b: 2};\nconsole.log(Object.keys(obj));",
          "choices": [
            "A. ['a', 'b']",
            "B. [1, 2]",
            "C. 'a', 'b'",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly uses destructuring assignment?",
          "choices": [
            "A. let [a, b] = [1, 2];",
            "B. let a, b = [1, 2];",
            "C. let a = 1, b = 2;",
            "D. let a = [1, 2];"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "CSS": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which property changes text color in CSS?", "choices": ["color", "background", "font-size", "text-align"], "answer": "color"},
        {"question": "Which symbol is used to select a class in CSS?", "choices": [".", "#", ":", ";"], "answer": "."},
        {"question": "Which property sets the background color?", "choices": ["background-color", "color", "bgcolor", "background-image"], "answer": "background-color"},
        {"question": "Which unit is relative to the parent element's font size?", "choices": ["em", "px", "%", "cm"], "answer": "em"},
        {"question": "Which property is used to make text bold?", "choices": ["font-weight", "font-style", "font-size", "font-family"], "answer": "font-weight"},
        {"question": "Which selector targets all <p> elements?", "choices": ["p", ".p", "#p", "*p"], "answer": "p"},
        {"question": "Which property sets the size of text?", "choices": ["font-size", "text-size", "size", "font-weight"], "answer": "font-size"},
        {"question": "Which value centers text horizontally?", "choices": ["center", "middle", "justify", "left"], "answer": "center"},
        {"question": "Which property adds space inside an element?", "choices": ["padding", "margin", "border", "spacing"], "answer": "padding"},
        {"question": "Which property adds space outside an element?", "choices": ["margin", "padding", "border", "spacing"], "answer": "margin"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this CSS?\n\nbody {\n  color: blue\n}",
        "choices": [
          "A. Missing semicolon after 'blue'",
          "B. color should be background-color",
          "C. body should be .body",
          "D. blue should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this CSS?\n\nh1 {\n  font-size 24px;\n}",
        "choices": [
          "A. Missing colon after font-size",
          "B. font-size should be fontStyle",
          "C. h1 should be #h1",
          "D. 24px should be 24pt"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this CSS?\n\np {\n  color: red;\n  font-weight bold;\n}",
        "choices": [
          "A. Missing colon after font-weight",
          "B. color should be background",
          "C. p should be .p",
          "D. red should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\n.container {\n  width: 100;\n}",
        "choices": [
          "A. Missing unit (should be 100px, %, etc.)",
          "B. width should be height",
          "C. .container should be #container",
          "D. 100 should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this CSS?\n\n#main {\n  background-color: #fff;\n  margin-top: 20px\n  padding: 10px;\n}",
        "choices": [
          "A. Missing semicolon after margin-top: 20px",
          "B. #main should be .main",
          "C. background-color should be color",
          "D. 20px should be 20"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which CSS sets the background color of the body to yellow?",
        "choices": [
          "A. body { background-color: yellow; }",
          "B. .body { background: yellow; }",
          "C. body: yellow;",
          "D. background-color: yellow;"
        ],
        "answer": "A"
      },
      {
        "question": "Which CSS makes all paragraphs text red?",
        "choices": [
          "A. p { color: red; }",
          "B. .p { color: red; }",
          "C. p: red;",
          "D. color: red;"
        ],
        "answer": "A"
      },
      {
        "question": "Which CSS sets the font size of h1 to 32px?",
        "choices": [
          "A. h1 { font-size: 32px; }",
          "B. h1 { font: 32px; }",
          "C. h1 { size: 32px; }",
          "D. h1 { font-size: 32; }"
        ],
        "answer": "A"
      },
      {
        "question": "Which CSS centers text in a div?",
        "choices": [
          "A. div { text-align: center; }",
          "B. div { align: center; }",
          "C. .div { text-align: center; }",
          "D. div { center: text; }"
        ],
        "answer": "A"
      },
      {
        "question": "Which CSS makes a class 'highlight' bold?",
        "choices": [
          "A. .highlight { font-weight: bold; }",
          "B. highlight { font-weight: bold; }",
          "C. .highlight { bold; }",
          "D. .highlight { font: bold; }"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which property sets the space between lines of text?", "choices": ["line-height", "letter-spacing", "word-spacing", "text-spacing"], "answer": "line-height"},
        {"question": "Which selector targets an element with id 'main'?", "choices": ["#main", ".main", "main", "*main"], "answer": "#main"},
        {"question": "Which property makes an element invisible but keeps its space?", "choices": ["visibility", "display", "opacity", "hidden"], "answer": "visibility"},
        {"question": "Which value of display makes an element disappear completely?", "choices": ["none", "block", "inline", "hidden"], "answer": "none"},
        {"question": "Which property sets the border width?", "choices": ["border-width", "border-size", "border-thickness", "border-style"], "answer": "border-width"},
        {"question": "Which property is used for rounded corners?", "choices": ["border-radius", "corner-radius", "border-curve", "radius"], "answer": "border-radius"},
        {"question": "Which property sets the shadow of a box?", "choices": ["box-shadow", "shadow", "text-shadow", "border-shadow"], "answer": "box-shadow"},
        {"question": "Which property is used to float an element to the right?", "choices": ["float", "align", "position", "right"], "answer": "float"},
        {"question": "Which property sets the maximum width of an element?", "choices": ["max-width", "width", "min-width", "limit-width"], "answer": "max-width"},
        {"question": "Which property is used to change the font of text?", "choices": ["font-family", "font-type", "font-style", "font-weight"], "answer": "font-family"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this CSS?\n\nul li {\n  list-style-type none;\n}",
          "choices": [
            "A. Missing colon after list-style-type",
            "B. ul li should be .ul .li",
            "C. none should be in quotes",
            "D. list-style-type should be list-style"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n.box {\n  border: 1px solid;\n  border-radius: 10;\n}",
          "choices": [
            "A. Missing unit for border-radius (should be 10px, etc.)",
            "B. border should be border-width",
            "C. .box should be #box",
            "D. 10 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this CSS?\n\nimg {\n  width: 100px;\n  height: 100;\n}",
          "choices": [
            "A. Missing unit for height (should be 100px, etc.)",
            "B. width should be height",
            "C. img should be .img",
            "D. 100 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n.flex-container {\n  display: flex;\n  justify-content center;\n}",
          "choices": [
            "A. Missing colon after justify-content",
            "B. flex should be block",
            "C. .flex-container should be #flex-container",
            "D. center should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this CSS?\n\n.header {\n  color: #333;\n  font-family Arial, sans-serif;\n}",
          "choices": [
            "A. Missing colon after font-family",
            "B. .header should be #header",
            "C. color should be background",
            "D. Arial should be in quotes"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which CSS creates a flex container?",
          "choices": [
            "A. .container { display: flex; }",
            "B. .container { flex: display; }",
            "C. .container { flex-container: true; }",
            "D. .container { display: block; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS removes underline from all links?",
          "choices": [
            "A. a { text-decoration: none; }",
            "B. a { decoration: none; }",
            "C. .a { text-decoration: none; }",
            "D. a { underline: none; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS makes a div 50% wide?",
          "choices": [
            "A. div { width: 50%; }",
            "B. div { width: 50px; }",
            "C. .div { width: 50%; }",
            "D. div { size: 50%; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS adds a 2px solid red border to a class 'alert'?",
          "choices": [
            "A. .alert { border: 2px solid red; }",
            "B. .alert { border-width: 2px; border-color: red; }",
            "C. .alert { border: solid 2px red; }",
            "D. .alert { border: 2 solid red; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS vertically centers text in a div using flexbox?",
          "choices": [
            "A. div { display: flex; align-items: center; }",
            "B. div { vertical-align: middle; }",
            "C. div { text-align: center; }",
            "D. div { flex-direction: column; }"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which property is used for grid layout in CSS?", "choices": ["display: grid", "grid-layout", "layout: grid", "grid"], "answer": "display: grid"},
        {"question": "Which property is used for flexbox layout?", "choices": ["display: flex", "flex-layout", "layout: flex", "flex"], "answer": "display: flex"},
        {"question": "Which property sets the z-index of an element?", "choices": ["z-index", "index", "layer", "zlayer"], "answer": "z-index"},
        {"question": "Which property is used for CSS transitions?", "choices": ["transition", "animate", "animation", "effect"], "answer": "transition"},
        {"question": "Which property is used for CSS animations?", "choices": ["animation", "transition", "animate", "effect"], "answer": "animation"},
        {"question": "Which property is used to set a custom property (variable) in CSS?", "choices": ["--variable", "$variable", "var", "set-var"], "answer": "--variable"},
        {"question": "Which function is used to reference a CSS variable?", "choices": ["var()", "ref()", "get()", "use()"], "answer": "var()"},
        {"question": "Which property is used to create a multi-column layout?", "choices": ["column-count", "columns", "multi-column", "col-count"], "answer": "column-count"},
        {"question": "Which property is used to clip an element to a shape?", "choices": ["clip-path", "shape", "clip-shape", "mask"], "answer": "clip-path"},
        {"question": "Which property is used to set the order of flex items?", "choices": ["order", "flex-order", "item-order", "z-index"], "answer": "order"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this CSS?\n\n@media screen and (max-width 600px) {\n  body { font-size: 14px; }\n}",
          "choices": [
            "A. Missing colon after max-width",
            "B. @media should be @Media",
            "C. 600px should be in quotes",
            "D. font-size should be font"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr\n}",
          "choices": [
            "A. Missing semicolon after grid-template-columns",
            "B. grid should be flex",
            "C. .grid should be #grid",
            "D. 1fr should be 1px"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this CSS?\n\n.card {\n  box-shadow: 0 2px 4px #000;\n  border-radius: 10;\n}",
          "choices": [
            "A. Missing unit for border-radius (should be 10px, etc.)",
            "B. box-shadow should be shadow",
            "C. .card should be #card",
            "D. 10 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n:root {\n  --main-color = #333;\n}",
          "choices": [
            "A. CSS variables use colon, not equals (should be --main-color: #333;)",
            "B. :root should be .root",
            "C. #333 should be in quotes",
            "D. --main-color should be main-color"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this CSS?\n\n.button {\n  transition: all 0.3s ease-in-out\n  background: blue;\n}",
          "choices": [
            "A. Missing semicolon after transition",
            "B. .button should be #button",
            "C. background should be color",
            "D. 0.3s should be 300ms"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which CSS creates a 3-column grid layout?",
          "choices": [
            "A. .container { display: grid; grid-template-columns: 1fr 1fr 1fr; }",
            "B. .container { display: flex; flex-direction: row; }",
            "C. .container { columns: 3; }",
            "D. .container { grid: 3; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS uses a variable for color?",
          "choices": [
            "A. color: var(--main-color);",
            "B. color: $main-color;",
            "C. color: main-color;",
            "D. color: @main-color;"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS adds a hover effect to a button?",
          "choices": [
            "A. button:hover { background: green; }",
            "B. button.hover { background: green; }",
            "C. button:active { background: green; }",
            "D. .button:hover { background: green; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS animates an element's opacity from 0 to 1?",
          "choices": [
            "A. @keyframes fade { from { opacity: 0; } to { opacity: 1; } }",
            "B. .fade { opacity: 0 1; }",
            "C. .fade { animation: fade 1s; }",
            "D. .fade { transition: opacity 1s; }"
          ],
          "answer": "A"
        },
        {
          "question": "Which CSS makes an element sticky at the top?",
          "choices": [
            "A. position: sticky; top: 0;",
            "B. position: fixed; top: 0;",
            "C. position: absolute; top: 0;",
            "D. position: static; top: 0;"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "HTML": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which tag is used for the largest heading?", "choices": ["<h1>", "<h6>", "<head>", "<title>"], "answer": "<h1>"},
        {"question": "Which tag creates a paragraph?", "choices": ["<p>", "<para>", "<paragraph>", "<text>"], "answer": "<p>"},
        {"question": "Which tag inserts a line break?", "choices": ["<br>", "<lb>", "<break>", "<newline>"], "answer": "<br>"},
        {"question": "Which tag creates a hyperlink?", "choices": ["<a>", "<link>", "<href>", "<url>"], "answer": "<a>"},
        {"question": "Which attribute sets the image source?", "choices": ["src", "href", "alt", "link"], "answer": "src"},
        {"question": "Which tag is used for an unordered list?", "choices": ["<ul>", "<ol>", "<li>", "<list>"], "answer": "<ul>"},
        {"question": "Which tag is used for a table row?", "choices": ["<tr>", "<td>", "<th>", "<row>"], "answer": "<tr>"},
        {"question": "Which tag is used for bold text?", "choices": ["<b>", "<strong>", "<bold>", "<em>"], "answer": "<b>"},
        {"question": "Which tag is used for italic text?", "choices": ["<i>", "<em>", "<italic>", "<it>"], "answer": "<i>"},
        {"question": "Which tag is used to display an image?", "choices": ["<img>", "<image>", "<src>", "<pic>"], "answer": "<img>"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this HTML?\n\n<html>\n  <head>\n    <title>Page</title>\n  <body>\n    <h1>Hello</h1>\n  </body>\n</html>",
        "choices": [
          "A. Missing </head> tag",
          "B. <h1> should be <h2>",
          "C. <title> should be in <body>",
          "D. <html> should be <HTML>"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this HTML?\n\n<p>Hello",
        "choices": [
          "A. Missing closing </p> tag",
          "B. <p> should be <div>",
          "C. Hello should be in quotes",
          "D. <p> should be <span>"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this HTML?\n\n<img src='image.jpg'>",
        "choices": [
          "A. Missing alt attribute",
          "B. src should be href",
          "C. image.jpg should be in double quotes",
          "D. <img> should be <image>"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\n<a href='page.html'>Click here</a",
        "choices": [
          "A. Missing closing > in </a>",
          "B. href should be src",
          "C. <a> should be <link>",
          "D. 'Click here' should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this HTML?\n\n<ul>\n  <li>Item 1\n  <li>Item 2\n</ul>",
        "choices": [
          "A. <li> tags should be closed with </li>",
          "B. <ul> should be <ol>",
          "C. Item 1 should be in quotes",
          "D. <li> should be <div>"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which HTML creates a main heading?",
        "choices": [
          "A. <h1>Main Heading</h1>",
          "B. <heading>Main Heading</heading>",
          "C. <h6>Main Heading</h6>",
          "D. <main>Main Heading</main>"
        ],
        "answer": "A"
      },
      {
        "question": "Which HTML creates a link to 'index.html'?",
        "choices": [
          "A. <a href='index.html'>Home</a>",
          "B. <link href='index.html'>Home</link>",
          "C. <a src='index.html'>Home</a>",
          "D. <a>index.html</a>"
        ],
        "answer": "A"
      },
      {
        "question": "Which HTML creates an image with alt text?",
        "choices": [
          "A. <img src='cat.jpg' alt='A cat'>",
          "B. <image src='cat.jpg' alt='A cat'>",
          "C. <img href='cat.jpg' alt='A cat'>",
          "D. <img src='cat.jpg'>"
        ],
        "answer": "A"
      },
      {
        "question": "Which HTML creates an unordered list?",
        "choices": [
          "A. <ul><li>One</li><li>Two</li></ul>",
          "B. <ol><li>One</li><li>Two</li></ol>",
          "C. <ul>One, Two</ul>",
          "D. <list><li>One</li><li>Two</li></list>"
        ],
        "answer": "A"
      },
      {
        "question": "Which HTML creates a paragraph?",
        "choices": [
          "A. <p>This is a paragraph.</p>",
          "B. <para>This is a paragraph.</para>",
          "C. <paragraph>This is a paragraph.</paragraph>",
          "D. <p>This is a paragraph."
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which tag defines a table cell?", "choices": ["<td>", "<tr>", "<th>", "<cell>"], "answer": "<td>"},
        {"question": "Which tag is used for a numbered list?", "choices": ["<ol>", "<ul>", "<li>", "<list>"], "answer": "<ol>"},
        {"question": "Which tag defines a form?", "choices": ["<form>", "<input>", "<fieldset>", "<button>"], "answer": "<form>"},
        {"question": "Which attribute is used for placeholder text in an input?", "choices": ["placeholder", "alt", "title", "hint"], "answer": "placeholder"},
        {"question": "Which tag is used for a dropdown list?", "choices": ["<select>", "<dropdown>", "<option>", "<list>"], "answer": "<select>"},
        {"question": "Which tag is used for a checkbox?", "choices": ["<input type='checkbox'>", "<checkbox>", "<check>", "<cb>"], "answer": "<input type='checkbox'>"},
        {"question": "Which tag is used for a radio button?", "choices": ["<input type='radio'>", "<radio>", "<input type='radiobutton'>", "<rb>"], "answer": "<input type='radio'>"},
        {"question": "Which tag is used for a submit button?", "choices": ["<input type='submit'>", "<submit>", "<button type='submit'>", "<input type='button'>"], "answer": "<input type='submit'>"},
        {"question": "Which tag is used for a section of navigation links?", "choices": ["<nav>", "<section>", "<header>", "<aside>"], "answer": "<nav>"},
        {"question": "Which tag is used for a block-level quote?", "choices": ["<blockquote>", "<quote>", "<q>", "<bq>"], "answer": "<blockquote>"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this HTML?\n\n<table>\n  <tr><td>Cell 1</td></tr>\n  <tr><td>Cell 2</tr>\n</table>",
          "choices": [
            "A. Missing closing </td> tag in second row",
            "B. <table> should be <div>",
            "C. <tr> should be <td>",
            "D. Cell 2 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n<form>\n  <input type='text' name='user'>\n  <input type='submit'>\n</form",
          "choices": [
            "A. Missing closing > in </form>",
            "B. <form> should be <div>",
            "C. input should be textarea",
            "D. name should be id"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this HTML?\n\n<select>\n  <option>One\n  <option>Two</option>\n</select>",
          "choices": [
            "A. First <option> tag is not closed",
            "B. <select> should be <input>",
            "C. One should be in quotes",
            "D. <option> should be <li>"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n<div class='box'>\n  <span>Text</div>",
          "choices": [
            "A. <span> is not closed before </div>",
            "B. class should be id",
            "C. <div> should be <span>",
            "D. 'Text' should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this HTML?\n\n<input type='checkbox' checked='false'>",
          "choices": [
            "A. checked is a boolean attribute, use checked or omit it",
            "B. type should be text",
            "C. false should be 0",
            "D. input should be select"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which HTML creates a table with two rows and one column?",
          "choices": [
            "A. <table><tr><td>1</td></tr><tr><td>2</td></tr></table>",
            "B. <table><td>1</td><td>2</td></table>",
            "C. <table><tr>1</tr><tr>2</tr></table>",
            "D. <table><tr><td>1,2</td></tr></table>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML creates a form with a text input and submit button?",
          "choices": [
            "A. <form><input type='text'><input type='submit'></form>",
            "B. <form><input type='text'><button>Submit</button></form>",
            "C. <form><input type='text'><input type='button'></form>",
            "D. <form><input type='text'></form>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML creates a dropdown with two options?",
          "choices": [
            "A. <select><option>One</option><option>Two</option></select>",
            "B. <dropdown><option>One</option><option>Two</option></dropdown>",
            "C. <select><option>One, Two</option></select>",
            "D. <select><item>One</item><item>Two</item></select>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML creates a div with class 'container'?",
          "choices": [
            "A. <div class='container'></div>",
            "B. <div id='container'></div>",
            "C. <container></container>",
            "D. <div class=container></div>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML creates a checkbox that is checked?",
          "choices": [
            "A. <input type='checkbox' checked>",
            "B. <input type='checkbox' checked='true'>",
            "C. <input type='checkbox' value='checked'>",
            "D. <input type='checkbox' selected>"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which tag is used for embedding JavaScript?", "choices": ["<script>", "<js>", "<javascript>", "<embedjs>"], "answer": "<script>"},
        {"question": "Which tag is used for embedding CSS?", "choices": ["<style>", "<css>", "<link>", "<embedcss>"], "answer": "<style>"},
        {"question": "Which tag is used for scalable vector graphics?", "choices": ["<svg>", "<vector>", "<canvas>", "<img>"], "answer": "<svg>"},
        {"question": "Which tag is used for audio playback?", "choices": ["<audio>", "<sound>", "<music>", "<media>"], "answer": "<audio>"},
        {"question": "Which tag is used for video playback?", "choices": ["<video>", "<movie>", "<media>", "<vid>"], "answer": "<video>"},
        {"question": "Which tag is used for a progress bar?", "choices": ["<progress>", "<bar>", "<meter>", "<range>"], "answer": "<progress>"},
        {"question": "Which tag is used for a meter?", "choices": ["<meter>", "<progress>", "<bar>", "<range>"], "answer": "<meter>"},
        {"question": "Which tag is used for a template?", "choices": ["<template>", "<tpl>", "<snippet>", "<temp>"], "answer": "<template>"},
        {"question": "Which tag is used for marking up contact information?", "choices": ["<address>", "<contact>", "<info>", "<footer>"], "answer": "<address>"},
        {"question": "Which tag is used for marking up time?", "choices": ["<time>", "<date>", "<datetime>", "<clock>"], "answer": "<time>"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this HTML?\n\n<!DOCTYPE html>\n<html lang='en'>\n<head>\n  <meta charset='UTF-8'>\n  <title>Test</title>\n</head>\n<body>\n  <header>Header</header>\n  <main>Main</main>\n  <footer>Footer</footer>\n</body>",
          "choices": [
            "A. Missing closing </html> tag",
            "B. <main> should be <div>",
            "C. <header> should be <h1>",
            "D. lang should be language"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n<video src='movie.mp4' controls autoplay loop='false'></video>",
          "choices": [
            "A. loop is a boolean attribute, use loop or omit it",
            "B. controls should be control",
            "C. src should be href",
            "D. video should be img"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this HTML?\n\n<section>\n  <article>Text</section>",
          "choices": [
            "A. <article> is not closed before </section>",
            "B. <section> should be <div>",
            "C. Text should be in quotes",
            "D. <article> should be <p>"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\n<iframe src='page.html'></iframe",
          "choices": [
            "A. Missing closing > in </iframe>",
            "B. src should be href",
            "C. <iframe> should be <frame>",
            "D. page.html should be in double quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this HTML?\n\n<form action='submit.php' method='post'>\n  <input type='text' name='user'>\n  <input type='submit'>\n</form action='submit.php'>",
          "choices": [
            "A. <form> tag should not have attributes in the closing tag",
            "B. method should be get",
            "C. action should be url",
            "D. <input> should be <button>"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which HTML creates a semantic layout with header, main, and footer?",
          "choices": [
            "A. <header>Header</header><main>Main</main><footer>Footer</footer>",
            "B. <div>Header</div><div>Main</div><div>Footer</div>",
            "C. <h1>Header</h1><p>Main</p><span>Footer</span>",
            "D. <section>Header Main Footer</section>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML embeds a YouTube video?",
          "choices": [
            "A. <iframe src='https://www.youtube.com/embed/xyz'></iframe>",
            "B. <video src='youtube.com/xyz'></video>",
            "C. <embed src='youtube.com/xyz'>",
            "D. <object data='youtube.com/xyz'></object>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML creates a form with a file upload?",
          "choices": [
            "A. <form><input type='file'></form>",
            "B. <form><input type='upload'></form>",
            "C. <form><file></file></form>",
            "D. <form><input type='text'></form>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML uses a meta tag for responsive design?",
          "choices": [
            "A. <meta name='viewport' content='width=device-width, initial-scale=1.0'>",
            "B. <meta name='responsive' content='true'>",
            "C. <meta name='width' content='device-width'>",
            "D. <meta name='mobile' content='yes'>"
          ],
          "answer": "A"
        },
        {
          "question": "Which HTML creates a navigation menu?",
          "choices": [
            "A. <nav><ul><li>Home</li><li>About</li></ul></nav>",
            "B. <menu><li>Home</li><li>About</li></menu>",
            "C. <ul><li>Home</li><li>About</li></ul>",
            "D. <div><li>Home</li><li>About</li></div>"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "Node.js": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which function is used to print in Node.js?", "choices": ["console.log", "print", "echo", "printf"], "answer": "console.log"},
        {"question": "Which command initializes a new Node.js project?", "choices": ["npm init", "node init", "npm start", "node start"], "answer": "npm init"},
        {"question": "Which file is the main entry point by default?", "choices": ["index.js", "main.js", "app.js", "server.js"], "answer": "index.js"},
        {"question": "Which command installs a package?", "choices": ["npm install", "npm get", "node install", "install npm"], "answer": "npm install"},
        {"question": "Which file lists project dependencies?", "choices": ["package.json", "dependencies.json", "npm.json", "modules.json"], "answer": "package.json"},
        {"question": "Which command runs a Node.js file?", "choices": ["node filename.js", "run filename.js", "npm filename.js", "start filename.js"], "answer": "node filename.js"},
        {"question": "Which method reads a file in Node.js?", "choices": ["fs.readFile", "file.read", "read.file", "fs.getFile"], "answer": "fs.readFile"},
        {"question": "Which module is used to create a server?", "choices": ["http", "server", "net", "express"], "answer": "http"},
        {"question": "Which command removes a package?", "choices": ["npm uninstall", "npm remove", "node uninstall", "remove npm"], "answer": "npm uninstall"},
        {"question": "Which method writes to a file in Node.js?", "choices": ["fs.writeFile", "file.write", "write.file", "fs.saveFile"], "answer": "fs.writeFile"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this code?\n\nconst fs = require('fs')\nconsole.log('Ready');",
        "choices": [
          "A. Missing semicolon after require('fs')",
          "B. require should be import",
          "C. fs should be a string",
          "D. log should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this code?\n\nlet data = fs.readFileSync('file.txt');\nconsole.log(data);",
        "choices": [
          "A. data is a Buffer, not a string",
          "B. readFileSync should be readFile",
          "C. fs should be FileSystem",
          "D. data should be an object"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nif (x = 5) {\n  console.log('Yes');\n}",
        "choices": [
          "A. Use == for comparison, not =",
          "B. Missing parentheses",
          "C. if should be If",
          "D. log should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nlet arr = [1, 2, 3];\nconsole.log(arr[3]);",
        "choices": [
          "A. arr[3] is undefined",
          "B. arr should be a string",
          "C. Use arr(3) instead of arr[3]",
          "D. log should be print"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this code?\n\nfunction greet() {\n  console.log('Hi');\n}\ngreet;",
        "choices": [
          "A. greet should be called as greet()",
          "B. log should be print",
          "C. greet should be a variable",
          "D. function should be method"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code correctly prints 'Hello, Node.js!'?",
        "choices": [
          "A. console.log('Hello, Node.js!');",
          "B. print('Hello, Node.js!');",
          "C. echo 'Hello, Node.js!';",
          "D. log('Hello, Node.js!');"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nlet a = 2, b = 3;\nconsole.log(a + b);",
        "choices": [
          "A. 5",
          "B. 23",
          "C. a + b",
          "D. Error"
        ],
        "answer": "A"
      },
      {
        "question": "Which code creates an array of 3 numbers?",
        "choices": [
          "A. let arr = [1, 2, 3];",
          "B. let arr = (1, 2, 3);",
          "C. let arr = {1, 2, 3};",
          "D. let arr = '1,2,3';"
        ],
        "answer": "A"
      },
      {
        "question": "What is the output?\n\nfor (let i = 0; i < 2; i++) {\n  console.log(i);\n}",
        "choices": [
          "A. 0 1",
          "B. 1 2",
          "C. 01",
          "D. 12"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a function that returns the sum of two numbers?",
        "choices": [
          "A. function sum(a, b) { return a + b; }",
          "B. function sum(a, b) { console.log(a + b); }",
          "C. function sum(a, b) return a + b;",
          "D. function sum(a, b) { print(a + b); }"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which method creates a server in Node.js?", "choices": ["http.createServer", "server.create", "net.createServer", "express.createServer"], "answer": "http.createServer"},
        {"question": "Which method parses JSON in Node.js?", "choices": ["JSON.parse", "parseJSON", "toJSON", "parse"], "answer": "JSON.parse"},
        {"question": "Which method appends data to a file?", "choices": ["fs.appendFile", "file.append", "append.file", "fs.addFile"], "answer": "fs.appendFile"},
        {"question": "Which method reads a directory?", "choices": ["fs.readdir", "dir.read", "read.dir", "fs.readDir"], "answer": "fs.readdir"},
        {"question": "Which method deletes a file?", "choices": ["fs.unlink", "file.delete", "delete.file", "fs.removeFile"], "answer": "fs.unlink"},
        {"question": "Which method returns the current working directory?", "choices": ["process.cwd", "cwd", "getCwd", "fs.cwd"], "answer": "process.cwd"},
        {"question": "Which method exits a Node.js process?", "choices": ["process.exit", "exit", "quit", "end"], "answer": "process.exit"},
        {"question": "Which method sets an environment variable?", "choices": ["process.env", "set.env", "env.set", "setEnv"], "answer": "process.env"},
        {"question": "Which method creates a buffer?", "choices": ["Buffer.from", "new Buffer", "buffer.create", "Buffer.make"], "answer": "Buffer.from"},
        {"question": "Which method schedules a function to run after a delay?", "choices": ["setTimeout", "setInterval", "delay", "wait"], "answer": "setTimeout"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nfor (let i = 0; i < 5; i++)\n  console.log(i)",
          "choices": [
            "A. Missing semicolon after console.log(i)",
            "B. for should be For",
            "C. i should be a string",
            "D. Use curly braces for the loop"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nlet arr = [];\nconsole.log(arr[0].length);",
          "choices": [
            "A. arr[0] is undefined, so .length is an error",
            "B. arr should be a string",
            "C. Use arr(0) instead of arr[0]",
            "D. log should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nfunction setX(x) {\n  x = x;\n}",
          "choices": [
            "A. Should use an object or return value to modify the original variable",
            "B. setX should be static",
            "C. x should be a string",
            "D. setX should return int"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ntry {\n  let x = 1 / 0;\n} catch (e) {\n  console.log('Error');\n}",
          "choices": [
            "A. Division by zero does not throw in JavaScript/Node.js",
            "B. catch should be Catch",
            "C. log should be print",
            "D. x should be a float"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nlet arr = [];\narr.push('5');\nconsole.log(arr[1]);",
          "choices": [
            "A. arr[1] is undefined after one push",
            "B. arr should be a string",
            "C. push should be append",
            "D. log should be print"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code reads a file synchronously in Node.js?",
          "choices": [
            "A. const data = fs.readFileSync('file.txt', 'utf8');",
            "B. const data = fs.read('file.txt');",
            "C. let data = readFile('file.txt');",
            "D. fs.readFile('file.txt', 'utf8');"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet str = 'abc';\nconsole.log(str.toUpperCase());",
          "choices": [
            "A. ABC",
            "B. abc",
            "C. error",
            "D. Abc"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a class with a method?",
          "choices": [
            "A. class A { foo() {} }",
            "B. class A { function foo() {} }",
            "C. class A { foo: function() {} }",
            "D. class A { public foo() {} }"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet arr = [1, 2, 3];\nconsole.log(arr.length);",
          "choices": [
            "A. 3",
            "B. 2",
            "C. 1",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly defines a constructor in a class?",
          "choices": [
            "A. constructor() {}",
            "B. function constructor() {}",
            "C. __construct() {}",
            "D. new() {}"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which method creates a child process?", "choices": ["child_process.spawn", "process.create", "spawn.child", "createProcess"], "answer": "child_process.spawn"},
        {"question": "Which method creates a promise-based file read?", "choices": ["fs.promises.readFile", "fs.readFilePromise", "readFile.promises", "fs.promise.readFile"], "answer": "fs.promises.readFile"},
        {"question": "Which method creates an HTTPS server?", "choices": ["https.createServer", "http.createSecureServer", "server.createHTTPS", "https.server"], "answer": "https.createServer"},
        {"question": "Which method compresses data using gzip?", "choices": ["zlib.gzip", "gzip.compress", "compress.gzip", "zlib.compress"], "answer": "zlib.gzip"},
        {"question": "Which method watches for file changes?", "choices": ["fs.watch", "watch.file", "file.watch", "fs.fileWatch"], "answer": "fs.watch"},
        {"question": "Which method pipes a readable stream to a writable stream?", "choices": ["readable.pipe", "stream.pipe", "pipe.stream", "writable.pipe"], "answer": "readable.pipe"},
        {"question": "Which method parses command-line arguments?", "choices": ["process.argv", "argv.parse", "parse.argv", "getArgs"], "answer": "process.argv"},
        {"question": "Which method handles uncaught exceptions?", "choices": ["process.on('uncaughtException')", "catchException", "handleError", "exception.on"], "answer": "process.on('uncaughtException')"},
        {"question": "Which method creates a readable stream from a file?", "choices": ["fs.createReadStream", "file.readStream", "readStream.create", "fs.readStream"], "answer": "fs.createReadStream"},
        {"question": "Which method creates a writable stream to a file?", "choices": ["fs.createWriteStream", "file.writeStream", "writeStream.create", "fs.writeStream"], "answer": "fs.createWriteStream"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this code?\n\nconst http = require('http');\nhttp.createServer((req, res) => {\n  res.end('Hello');\n});",
          "choices": [
            "A. The server is not listening on any port",
            "B. require should be import",
            "C. res should be a string",
            "D. end should be send"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nconst EventEmitter = require('events');\nconst emitter = new EventEmitter();\nemitter.on('event', () => console.log('Event!'));\nemitter.emit('other');",
          "choices": [
            "A. 'other' event has no listener, so nothing happens",
            "B. emitter should be EventEmitter",
            "C. on should be emit",
            "D. log should be print"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nconst fs = require('fs');\nfs.readFile('file.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});",
          "choices": [
            "A. data is a Buffer, not a string",
            "B. readFile should be readFileSync",
            "C. fs should be FileSystem",
            "D. data should be an object"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nconst express = require('express');\nconst app = express();\napp.get('/', (req, res) => res.send('Hi'));\napp.listen();",
          "choices": [
            "A. listen() requires a port number",
            "B. get should be post",
            "C. send should be end",
            "D. app should be server"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this code?\n\nconst arr = [1,2,3];\narr.map(x => { x * 2; });",
          "choices": [
            "A. The arrow function does not return a value",
            "B. map should be forEach",
            "C. arr should be an object",
            "D. x should be a string"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code creates an HTTP server that responds with 'Hello'?",
          "choices": [
            "A. const http = require('http');\nhttp.createServer((req, res) => { res.end('Hello'); }).listen(3000);",
            "B. const http = require('http');\nhttp.createServer((req, res) => { res.send('Hello'); }).listen(3000);",
            "C. const http = require('http');\nhttp.listen(3000, () => { res.end('Hello'); });",
            "D. const http = require('http');\nhttp.createServer((req, res) => { res.end('Hello'); });"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet arr = [1,2,3];\nconsole.log(arr.map(x => x * 2));",
          "choices": [
            "A. [2, 4, 6]",
            "B. [1, 2, 3, 1, 2, 3]",
            "C. [1, 4, 9]",
            "D. [1, 2, 3, 2, 4, 6]"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a promise that resolves to 5?",
          "choices": [
            "A. new Promise(resolve => resolve(5));",
            "B. Promise(5);",
            "C. new Promise(5);",
            "D. Promise.resolve(5);"
          ],
          "answer": "A"
        },
        {
          "question": "What is the output?\n\nlet obj = {a: 1, b: 2};\nconsole.log(Object.keys(obj));",
          "choices": [
            "A. ['a', 'b']",
            "B. [1, 2]",
            "C. 'a', 'b'",
            "D. Error"
          ],
          "answer": "A"
        },
        {
          "question": "Which code correctly uses destructuring assignment?",
          "choices": [
            "A. let [a, b] = [1, 2];",
            "B. let a, b = [1, 2];",
            "C. let a = 1, b = 2;",
            "D. let a = [1, 2];"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "React": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which hook is used for state in React?", "choices": ["useState", "useEffect", "useContext", "useReducer"], "answer": "useState"},
        {"question": "Which function creates a React component?", "choices": ["function", "component", "createComponent", "React.component"], "answer": "function"},
        {"question": "Which keyword is used to export a component?", "choices": ["export", "import", "module", "export default"], "answer": "export"},
        {"question": "Which keyword is used to import a component?", "choices": ["import", "export", "require", "include"], "answer": "import"},
        {"question": "Which method renders a React component?", "choices": ["return", "render", "display", "show"], "answer": "return"},
        {"question": "Which syntax is used for JSX?", "choices": ["<div>", "div", "&lt;div&gt;", "div()"], "answer": "<div>"},
        {"question": "Which attribute is used to bind events in React?", "choices": ["onClick", "click", "handleClick", "eventClick"], "answer": "onClick"},
        {"question": "Which method is used to update state?", "choices": ["setState", "update", "change", "modify"], "answer": "setState"},
        {"question": "Which hook is used for side effects?", "choices": ["useEffect", "useState", "useContext", "useReducer"], "answer": "useEffect"},
        {"question": "Which function is used to create a React element?", "choices": ["React.createElement", "createElement", "element", "create"], "answer": "React.createElement"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this command?\n\nSET mykey 'value'",
        "choices": [
          "A. Should use double quotes or no quotes for value",
          "B. SET should be set",
          "C. mykey should be in quotes",
          "D. value should be a number"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this command?\n\nGET mykey value",
        "choices": [
          "A. GET only takes one argument (the key)",
          "B. GET should be SET",
          "C. mykey should be a number",
          "D. value should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this command?\n\nDEL",
        "choices": [
          "A. DEL requires at least one key",
          "B. DEL should be DELETE",
          "C. DEL should be lowercase",
          "D. DEL should be GET"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nINCR mykey 5",
        "choices": [
          "A. INCR only takes one argument (the key)",
          "B. mykey should be a number",
          "C. INCR should be SET",
          "D. 5 should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this command?\n\nEXISTS",
        "choices": [
          "A. EXISTS requires at least one key",
          "B. EXISTS should be GET",
          "C. EXISTS should be lowercase",
          "D. EXISTS should be SET"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which command sets the value of 'foo' to 'bar'?",
        "choices": [
          "A. SET foo bar",
          "B. GET foo bar",
          "C. SET bar foo",
          "D. APPEND foo bar"
        ],
        "answer": "A"
      },
      {
        "question": "Which command gets the value of 'foo'?",
        "choices": [
          "A. GET foo",
          "B. SET foo",
          "C. DEL foo",
          "D. EXISTS foo"
        ],
        "answer": "A"
      },
      {
        "question": "Which command deletes the key 'foo'?",
        "choices": [
          "A. DEL foo",
          "B. REMOVE foo",
          "C. DELETE foo",
          "D. ERASE foo"
        ],
        "answer": "A"
      },
      {
        "question": "Which command increments the value of 'counter' by 1?",
        "choices": [
          "A. INCR counter",
          "B. INCRBY counter 1",
          "C. APPEND counter 1",
          "D. SET counter 1"
        ],
        "answer": "A"
      },
      {
        "question": "Which command checks if 'foo' exists?",
        "choices": [
          "A. EXISTS foo",
          "B. GET foo",
          "C. SET foo",
          "D. CHECK foo"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which hook is used for context in React?", "choices": ["useContext", "useState", "useEffect", "useReducer"], "answer": "useContext"},
        {"question": "Which hook is used for complex state logic?", "choices": ["useReducer", "useState", "useEffect", "useContext"], "answer": "useReducer"},
        {"question": "Which hook is used for custom logic?", "choices": ["Custom hook", "useCustom", "hook", "useHook"], "answer": "Custom hook"},
        {"question": "Which method is used to pass data to child components?", "choices": ["props", "state", "context", "data"], "answer": "props"},
        {"question": "Which method is used to lift state up?", "choices": ["Pass state as props", "useContext", "useReducer", "useState"], "answer": "Pass state as props"},
        {"question": "Which hook is used for memoization?", "choices": ["useMemo", "useCallback", "memo", "useMemoize"], "answer": "useMemo"},
        {"question": "Which hook is used for callback memoization?", "choices": ["useCallback", "useMemo", "callback", "useCallback"], "answer": "useCallback"},
        {"question": "Which method is used to prevent unnecessary re-renders?", "choices": ["React.memo", "memo", "preventRender", "useMemo"], "answer": "React.memo"},
        {"question": "Which hook is used for refs?", "choices": ["useRef", "ref", "useReference", "reference"], "answer": "useRef"},
        {"question": "Which method is used to handle form submissions?", "choices": ["onSubmit", "submit", "handleSubmit", "formSubmit"], "answer": "onSubmit"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this command?\n\nLPUSH mylist",
          "choices": [
            "A. LPUSH requires at least one value to push",
            "B. LPUSH should be RPUSH",
            "C. mylist should be in quotes",
            "D. LPUSH should be lowercase"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\nLRANGE mylist 0",
          "choices": [
            "A. LRANGE requires three arguments: key, start, stop",
            "B. LRANGE should be LLEN",
            "C. mylist should be a number",
            "D. 0 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nSADD myset",
          "choices": [
            "A. SADD requires at least one member to add",
            "B. SADD should be ZADD",
            "C. myset should be in quotes",
            "D. SADD should be lowercase"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nHGETALL",
          "choices": [
            "A. HGETALL requires a key",
            "B. HGETALL should be HGET",
            "C. HGETALL should be lowercase",
            "D. HGETALL should be GETALL"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nZADD myzset 1",
          "choices": [
            "A. ZADD requires a score and a member",
            "B. ZADD should be SADD",
            "C. myzset should be in quotes",
            "D. 1 should be in quotes"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which command adds 'a' and 'b' to the set 'myset'?",
          "choices": [
            "A. SADD myset a b",
            "B. SADD myset [a, b]",
            "C. SADD myset {a, b}",
            "D. SADD myset 'a', 'b'"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets all elements from the list 'mylist'?",
          "choices": [
            "A. LRANGE mylist 0 -1",
            "B. LLEN mylist",
            "C. LPOP mylist",
            "D. LRANGE mylist 1 -1"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets the length of the set 'myset'?",
          "choices": [
            "A. SCARD myset",
            "B. LLEN myset",
            "C. ZCARD myset",
            "D. COUNT myset"
          ],
          "answer": "A"
        },
        {
          "question": "Which command removes and returns the first element of 'mylist'?",
          "choices": [
            "A. LPOP mylist",
            "B. RPOP mylist",
            "C. LREM mylist 1",
            "D. LTRIM mylist 1"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets all fields and values in the hash 'myhash'?",
          "choices": [
            "A. HGETALL myhash",
            "B. HGET myhash",
            "C. HKEYS myhash",
            "D. HVALS myhash"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which hook is used for error boundaries?", "choices": ["Error boundary component", "useError", "catchError", "errorBoundary"], "answer": "Error boundary component"},
        {"question": "Which hook is used for layout effects?", "choices": ["useLayoutEffect", "useEffect", "layoutEffect", "useLayout"], "answer": "useLayoutEffect"},
        {"question": "Which hook is used for imperative handle?", "choices": ["useImperativeHandle", "useHandle", "imperative", "useImperative"], "answer": "useImperativeHandle"},
        {"question": "Which hook is used for debugging?", "choices": ["useDebugValue", "debug", "useDebug", "debugValue"], "answer": "useDebugValue"},
        {"question": "Which method is used for code splitting?", "choices": ["React.lazy", "lazy", "split", "codeSplit"], "answer": "React.lazy"},
        {"question": "Which method is used for suspense?", "choices": ["Suspense", "suspense", "loading", "wait"], "answer": "Suspense"},
        {"question": "Which hook is used for concurrent features?", "choices": ["useTransition", "useDeferredValue", "concurrent", "useConcurrent"], "answer": "useTransition"},
        {"question": "Which method is used for portals?", "choices": ["ReactDOM.createPortal", "createPortal", "portal", "React.portal"], "answer": "ReactDOM.createPortal"},
        {"question": "Which method is used for fragments?", "choices": ["<>", "Fragment", "fragment", "React.Fragment"], "answer": "<>"},
        {"question": "Which method is used for strict mode?", "choices": ["StrictMode", "strict", "mode", "React.StrictMode"], "answer": "StrictMode"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this command?\n\nZINCRBY myzset 1",
          "choices": [
            "A. ZINCRBY requires a member to increment",
            "B. ZINCRBY should be SADD",
            "C. myzset should be in quotes",
            "D. 1 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\nEVAL 'return redis.call(\"SET\", \"foo\", \"bar\")'",
          "choices": [
            "A. EVAL requires the number of keys as the third argument",
            "B. EVAL should be SCRIPT",
            "C. 'return' should be outside quotes",
            "D. redis.call should be redis.set"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nBITCOUNT",
          "choices": [
            "A. BITCOUNT requires a key",
            "B. BITCOUNT should be GETBIT",
            "C. BITCOUNT should be lowercase",
            "D. BITCOUNT should be SET"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nPFADD",
          "choices": [
            "A. PFADD requires a key and at least one element",
            "B. PFADD should be SADD",
            "C. PFADD should be lowercase",
            "D. PFADD should be GET"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nXREAD STREAMS mystream",
          "choices": [
            "A. XREAD STREAMS requires a stream and an ID",
            "B. XREAD should be XRANGE",
            "C. mystream should be in quotes",
            "D. STREAMS should be lowercase"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which command adds a member with score 10 to the sorted set 'myzset'?",
          "choices": [
            "A. ZADD myzset 10 member",
            "B. SADD myzset 10 member",
            "C. ZADD myzset member 10",
            "D. ZADD myzset score member"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets the score of 'member' in 'myzset'?",
          "choices": [
            "A. ZSCORE myzset member",
            "B. ZCARD myzset member",
            "C. ZRANK myzset member",
            "D. ZCOUNT myzset member"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets the number of elements in the HyperLogLog 'hll'?",
          "choices": [
            "A. PFCOUNT hll",
            "B. HLLCOUNT hll",
            "C. LLEN hll",
            "D. COUNT hll"
          ],
          "answer": "A"
        },
        {
          "question": "Which command reads entries from the stream 'mystream' starting at ID 0?",
          "choices": [
            "A. XREAD STREAMS mystream 0",
            "B. XRANGE mystream 0",
            "C. XREAD mystream 0",
            "D. XREAD mystream"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets the bit value at offset 5 in 'mykey'?",
          "choices": [
            "A. GETBIT mykey 5",
            "B. BITGET mykey 5",
            "C. BITCOUNT mykey 5",
            "D. GET mykey 5"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "Laravel": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command creates a new Laravel project?", "choices": ["laravel new", "php artisan make", "composer create", "npm init"], "answer": "laravel new"},
        {"question": "Which file is the main entry point for a Laravel application?", "choices": ["index.php", "main.php", "app.php", "start.php"], "answer": "index.php"},
        {"question": "Which command starts the Laravel development server?", "choices": ["php artisan serve", "php serve", "laravel start", "npm run dev"], "answer": "php artisan serve"},
        {"question": "Which directory contains the controllers?", "choices": ["app/Http/Controllers", "app/Controllers", "controllers/", "app/Http"], "answer": "app/Http/Controllers"},
        {"question": "Which file contains the main routes for web requests?", "choices": ["routes/web.php", "routes/api.php", "web.php", "routes.php"], "answer": "routes/web.php"},
        {"question": "Which command creates a new controller?", "choices": ["php artisan make:controller", "php artisan controller:create", "laravel make:controller", "php make:controller"], "answer": "php artisan make:controller"},
        {"question": "Which function returns a view in a controller?", "choices": ["view()", "returnView()", "show()", "display()"], "answer": "view()"},
        {"question": "Which file stores environment variables?", "choices": [".env", "env.php", "config.php", "environment.php"], "answer": ".env"},
        {"question": "Which command runs database migrations?", "choices": ["php artisan migrate", "php migrate", "laravel migrate", "php artisan db:migrate"], "answer": "php artisan migrate"},
        {"question": "Which command creates a new model?", "choices": ["php artisan make:model", "php artisan model:create", "laravel make:model", "php make:model"], "answer": "php artisan make:model"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this route definition?\n\nRoute::get('/home', function() {\n  return 'Home';\n});",
        "choices": [
          "A. Nothing, this is correct",
          "B. Missing semicolon after return",
          "C. Route should be route",
          "D. get should be post"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this controller?\n\npublic function index() {\n  return view('home');\n}",
        "choices": [
          "A. Nothing, this is correct",
          "B. view should be View",
          "C. index should be static",
          "D. return should be echo"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this Blade syntax?\n\n{{ $name }",
        "choices": [
          "A. Missing closing curly brace",
          "B. $name should be name",
          "C. {{ should be {!!",
          "D. $name should be in quotes"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nphp artisan migrate:statuss",
        "choices": [
          "A. 'statuss' is a typo, should be 'status'",
          "B. migrate should be migration",
          "C. php should be PHP",
          "D. artisan should be composer"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this Eloquent query?\n\nUser::where('email', '=', $email)->get;",
        "choices": [
          "A. get should be get()",
          "B. where should be find",
          "C. User should be user",
          "D. '=' should be '=='"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which code defines a route for '/about' that returns a view?",
        "choices": [
          "A. Route::get('/about', function() { return view('about'); });",
          "B. Route::post('/about', function() { return view('about'); });",
          "C. Route::get('/about', function() { echo 'about'; });",
          "D. Route::view('/about', 'about');"
        ],
        "answer": "A"
      },
      {
        "question": "Which code returns all users using Eloquent?",
        "choices": [
          "A. User::all();",
          "B. User::get();",
          "C. User::findAll();",
          "D. User::selectAll();"
        ],
        "answer": "A"
      },
      {
        "question": "Which Blade syntax prints a variable?",
        "choices": [
          "A. {{ $var }}",
          "B. {!! $var !!}",
          "C. $var",
          "D. echo $var"
        ],
        "answer": "A"
      },
      {
        "question": "Which command creates a new controller named 'PostController'?",
        "choices": [
          "A. php artisan make:controller PostController",
          "B. php artisan create:controller PostController",
          "C. php make:controller PostController",
          "D. artisan make:controller PostController"
        ],
        "answer": "A"
      },
      {
        "question": "Which code defines a migration for a 'posts' table?",
        "choices": [
          "A. php artisan make:migration create_posts_table",
          "B. php artisan migrate:posts",
          "C. php artisan create:migration posts",
          "D. php artisan make:table posts"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which command creates a resource controller?", "choices": ["php artisan make:controller --resource", "php artisan make:resource", "php artisan resource:controller", "php artisan controller:resource"], "answer": "php artisan make:controller --resource"},
        {"question": "Which method is used to validate form data in a controller?", "choices": ["validate", "check", "verify", "assert"], "answer": "validate"},
        {"question": "Which command rolls back the last migration?", "choices": ["php artisan migrate:rollback", "php artisan rollback", "php migrate:rollback", "php artisan db:rollback"], "answer": "php artisan migrate:rollback"},
        {"question": "Which method retrieves all records from a model?", "choices": ["all", "get", "fetchAll", "findAll"], "answer": "all"},
        {"question": "Which method finds a record by primary key?", "choices": ["find", "get", "first", "findById"], "answer": "find"},
        {"question": "Which method creates a new record in Eloquent?", "choices": ["create", "insert", "add", "new"], "answer": "create"},
        {"question": "Which method updates a record in Eloquent?", "choices": ["update", "modify", "change", "edit"], "answer": "update"},
        {"question": "Which method deletes a record in Eloquent?", "choices": ["delete", "remove", "destroy", "erase"], "answer": "delete"},
        {"question": "Which method returns the first record matching a query?", "choices": ["first", "find", "get", "firstOrFail"], "answer": "first"},
        {"question": "Which method paginates results?", "choices": ["paginate", "page", "split", "chunk"], "answer": "paginate"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this middleware registration?\n\nprotected $middleware = [\n  \\App\\Http\\Middleware\\CheckAge::class\n];",
          "choices": [
            "A. Missing comma after class",
            "B. Should be in $routeMiddleware for route-specific middleware",
            "C. $middleware should be $middlewares",
            "D. CheckAge should be checkAge"
          ],
          "answer": "B"
        },
        {
          "question": "What is the bug in this Eloquent relationship?\n\npublic function posts() {\n  return $this->hasMany('App\\Post', 'user_id');\n}",
          "choices": [
            "A. 'App\\Post' should be 'App\\\\Post'",
            "B. posts should be post",
            "C. hasMany should be belongsTo",
            "D. Nothing, this is correct"
          ],
          "answer": "D"
        },
        {
          "question": "What is wrong with this Blade foreach?\n\n@foreach ($users as $user)\n  <li>{{ $user->name }}</li>\n@endfor",
          "choices": [
            "A. Should use @endforeach to close the loop",
            "B. $user should be $users",
            "C. foreach should be for",
            "D. <li> should be <ul>"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nRoute::resource('posts', 'PostController');\nRoute::get('posts/create', 'PostController@create');",
          "choices": [
            "A. The second route is redundant, already included in resource",
            "B. resource should be resources",
            "C. get should be post",
            "D. PostController should be postcontroller"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this validation?\n\n$request->validate([\n  'email' => 'required|email|unique:users,email'\n  'password' => 'required|min:6'\n]);",
          "choices": [
            "A. Missing comma between rules",
            "B. validate should be validation",
            "C. email should be emails",
            "D. min should be max"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code defines a one-to-many relationship in a User model?",
          "choices": [
            "A. public function posts() { return $this->hasMany('App\\Post'); }",
            "B. public function posts() { return $this->belongsTo('App\\Post'); }",
            "C. public function posts() { return $this->hasOne('App\\Post'); }",
            "D. public function posts() { return $this->hasMany('App\\User'); }"
          ],
          "answer": "A"
        },
        {
          "question": "Which Blade directive checks if a variable is set?",
          "choices": [
            "A. @isset($var)",
            "B. @ifset($var)",
            "C. @isset $var",
            "D. @if($var)"
          ],
          "answer": "A"
        },
        {
          "question": "Which command rolls back the last migration?",
          "choices": [
            "A. php artisan migrate:rollback",
            "B. php artisan migrate:down",
            "C. php artisan rollback",
            "D. php artisan migrate:reset"
          ],
          "answer": "A"
        },
        {
          "question": "Which code returns a JSON response in a controller?",
          "choices": [
            "A. return response()->json(['success' => true]);",
            "B. return json(['success' => true]);",
            "C. return response(['success' => true]);",
            "D. return json_encode(['success' => true]);"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a route with a parameter?",
          "choices": [
            "A. Route::get('user/{id}', 'UserController@show');",
            "B. Route::get('user:id', 'UserController@show');",
            "C. Route::get('user?id', 'UserController@show');",
            "D. Route::get('user', 'UserController@show($id)');"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command creates a policy class?", "choices": ["php artisan make:policy", "php artisan policy:create", "php artisan make:auth-policy", "php artisan create:policy"], "answer": "php artisan make:policy"},
        {"question": "Which method is used to authorize actions in a controller?", "choices": ["authorize", "can", "check", "allow"], "answer": "authorize"},
        {"question": "Which command creates a job class?", "choices": ["php artisan make:job", "php artisan job:create", "php artisan make:queue-job", "php artisan create:job"], "answer": "php artisan make:job"},
        {"question": "Which method is used to dispatch a job?", "choices": ["dispatch", "send", "run", "queue"], "answer": "dispatch"},
        {"question": "Which command creates an event class?", "choices": ["php artisan make:event", "php artisan event:create", "php artisan make:listener", "php artisan create:event"], "answer": "php artisan make:event"},
        {"question": "Which method is used to broadcast an event?", "choices": ["broadcast", "fire", "emit", "send"], "answer": "broadcast"},
        {"question": "Which command creates a notification class?", "choices": ["php artisan make:notification", "php artisan notification:create", "php artisan make:notify", "php artisan create:notification"], "answer": "php artisan make:notification"},
        {"question": "Which method is used to send a notification?", "choices": ["notify", "send", "alert", "push"], "answer": "notify"},
        {"question": "Which command creates a middleware class?", "choices": ["php artisan make:middleware", "php artisan middleware:create", "php artisan make:mw", "php artisan create:middleware"], "answer": "php artisan make:middleware"},
        {"question": "Which method is used to register middleware in a controller?", "choices": ["middleware", "use", "register", "addMiddleware"], "answer": "middleware"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this event listener?\n\nEvent::listen('UserRegistered', function($user) {\n  Mail::to($user->email)->send(new WelcomeMail($user));\n});",
          "choices": [
            "A. Event::listen should use fully qualified event class name",
            "B. listen should be Listen",
            "C. send should be mail",
            "D. WelcomeMail should be welcomeMail"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this policy method?\n\npublic function update(User $user, Post $post) {\n  return $user->id == $post->user_id;\n}",
          "choices": [
            "A. Nothing, this is correct",
            "B. update should be static",
            "C. $user should be $users",
            "D. == should be =="
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this queue job?\n\npublic function handle() {\n  $user = User::find($this->userId);\n  $user->notify(new WelcomeNotification);\n}",
          "choices": [
            "A. WelcomeNotification should be instantiated with parentheses",
            "B. notify should be Notify",
            "C. handle should be static",
            "D. $user should be $users"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nphp artisan make:model Post -mcr",
          "choices": [
            "A. -mcr is valid, but may not be supported in older Laravel versions",
            "B. make should be create",
            "C. Post should be post",
            "D. artisan should be composer"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this custom validation rule?\n\nValidator::make($data, [\n  'age' => 'required|adult'\n]);",
          "choices": [
            "A. 'adult' is not a built-in validation rule",
            "B. required should be require",
            "C. Validator should be validator",
            "D. $data should be $request"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which code defines an event and listener in Laravel?",
          "choices": [
            "A. php artisan make:event UserRegistered; php artisan make:listener SendWelcomeEmail --event=UserRegistered",
            "B. php artisan event:make UserRegistered; php artisan listener:make SendWelcomeEmail --event=UserRegistered",
            "C. php artisan make:event UserRegistered; php artisan make:listener SendWelcomeEmail",
            "D. php artisan make:UserRegistered; php artisan make:SendWelcomeEmail"
          ],
          "answer": "A"
        },
        {
          "question": "Which code defines a policy for a model?",
          "choices": [
            "A. php artisan make:policy PostPolicy --model=Post",
            "B. php artisan policy:make PostPolicy --model=Post",
            "C. php artisan make:policy PostPolicy",
            "D. php artisan make:PostPolicy --model=Post"
          ],
          "answer": "A"
        },
        {
          "question": "Which code dispatches a job in a controller?",
          "choices": [
            "A. dispatch(new SendEmailJob($user));",
            "B. SendEmailJob::dispatch($user);",
            "C. $this->dispatch(new SendEmailJob($user));",
            "D. All of the above"
          ],
          "answer": "D"
        },
        {
          "question": "Which code defines a custom validation rule?",
          "choices": [
            "A. php artisan make:rule Uppercase",
            "B. php artisan rule:make Uppercase",
            "C. php artisan make:UppercaseRule",
            "D. php artisan make:customrule Uppercase"
          ],
          "answer": "A"
        },
        {
          "question": "Which code returns a paginated list of users?",
          "choices": [
            "A. User::paginate(10);",
            "B. User::all(10);",
            "C. User::get(10);",
            "D. User::list(10);"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "SQL": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command retrieves data from a database?", "choices": ["SELECT", "GET", "FETCH", "READ"], "answer": "SELECT"},
        {"question": "Which command inserts data into a table?", "choices": ["INSERT", "ADD", "CREATE", "PUT"], "answer": "INSERT"},
        {"question": "Which command updates data in a table?", "choices": ["UPDATE", "MODIFY", "CHANGE", "EDIT"], "answer": "UPDATE"},
        {"question": "Which command deletes data from a table?", "choices": ["DELETE", "REMOVE", "DROP", "ERASE"], "answer": "DELETE"},
        {"question": "Which command creates a new table?", "choices": ["CREATE TABLE", "NEW TABLE", "MAKE TABLE", "ADD TABLE"], "answer": "CREATE TABLE"},
        {"question": "Which command removes a table?", "choices": ["DROP TABLE", "DELETE TABLE", "REMOVE TABLE", "ERASE TABLE"], "answer": "DROP TABLE"},
        {"question": "Which clause filters results in a SELECT statement?", "choices": ["WHERE", "FILTER", "IF", "CONDITION"], "answer": "WHERE"},
        {"question": "Which clause sorts results in a SELECT statement?", "choices": ["ORDER BY", "SORT", "ARRANGE", "ORDER"], "answer": "ORDER BY"},
        {"question": "Which function counts rows in a result set?", "choices": ["COUNT", "SUM", "TOTAL", "NUMBER"], "answer": "COUNT"},
        {"question": "Which keyword eliminates duplicate rows?", "choices": ["DISTINCT", "UNIQUE", "DIFFERENT", "ONLY"], "answer": "DISTINCT"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this SQL?\n\nSELECT name age FROM users;",
        "choices": [
          "A. Missing comma between columns",
          "B. FROM should be WHERE",
          "C. name should be in quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this SQL?\n\nINSERT INTO users (name, age VALUES ('Alice', 25);",
        "choices": [
          "A. Missing closing parenthesis after age",
          "B. VALUES should be VALUE",
          "C. 'Alice' should be in double quotes",
          "D. 25 should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nUPDATE users SET name = 'Bob' age = 30 WHERE id = 1;",
        "choices": [
          "A. Missing comma between assignments",
          "B. SET should be WHERE",
          "C. id should be in quotes",
          "D. 1 should be '1'"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nDELETE users WHERE id = 2;",
        "choices": [
          "A. Should be DELETE FROM users WHERE id = 2",
          "B. WHERE should be SET",
          "C. id should be in quotes",
          "D. 2 should be '2'"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nSELECT * FORM users;",
        "choices": [
          "A. FORM should be FROM",
          "B. * should be columns",
          "C. users should be user",
          "D. SELECT should be select"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which SQL selects all columns from the 'users' table?",
        "choices": [
          "A. SELECT * FROM users;",
          "B. SELECT users FROM *;",
          "C. SELECT ALL FROM users;",
          "D. SELECT * users;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL inserts a new user named 'Alice' aged 25?",
        "choices": [
          "A. INSERT INTO users (name, age) VALUES ('Alice', 25);",
          "B. INSERT users (name, age) VALUES ('Alice', 25);",
          "C. INSERT INTO users VALUES ('Alice', 25);",
          "D. INSERT INTO users (name, age) VALUE ('Alice', 25);"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL updates the age of user with id 1 to 30?",
        "choices": [
          "A. UPDATE users SET age = 30 WHERE id = 1;",
          "B. UPDATE users age = 30 WHERE id = 1;",
          "C. UPDATE users SET age = 30;",
          "D. UPDATE users WHERE id = 1 SET age = 30;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL deletes the user with id 2?",
        "choices": [
          "A. DELETE FROM users WHERE id = 2;",
          "B. DELETE users WHERE id = 2;",
          "C. DELETE FROM users id = 2;",
          "D. DELETE WHERE id = 2 FROM users;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL selects only the 'name' column from 'users'?",
        "choices": [
          "A. SELECT name FROM users;",
          "B. SELECT users FROM name;",
          "C. SELECT * FROM users name;",
          "D. SELECT name users;"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which clause groups rows in a SELECT statement?", "choices": ["GROUP BY", "GROUP", "COLLECT", "BATCH"], "answer": "GROUP BY"},
        {"question": "Which clause filters grouped results?", "choices": ["HAVING", "WHERE", "FILTER", "IF"], "answer": "HAVING"},
        {"question": "Which join returns all rows from both tables?", "choices": ["FULL OUTER JOIN", "INNER JOIN", "LEFT JOIN", "RIGHT JOIN"], "answer": "FULL OUTER JOIN"},
        {"question": "Which join returns only matching rows?", "choices": ["INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "FULL JOIN"], "answer": "INNER JOIN"},
        {"question": "Which function calculates the average of a column?", "choices": ["AVG", "MEAN", "AVERAGE", "MEDIAN"], "answer": "AVG"},
        {"question": "Which function finds the maximum value?", "choices": ["MAX", "HIGHEST", "TOP", "GREATEST"], "answer": "MAX"},
        {"question": "Which function finds the minimum value?", "choices": ["MIN", "LOWEST", "BOTTOM", "LEAST"], "answer": "MIN"},
        {"question": "Which keyword creates a subquery?", "choices": ["IN", "EXISTS", "SUBQUERY", "NESTED"], "answer": "IN"},
        {"question": "Which command creates an index?", "choices": ["CREATE INDEX", "ADD INDEX", "MAKE INDEX", "NEW INDEX"], "answer": "CREATE INDEX"},
        {"question": "Which constraint ensures unique values?", "choices": ["UNIQUE", "DISTINCT", "ONLY", "SINGLE"], "answer": "UNIQUE"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT COUNT name FROM users;",
          "choices": [
            "A. COUNT should be COUNT(name) with parentheses",
            "B. name should be in quotes",
            "C. users should be user",
            "D. SELECT should be select"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT * FROM users WHERE age >;",
          "choices": [
            "A. Missing value after >",
            "B. WHERE should be SET",
            "C. age should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name, age FROM users ORDER name;",
          "choices": [
            "A. Should be ORDER BY name",
            "B. name should be in quotes",
            "C. users should be user",
            "D. age should be string"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nSELECT * FROM users GROUP age;",
          "choices": [
            "A. Should be GROUP BY age",
            "B. GROUP should be ORDER",
            "C. age should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name FROM users WHERE age BETWEEN 20 30;",
          "choices": [
            "A. Should be BETWEEN 20 AND 30",
            "B. age should be in quotes",
            "C. users should be user",
            "D. 20 30 should be in parentheses"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL counts the number of users?",
          "choices": [
            "A. SELECT COUNT(*) FROM users;",
            "B. SELECT COUNT(users) FROM *;",
            "C. SELECT users FROM COUNT(*);",
            "D. SELECT * FROM users COUNT();"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users older than 18?",
          "choices": [
            "A. SELECT * FROM users WHERE age > 18;",
            "B. SELECT * FROM users WHERE age = 18;",
            "C. SELECT * FROM users WHERE age < 18;",
            "D. SELECT * FROM users WHERE age >= 18;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL orders users by name ascending?",
          "choices": [
            "A. SELECT * FROM users ORDER BY name ASC;",
            "B. SELECT * FROM users ORDER name ASC;",
            "C. SELECT * FROM users ORDER BY ASC name;",
            "D. SELECT * FROM users ORDER name;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL groups users by age?",
          "choices": [
            "A. SELECT age, COUNT(*) FROM users GROUP BY age;",
            "B. SELECT * FROM users GROUP age;",
            "C. SELECT age FROM users GROUP BY;",
            "D. SELECT * FROM users GROUP age BY;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users with age between 20 and 30?",
          "choices": [
            "A. SELECT * FROM users WHERE age BETWEEN 20 AND 30;",
            "B. SELECT * FROM users WHERE age = 20 OR age = 30;",
            "C. SELECT * FROM users WHERE age > 20 AND age < 30;",
            "D. SELECT * FROM users WHERE age IN (20, 30);"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command creates a stored procedure?", "choices": ["CREATE PROCEDURE", "NEW PROCEDURE", "MAKE PROCEDURE", "ADD PROCEDURE"], "answer": "CREATE PROCEDURE"},
        {"question": "Which command creates a trigger?", "choices": ["CREATE TRIGGER", "NEW TRIGGER", "MAKE TRIGGER", "ADD TRIGGER"], "answer": "CREATE TRIGGER"},
        {"question": "Which command creates a view?", "choices": ["CREATE VIEW", "NEW VIEW", "MAKE VIEW", "ADD VIEW"], "answer": "CREATE VIEW"},
        {"question": "Which command grants privileges to a user?", "choices": ["GRANT", "GIVE", "ALLOW", "PERMIT"], "answer": "GRANT"},
        {"question": "Which command revokes privileges from a user?", "choices": ["REVOKE", "REMOVE", "TAKE", "DENY"], "answer": "REVOKE"},
        {"question": "Which command creates a user?", "choices": ["CREATE USER", "NEW USER", "ADD USER", "MAKE USER"], "answer": "CREATE USER"},
        {"question": "Which command creates a database?", "choices": ["CREATE DATABASE", "NEW DATABASE", "ADD DATABASE", "MAKE DATABASE"], "answer": "CREATE DATABASE"},
        {"question": "Which command backs up a database?", "choices": ["BACKUP", "DUMP", "EXPORT", "SAVE"], "answer": "BACKUP"},
        {"question": "Which command restores a database from a backup?", "choices": ["RESTORE", "IMPORT", "LOAD", "RECOVER"], "answer": "RESTORE"},
        {"question": "Which command shows the structure of a table?", "choices": ["DESCRIBE", "SHOW", "EXPLAIN", "STRUCTURE"], "answer": "DESCRIBE"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT u.name, o.amount FROM users u JOIN orders o ON u.id = o.user_id WHERE o.amount > 100 GROUP u.name;",
          "choices": [
            "A. Should be GROUP BY u.name",
            "B. JOIN should be INNER JOIN",
            "C. amount should be in quotes",
            "D. 100 should be '100'"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT * FROM users LEFT JOIN orders WHERE users.id = orders.user_id;",
          "choices": [
            "A. LEFT JOIN requires ON, not WHERE, for join condition",
            "B. users should be user",
            "C. orders should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name FROM users WHERE age IN 20, 30;",
          "choices": [
            "A. Should be IN (20, 30)",
            "B. age should be in quotes",
            "C. users should be user",
            "D. 20, 30 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nSELECT name, COUNT(*) FROM users;",
          "choices": [
            "A. Should use GROUP BY name",
            "B. COUNT should be SUM",
            "C. name should be in quotes",
            "D. users should be user"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT * FROM users WHERE EXISTS SELECT * FROM orders WHERE users.id = orders.user_id;",
          "choices": [
            "A. EXISTS requires parentheses around the subquery",
            "B. WHERE should be HAVING",
            "C. users should be user",
            "D. * should be columns"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL joins users and orders on user id?",
          "choices": [
            "A. SELECT * FROM users u JOIN orders o ON u.id = o.user_id;",
            "B. SELECT * FROM users u, orders o WHERE u.id = o.user_id;",
            "C. SELECT * FROM users u LEFT JOIN orders o ON u.id = o.user_id;",
            "D. SELECT * FROM users u RIGHT JOIN orders o ON u.id = o.user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects the maximum age from users?",
          "choices": [
            "A. SELECT MAX(age) FROM users;",
            "B. SELECT age FROM users MAX();",
            "C. SELECT * FROM users WHERE age = MAX;",
            "D. SELECT MAX FROM users age;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users who have orders?",
          "choices": [
            "A. SELECT * FROM users WHERE EXISTS (SELECT * FROM orders WHERE users.id = orders.user_id);",
            "B. SELECT * FROM users WHERE orders.id IS NOT NULL;",
            "C. SELECT * FROM users JOIN orders;",
            "D. SELECT * FROM users WHERE users.id = orders.user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL counts the number of orders per user?",
          "choices": [
            "A. SELECT user_id, COUNT(*) FROM orders GROUP BY user_id;",
            "B. SELECT COUNT(*) FROM orders;",
            "C. SELECT user_id FROM orders;",
            "D. SELECT * FROM orders GROUP user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users with no orders?",
          "choices": [
            "A. SELECT * FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE o.id IS NULL;",
            "B. SELECT * FROM users WHERE orders.id IS NULL;",
            "C. SELECT * FROM users u RIGHT JOIN orders o ON u.id = o.user_id WHERE o.id IS NULL;",
            "D. SELECT * FROM users WHERE NOT EXISTS (SELECT * FROM orders WHERE users.id = orders.user_id);"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "NoSQL": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which is a NoSQL database?", "choices": ["MongoDB", "MySQL", "PostgreSQL", "Oracle"], "answer": "MongoDB"},
        {"question": "What does NoSQL stand for?", "choices": ["Not Only SQL", "No SQL", "New SQL", "None of the above"], "answer": "Not Only SQL"},
        {"question": "Which data model is common in NoSQL databases?", "choices": ["Document", "Relational", "Tabular", "Hierarchical"], "answer": "Document"},
        {"question": "Which NoSQL database is key-value based?", "choices": ["Redis", "MySQL", "Oracle", "PostgreSQL"], "answer": "Redis"},
        {"question": "Which NoSQL database is column-family based?", "choices": ["Cassandra", "MongoDB", "MySQL", "SQLite"], "answer": "Cassandra"},
        {"question": "Which NoSQL database is graph-based?", "choices": ["Neo4j", "MongoDB", "MySQL", "Redis"], "answer": "Neo4j"},
        {"question": "Which format is used for documents in MongoDB?", "choices": ["BSON", "XML", "CSV", "YAML"], "answer": "BSON"},
        {"question": "Which command retrieves all documents in MongoDB?", "choices": ["find", "select", "get", "fetch"], "answer": "find"},
        {"question": "Which NoSQL database is provided by Amazon?", "choices": ["DynamoDB", "MongoDB", "Cassandra", "Redis"], "answer": "DynamoDB"},
        {"question": "Which is a benefit of NoSQL databases?", "choices": ["Scalability", "Fixed schema", "Complex joins", "ACID transactions"], "answer": "Scalability"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this MongoDB insert?\n\ndb.users.insert({name: 'Alice', age: 25);",
        "choices": [
          "A. Missing closing curly brace }",
          "B. insert should be insertOne",
          "C. name should be in double quotes",
          "D. age should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this command?\n\ndb.users.find(name: 'Bob')",
        "choices": [
          "A. The query should be an object: {name: 'Bob'}",
          "B. find should be findOne",
          "C. name should be in double quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this command?\n\ndb.users.remove()",
        "choices": [
          "A. This removes all documents; should provide a filter",
          "B. remove should be delete",
          "C. users should be user",
          "D. remove should be removeOne"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\ndb.users.update({name: 'Alice'}, {age: 26})",
        "choices": [
          "A. The update document should use $set: {age: 26}",
          "B. update should be updateOne",
          "C. name should be in double quotes",
          "D. age should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this command?\n\ndb.users.find()",
        "choices": [
          "A. Nothing, this is correct",
          "B. find should be findAll",
          "C. users should be user",
          "D. find should be get"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which command inserts a document into the 'users' collection?",
        "choices": [
          "A. db.users.insertOne({name: 'Alice', age: 25})",
          "B. db.users.add({name: 'Alice', age: 25})",
          "C. db.users.save({name: 'Alice', age: 25})",
          "D. db.users.create({name: 'Alice', age: 25})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command finds all documents in 'users'?",
        "choices": [
          "A. db.users.find()",
          "B. db.users.get()",
          "C. db.users.findAll()",
          "D. db.users.list()"
        ],
        "answer": "A"
      },
      {
        "question": "Which command deletes one document with name 'Bob'?",
        "choices": [
          "A. db.users.deleteOne({name: 'Bob'})",
          "B. db.users.remove({name: 'Bob'})",
          "C. db.users.delete({name: 'Bob'})",
          "D. db.users.drop({name: 'Bob'})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command updates the age of 'Alice' to 26?",
        "choices": [
          "A. db.users.updateOne({name: 'Alice'}, {$set: {age: 26}})",
          "B. db.users.update({name: 'Alice'}, {age: 26})",
          "C. db.users.set({name: 'Alice'}, {age: 26})",
          "D. db.users.updateOne({name: 'Alice'}, {age: 26})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command counts the number of users?",
        "choices": [
          "A. db.users.countDocuments({})",
          "B. db.users.count()",
          "C. db.users.length()",
          "D. db.users.size()"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which NoSQL type is best for social networks?", "choices": ["Graph", "Document", "Key-Value", "Column-Family"], "answer": "Graph"},
        {"question": "Which NoSQL database supports secondary indexes?", "choices": ["MongoDB", "Redis", "Neo4j", "SQLite"], "answer": "MongoDB"},
        {"question": "Which query language is used in Cassandra?", "choices": ["CQL", "SQL", "Cypher", "JSON"], "answer": "CQL"},
        {"question": "Which command adds a document in MongoDB?", "choices": ["insertOne", "add", "put", "create"], "answer": "insertOne"},
        {"question": "Which command deletes a key in Redis?", "choices": ["DEL", "REMOVE", "DELETE", "DROP"], "answer": "DEL"},
        {"question": "Which command creates a table in Cassandra?", "choices": ["CREATE TABLE", "NEW TABLE", "ADD TABLE", "MAKE TABLE"], "answer": "CREATE TABLE"},
        {"question": "Which command creates a new database in MongoDB?", "choices": ["use dbname", "create dbname", "new dbname", "add dbname"], "answer": "use dbname"},
        {"question": "Which command lists all keys in Redis?", "choices": ["KEYS *", "LIST KEYS", "SHOW KEYS", "GET KEYS"], "answer": "KEYS *"},
        {"question": "Which command updates a document in MongoDB?", "choices": ["updateOne", "modify", "change", "edit"], "answer": "updateOne"},
        {"question": "Which command retrieves a value by key in Redis?", "choices": ["GET", "FIND", "SELECT", "FETCH"], "answer": "GET"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this aggregation?\n\ndb.orders.aggregate({$group: {_id: '$customer', total: {$sum: '$amount'}}})",
          "choices": [
            "A. The pipeline should be an array: [ ... ]",
            "B. $group should be $sum",
            "C. orders should be order",
            "D. _id should be id"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\ndb.users.find({age: {$gt}})",
          "choices": [
            "A. $gt requires a value, e.g. {$gt: 18}",
            "B. find should be findOne",
            "C. age should be in double quotes",
            "D. users should be user"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this update?\n\ndb.users.updateOne({name: 'Bob'}, {$inc: 1})",
          "choices": [
            "A. $inc requires a field: {$inc: {age: 1}}",
            "B. updateOne should be update",
            "C. name should be in double quotes",
            "D. 1 should be a string"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ndb.users.find({$or: {age: 20, age: 30}})",
          "choices": [
            "A. $or should be an array: {$or: [{age: 20}, {age: 30}]}",
            "B. find should be findOne",
            "C. users should be user",
            "D. age should be in double quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\ndb.users.createIndex('name')",
          "choices": [
            "A. createIndex requires an object: {name: 1}",
            "B. createIndex should be ensureIndex",
            "C. users should be user",
            "D. name should be in double quotes"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which command finds users with age greater than 18?",
          "choices": [
            "A. db.users.find({age: {$gt: 18}})",
            "B. db.users.find({age: 18})",
            "C. db.users.find({age: {$gte: 18}})",
            "D. db.users.find({age: {$lt: 18}})"
          ],
          "answer": "A"
        },
        {
          "question": "Which command updates all users to set active to true?",
          "choices": [
            "A. db.users.updateMany({}, {$set: {active: true}})",
            "B. db.users.update({}, {$set: {active: true}})",
            "C. db.users.set({active: true})",
            "D. db.users.updateAll({$set: {active: true}})"
          ],
          "answer": "A"
        },
        {
          "question": "Which command sorts users by name ascending?",
          "choices": [
            "A. db.users.find().sort({name: 1})",
            "B. db.users.sort({name: 1})",
            "C. db.users.find().order({name: 1})",
            "D. db.users.find().sort('name')"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets the first user in the collection?",
          "choices": [
            "A. db.users.findOne()",
            "B. db.users.first()",
            "C. db.users.find()[0]",
            "D. db.users.getOne()"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets all unique values for the 'city' field?",
          "choices": [
            "A. db.users.distinct('city')",
            "B. db.users.unique('city')",
            "C. db.users.find().distinct('city')",
            "D. db.users.get('city').unique()"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which NoSQL database supports sharding?", "choices": ["MongoDB", "MySQL", "SQLite", "Oracle"], "answer": "MongoDB"},
        {"question": "Which NoSQL database supports tunable consistency?", "choices": ["Cassandra", "MongoDB", "Redis", "Neo4j"], "answer": "Cassandra"},
        {"question": "Which query language is used in Neo4j?", "choices": ["Cypher", "SQL", "CQL", "JSON"], "answer": "Cypher"},
        {"question": "Which command creates a secondary index in Cassandra?", "choices": ["CREATE INDEX", "NEW INDEX", "ADD INDEX", "MAKE INDEX"], "answer": "CREATE INDEX"},
        {"question": "Which command performs aggregation in MongoDB?", "choices": ["aggregate", "sum", "group", "collect"], "answer": "aggregate"},
        {"question": "Which command creates a snapshot in Cassandra?", "choices": ["nodetool snapshot", "CREATE SNAPSHOT", "SNAPSHOT", "TAKE SNAPSHOT"], "answer": "nodetool snapshot"},
        {"question": "Which command creates a text index in MongoDB?", "choices": ["createIndex", "addTextIndex", "makeTextIndex", "textIndex"], "answer": "createIndex"},
        {"question": "Which command deletes all keys in Redis?", "choices": ["FLUSHALL", "DELETE ALL", "REMOVE ALL", "CLEAR ALL"], "answer": "FLUSHALL"},
        {"question": "Which command creates a user-defined function in Cassandra?", "choices": ["CREATE FUNCTION", "NEW FUNCTION", "ADD FUNCTION", "MAKE FUNCTION"], "answer": "CREATE FUNCTION"},
        {"question": "Which command enables sharding in MongoDB?", "choices": ["enableSharding", "shard", "startSharding", "setSharding"], "answer": "enableSharding"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this aggregation pipeline?\n\ndb.sales.aggregate({$match: {amount: {$gt: 100}}}, {$group: {_id: '$region', total: {$sum: '$amount'}}})",
          "choices": [
            "A. The pipeline should be an array: [ ... ]",
            "B. $match should be $group",
            "C. sales should be sale",
            "D. total should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\ndb.users.updateMany({}, {$unset: 'age'})",
          "choices": [
            "A. $unset requires an object: {$unset: {age: ''}}",
            "B. updateMany should be update",
            "C. users should be user",
            "D. age should be in double quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this index creation?\n\ndb.users.createIndex({name: 1, age})",
          "choices": [
            "A. age should have a value (1 or -1)",
            "B. createIndex should be ensureIndex",
            "C. users should be user",
            "D. name should be in double quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\ndb.users.aggregate([{$project: {name: 1, age: 1, _id: 0}}])",
          "choices": [
            "A. Nothing, this is correct",
            "B. $project should be $group",
            "C. _id should be 1",
            "D. age should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\ndb.users.find({$and: {age: {$gt: 20}, city: 'NY'}})",
          "choices": [
            "A. $and should be an array: {$and: [{age: {$gt: 20}}, {city: 'NY'}]}",
            "B. find should be findOne",
            "C. users should be user",
            "D. city should be in double quotes"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which aggregation groups users by city and counts them?",
          "choices": [
            "A. db.users.aggregate([{$group: {_id: '$city', count: {$sum: 1}}}])",
            "B. db.users.group({city: 1})",
            "C. db.users.aggregate({$group: {city: 1, count: {$sum: 1}}})",
            "D. db.users.aggregate([{$group: {city: 1, count: {$sum: 1}}}])"
          ],
          "answer": "A"
        },
        {
          "question": "Which command finds users with both age > 20 and city 'NY'?",
          "choices": [
            "A. db.users.find({$and: [{age: {$gt: 20}}, {city: 'NY'}]})",
            "B. db.users.find({age: {$gt: 20}, city: 'NY'})",
            "C. db.users.find({age: {$gt: 20}}).find({city: 'NY'})",
            "D. db.users.find({$or: [{age: {$gt: 20}}, {city: 'NY'}]})"
          ],
          "answer": "A"
        },
        {
          "question": "Which command removes all users from the collection?",
          "choices": [
            "A. db.users.deleteMany({})",
            "B. db.users.removeAll()",
            "C. db.users.deleteAll()",
            "D. db.users.remove({})"
          ],
          "answer": "A"
        },
        {
          "question": "Which command creates a unique index on the 'email' field?",
          "choices": [
            "A. db.users.createIndex({email: 1}, {unique: true})",
            "B. db.users.createIndex({email: 1})",
            "C. db.users.ensureIndex({email: 1}, {unique: true})",
            "D. db.users.createIndex('email', {unique: true})"
          ],
          "answer": "A"
        },
        {
          "question": "Which command finds users whose name starts with 'A'?",
          "choices": [
            "A. db.users.find({name: /^A/})",
            "B. db.users.find({name: 'A%'})",
            "C. db.users.find({name: {$regex: '^A'}})",
            "D. db.users.find({name: {$like: 'A%'}})"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "MySQL": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command logs into MySQL?", "choices": ["mysql -u root -p", "psql", "mongo", "sqlplus"], "answer": "mysql -u root -p"},
        {"question": "Which command shows all databases?", "choices": ["SHOW DATABASES;", "LIST DATABASES;", "SHOW ALL;", "DATABASES;"], "answer": "SHOW DATABASES;"},
        {"question": "Which command selects a database?", "choices": ["USE dbname;", "SELECT dbname;", "CHOOSE dbname;", "DATABASE dbname;"], "answer": "USE dbname;"},
        {"question": "Which command shows all tables?", "choices": ["SHOW TABLES;", "LIST TABLES;", "SHOW ALL TABLES;", "TABLES;"], "answer": "SHOW TABLES;"},
        {"question": "Which command creates a table?", "choices": ["CREATE TABLE", "NEW TABLE", "MAKE TABLE", "ADD TABLE"], "answer": "CREATE TABLE"},
        {"question": "Which data type is used for text in MySQL?", "choices": ["VARCHAR", "INT", "FLOAT", "DATE"], "answer": "VARCHAR"},
        {"question": "Which command inserts data into a table?", "choices": ["INSERT INTO", "ADD TO", "PUT INTO", "APPEND TO"], "answer": "INSERT INTO"},
        {"question": "Which command retrieves all rows from a table?", "choices": ["SELECT * FROM table;", "GET ALL FROM table;", "SHOW table;", "FETCH table;"], "answer": "SELECT * FROM table;"},
        {"question": "Which command deletes a table?", "choices": ["DROP TABLE", "REMOVE TABLE", "DELETE TABLE", "DESTROY TABLE"], "answer": "DROP TABLE"},
        {"question": "Which command updates data in a table?", "choices": ["UPDATE", "MODIFY", "CHANGE", "EDIT"], "answer": "UPDATE"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this SQL?\n\nSELECT name age FROM users;",
        "choices": [
          "A. Missing comma between columns",
          "B. FROM should be WHERE",
          "C. name should be in quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this SQL?\n\nINSERT INTO users (name, age VALUES ('Alice', 25);",
        "choices": [
          "A. Missing closing parenthesis after age",
          "B. VALUES should be VALUE",
          "C. 'Alice' should be in double quotes",
          "D. 25 should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nUPDATE users SET name = 'Bob' age = 30 WHERE id = 1;",
        "choices": [
          "A. Missing comma between assignments",
          "B. SET should be WHERE",
          "C. id should be in quotes",
          "D. 1 should be '1'"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nDELETE users WHERE id = 2;",
        "choices": [
          "A. Should be DELETE FROM users WHERE id = 2",
          "B. WHERE should be SET",
          "C. id should be in quotes",
          "D. 2 should be '2'"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nSELECT * FORM users;",
        "choices": [
          "A. FORM should be FROM",
          "B. * should be columns",
          "C. users should be user",
          "D. SELECT should be select"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which SQL selects all columns from the 'users' table?",
        "choices": [
          "A. SELECT * FROM users;",
          "B. SELECT users FROM *;",
          "C. SELECT ALL FROM users;",
          "D. SELECT * users;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL inserts a new user named 'Alice' aged 25?",
        "choices": [
          "A. INSERT INTO users (name, age) VALUES ('Alice', 25);",
          "B. INSERT users (name, age) VALUES ('Alice', 25);",
          "C. INSERT INTO users VALUES ('Alice', 25);",
          "D. INSERT INTO users (name, age) VALUE ('Alice', 25);"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL updates the age of user with id 1 to 30?",
        "choices": [
          "A. UPDATE users SET age = 30 WHERE id = 1;",
          "B. UPDATE users age = 30 WHERE id = 1;",
          "C. UPDATE users SET age = 30;",
          "D. UPDATE users WHERE id = 1 SET age = 30;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL deletes the user with id 2?",
        "choices": [
          "A. DELETE FROM users WHERE id = 2;",
          "B. DELETE users WHERE id = 2;",
          "C. DELETE FROM users id = 2;",
          "D. DELETE WHERE id = 2 FROM users;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL selects only the 'name' column from 'users'?",
        "choices": [
          "A. SELECT name FROM users;",
          "B. SELECT users FROM name;",
          "C. SELECT * FROM users name;",
          "D. SELECT name users;"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which command adds a column to a table?", "choices": ["ALTER TABLE", "ADD COLUMN", "MODIFY TABLE", "CHANGE TABLE"], "answer": "ALTER TABLE"},
        {"question": "Which command removes a column from a table?", "choices": ["ALTER TABLE ... DROP COLUMN", "REMOVE COLUMN", "DELETE COLUMN", "DROP COLUMN"], "answer": "ALTER TABLE ... DROP COLUMN"},
        {"question": "Which command creates an index?", "choices": ["CREATE INDEX", "NEW INDEX", "MAKE INDEX", "ADD INDEX"], "answer": "CREATE INDEX"},
        {"question": "Which command adds a foreign key?", "choices": ["ALTER TABLE ... ADD FOREIGN KEY", "ADD FOREIGN KEY", "NEW FOREIGN KEY", "CREATE FOREIGN KEY"], "answer": "ALTER TABLE ... ADD FOREIGN KEY"},
        {"question": "Which command deletes all rows from a table?", "choices": ["DELETE FROM table;", "REMOVE ALL FROM table;", "DROP ALL FROM table;", "CLEAR table;"], "answer": "DELETE FROM table;"},
        {"question": "Which function counts rows in a table?", "choices": ["COUNT(*)", "SUM(*)", "TOTAL()", "ROWS()"], "answer": "COUNT(*)"},
        {"question": "Which clause sorts results?", "choices": ["ORDER BY", "SORT BY", "GROUP BY", "ARRANGE BY"], "answer": "ORDER BY"},
        {"question": "Which clause groups rows?", "choices": ["GROUP BY", "ORDER BY", "SORT BY", "COLLECT BY"], "answer": "GROUP BY"},
        {"question": "Which function returns the maximum value?", "choices": ["MAX()", "MIN()", "GREATEST()", "HIGHEST()"], "answer": "MAX()"},
        {"question": "Which function returns the minimum value?", "choices": ["MIN()", "MAX()", "LEAST()", "LOWEST()"], "answer": "MIN()"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT COUNT name FROM users;",
          "choices": [
            "A. COUNT should be COUNT(name) with parentheses",
            "B. name should be in quotes",
            "C. users should be user",
            "D. SELECT should be select"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT * FROM users WHERE age >;",
          "choices": [
            "A. Missing value after >",
            "B. WHERE should be SET",
            "C. age should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name, age FROM users ORDER name;",
          "choices": [
            "A. Should be ORDER BY name",
            "B. name should be in quotes",
            "C. users should be user",
            "D. age should be string"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nSELECT * FROM users GROUP age;",
          "choices": [
            "A. Should be GROUP BY age",
            "B. GROUP should be ORDER",
            "C. age should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name FROM users WHERE age BETWEEN 20 30;",
          "choices": [
            "A. Should be BETWEEN 20 AND 30",
            "B. age should be in quotes",
            "C. users should be user",
            "D. 20 30 should be in parentheses"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL counts the number of users?",
          "choices": [
            "A. SELECT COUNT(*) FROM users;",
            "B. SELECT COUNT(users) FROM *;",
            "C. SELECT users FROM COUNT(*);",
            "D. SELECT * FROM users COUNT();"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users older than 18?",
          "choices": [
            "A. SELECT * FROM users WHERE age > 18;",
            "B. SELECT * FROM users WHERE age = 18;",
            "C. SELECT * FROM users WHERE age < 18;",
            "D. SELECT * FROM users WHERE age >= 18;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL orders users by name ascending?",
          "choices": [
            "A. SELECT * FROM users ORDER BY name ASC;",
            "B. SELECT * FROM users ORDER name ASC;",
            "C. SELECT * FROM users ORDER BY ASC name;",
            "D. SELECT * FROM users ORDER name;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL groups users by age?",
          "choices": [
            "A. SELECT age, COUNT(*) FROM users GROUP BY age;",
            "B. SELECT * FROM users GROUP age;",
            "C. SELECT age FROM users GROUP BY;",
            "D. SELECT * FROM users GROUP age BY;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users with age between 20 and 30?",
          "choices": [
            "A. SELECT * FROM users WHERE age BETWEEN 20 AND 30;",
            "B. SELECT * FROM users WHERE age = 20 OR age = 30;",
            "C. SELECT * FROM users WHERE age > 20 AND age < 30;",
            "D. SELECT * FROM users WHERE age IN (20, 30);"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command creates a stored procedure?", "choices": ["CREATE PROCEDURE", "NEW PROCEDURE", "MAKE PROCEDURE", "ADD PROCEDURE"], "answer": "CREATE PROCEDURE"},
        {"question": "Which command creates a trigger?", "choices": ["CREATE TRIGGER", "NEW TRIGGER", "MAKE TRIGGER", "ADD TRIGGER"], "answer": "CREATE TRIGGER"},
        {"question": "Which command creates a view?", "choices": ["CREATE VIEW", "NEW VIEW", "MAKE VIEW", "ADD VIEW"], "answer": "CREATE VIEW"},
        {"question": "Which command grants privileges to a user?", "choices": ["GRANT", "GIVE", "ALLOW", "PERMIT"], "answer": "GRANT"},
        {"question": "Which command revokes privileges from a user?", "choices": ["REVOKE", "REMOVE", "TAKE", "DENY"], "answer": "REVOKE"},
        {"question": "Which command creates a user?", "choices": ["CREATE USER", "NEW USER", "ADD USER", "MAKE USER"], "answer": "CREATE USER"},
        {"question": "Which command backs up a database?", "choices": ["mysqldump", "mysqlbackup", "backupdb", "dumpdb"], "answer": "mysqldump"},
        {"question": "Which command restores a database from a backup?", "choices": ["mysql", "restoredb", "importdb", "mysqldump"], "answer": "mysql"},
        {"question": "Which command shows the structure of a table?", "choices": ["DESCRIBE table;", "SHOW STRUCTURE table;", "SHOW COLUMNS table;", "TABLE STRUCTURE;"], "answer": "DESCRIBE table;"},
        {"question": "Which command changes a user's password?", "choices": ["ALTER USER", "CHANGE PASSWORD", "SET PASSWORD", "UPDATE USER"], "answer": "ALTER USER"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT u.name, o.amount FROM users u JOIN orders o ON u.id = o.user_id WHERE o.amount > 100 GROUP u.name;",
          "choices": [
            "A. Should be GROUP BY u.name",
            "B. JOIN should be INNER JOIN",
            "C. amount should be in quotes",
            "D. 100 should be '100'"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT * FROM users LEFT JOIN orders WHERE users.id = orders.user_id;",
          "choices": [
            "A. LEFT JOIN requires ON, not WHERE, for join condition",
            "B. users should be user",
            "C. orders should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name FROM users WHERE age IN 20, 30;",
          "choices": [
            "A. Should be IN (20, 30)",
            "B. age should be in quotes",
            "C. users should be user",
            "D. 20, 30 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nSELECT name, COUNT(*) FROM users;",
          "choices": [
            "A. Should use GROUP BY name",
            "B. COUNT should be SUM",
            "C. name should be in quotes",
            "D. users should be user"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT * FROM users WHERE EXISTS SELECT * FROM orders WHERE users.id = orders.user_id;",
          "choices": [
            "A. EXISTS requires parentheses around the subquery",
            "B. WHERE should be HAVING",
            "C. users should be user",
            "D. * should be columns"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL joins users and orders on user id?",
          "choices": [
            "A. SELECT * FROM users u JOIN orders o ON u.id = o.user_id;",
            "B. SELECT * FROM users u, orders o WHERE u.id = o.user_id;",
            "C. SELECT * FROM users u LEFT JOIN orders o ON u.id = o.user_id;",
            "D. SELECT * FROM users u RIGHT JOIN orders o ON u.id = o.user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects the maximum age from users?",
          "choices": [
            "A. SELECT MAX(age) FROM users;",
            "B. SELECT age FROM users MAX();",
            "C. SELECT * FROM users WHERE age = MAX;",
            "D. SELECT MAX FROM users age;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users who have orders?",
          "choices": [
            "A. SELECT * FROM users WHERE EXISTS (SELECT * FROM orders WHERE users.id = orders.user_id);",
            "B. SELECT * FROM users WHERE orders.id IS NOT NULL;",
            "C. SELECT * FROM users JOIN orders;",
            "D. SELECT * FROM users WHERE users.id = orders.user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL counts the number of orders per user?",
          "choices": [
            "A. SELECT user_id, COUNT(*) FROM orders GROUP BY user_id;",
            "B. SELECT COUNT(*) FROM orders;",
            "C. SELECT user_id FROM orders;",
            "D. SELECT * FROM orders GROUP user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users with no orders?",
          "choices": [
            "A. SELECT * FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE o.id IS NULL;",
            "B. SELECT * FROM users WHERE orders.id IS NULL;",
            "C. SELECT * FROM users u RIGHT JOIN orders o ON u.id = o.user_id WHERE o.id IS NULL;",
            "D. SELECT * FROM users WHERE NOT EXISTS (SELECT * FROM orders WHERE users.id = orders.user_id);"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "PostgreSQL": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command starts the PostgreSQL shell?", "choices": ["psql", "mysql", "mongo", "sqlplus"], "answer": "psql"},
        {"question": "Which command lists all databases?", "choices": ["\\l", "SHOW DATABASES;", "LIST DATABASES;", "DATABASES;"], "answer": "\\l"},
        {"question": "Which command connects to a database?", "choices": ["\\c dbname", "USE dbname;", "CONNECT dbname;", "SELECT dbname;"], "answer": "\\c dbname"},
        {"question": "Which command lists all tables?", "choices": ["\\dt", "SHOW TABLES;", "LIST TABLES;", "TABLES;"], "answer": "\\dt"},
        {"question": "Which data type is used for text in PostgreSQL?", "choices": ["VARCHAR", "INT", "FLOAT", "DATE"], "answer": "VARCHAR"},
        {"question": "Which command creates a table?", "choices": ["CREATE TABLE", "NEW TABLE", "MAKE TABLE", "ADD TABLE"], "answer": "CREATE TABLE"},
        {"question": "Which command inserts data into a table?", "choices": ["INSERT INTO", "ADD TO", "PUT INTO", "APPEND TO"], "answer": "INSERT INTO"},
        {"question": "Which command retrieves all rows from a table?", "choices": ["SELECT * FROM table;", "GET ALL FROM table;", "SHOW table;", "FETCH table;"], "answer": "SELECT * FROM table;"},
        {"question": "Which command deletes a table?", "choices": ["DROP TABLE", "REMOVE TABLE", "DELETE TABLE", "DESTROY TABLE"], "answer": "DROP TABLE"},
        {"question": "Which command updates data in a table?", "choices": ["UPDATE", "MODIFY", "CHANGE", "EDIT"], "answer": "UPDATE"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this SQL?\n\nSELECT name age FROM users;",
        "choices": [
          "A. Missing comma between columns",
          "B. FROM should be WHERE",
          "C. name should be in quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this SQL?\n\nINSERT INTO users (name, age VALUES ('Alice', 25);",
        "choices": [
          "A. Missing closing parenthesis after age",
          "B. VALUES should be VALUE",
          "C. 'Alice' should be in double quotes",
          "D. 25 should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nUPDATE users SET name = 'Bob' age = 30 WHERE id = 1;",
        "choices": [
          "A. Missing comma between assignments",
          "B. SET should be WHERE",
          "C. id should be in quotes",
          "D. 1 should be '1'"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug?\n\nDELETE users WHERE id = 2;",
        "choices": [
          "A. Should be DELETE FROM users WHERE id = 2",
          "B. WHERE should be SET",
          "C. id should be in quotes",
          "D. 2 should be '2'"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nSELECT * FORM users;",
        "choices": [
          "A. FORM should be FROM",
          "B. * should be columns",
          "C. users should be user",
          "D. SELECT should be select"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which SQL selects all columns from the 'users' table?",
        "choices": [
          "A. SELECT * FROM users;",
          "B. SELECT users FROM *;",
          "C. SELECT ALL FROM users;",
          "D. SELECT * users;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL inserts a new user named 'Alice' aged 25?",
        "choices": [
          "A. INSERT INTO users (name, age) VALUES ('Alice', 25);",
          "B. INSERT users (name, age) VALUES ('Alice', 25);",
          "C. INSERT INTO users VALUES ('Alice', 25);",
          "D. INSERT INTO users (name, age) VALUE ('Alice', 25);"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL updates the age of user with id 1 to 30?",
        "choices": [
          "A. UPDATE users SET age = 30 WHERE id = 1;",
          "B. UPDATE users age = 30 WHERE id = 1;",
          "C. UPDATE users SET age = 30;",
          "D. UPDATE users WHERE id = 1 SET age = 30;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL deletes the user with id 2?",
        "choices": [
          "A. DELETE FROM users WHERE id = 2;",
          "B. DELETE users WHERE id = 2;",
          "C. DELETE FROM users id = 2;",
          "D. DELETE WHERE id = 2 FROM users;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL selects only the 'name' column from 'users'?",
        "choices": [
          "A. SELECT name FROM users;",
          "B. SELECT users FROM name;",
          "C. SELECT * FROM users name;",
          "D. SELECT name users;"
        ],
        "answer": "A"
      }
    ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which command adds a column to a table?", "choices": ["ALTER TABLE", "ADD COLUMN", "MODIFY TABLE", "CHANGE TABLE"], "answer": "ALTER TABLE"},
        {"question": "Which command removes a column from a table?", "choices": ["ALTER TABLE ... DROP COLUMN", "REMOVE COLUMN", "DELETE COLUMN", "DROP COLUMN"], "answer": "ALTER TABLE ... DROP COLUMN"},
        {"question": "Which command creates an index?", "choices": ["CREATE INDEX", "NEW INDEX", "MAKE INDEX", "ADD INDEX"], "answer": "CREATE INDEX"},
        {"question": "Which command adds a foreign key?", "choices": ["ALTER TABLE ... ADD CONSTRAINT", "ADD FOREIGN KEY", "NEW FOREIGN KEY", "CREATE FOREIGN KEY"], "answer": "ALTER TABLE ... ADD CONSTRAINT"},
        {"question": "Which command deletes all rows from a table?", "choices": ["DELETE FROM table;", "REMOVE ALL FROM table;", "DROP ALL FROM table;", "CLEAR table;"], "answer": "DELETE FROM table;"},
        {"question": "Which function counts rows in a table?", "choices": ["COUNT(*)", "SUM(*)", "TOTAL()", "ROWS()"], "answer": "COUNT(*)"},
        {"question": "Which clause sorts results?", "choices": ["ORDER BY", "SORT BY", "GROUP BY", "ARRANGE BY"], "answer": "ORDER BY"},
        {"question": "Which clause groups rows?", "choices": ["GROUP BY", "ORDER BY", "SORT BY", "COLLECT BY"], "answer": "GROUP BY"},
        {"question": "Which function returns the maximum value?", "choices": ["MAX()", "MIN()", "GREATEST()", "HIGHEST()"], "answer": "MAX()"},
        {"question": "Which function returns the minimum value?", "choices": ["MIN()", "MAX()", "LEAST()", "LOWEST()"], "answer": "MIN()"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT COUNT name FROM users;",
          "choices": [
            "A. COUNT should be COUNT(name) with parentheses",
            "B. name should be in quotes",
            "C. users should be user",
            "D. SELECT should be select"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT * FROM users WHERE age >;",
          "choices": [
            "A. Missing value after >",
            "B. WHERE should be SET",
            "C. age should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name, age FROM users ORDER name;",
          "choices": [
            "A. Should be ORDER BY name",
            "B. name should be in quotes",
            "C. users should be user",
            "D. age should be string"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nSELECT * FROM users GROUP age;",
          "choices": [
            "A. Should be GROUP BY age",
            "B. GROUP should be ORDER",
            "C. age should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name FROM users WHERE age BETWEEN 20 30;",
          "choices": [
            "A. Should be BETWEEN 20 AND 30",
            "B. age should be in quotes",
            "C. users should be user",
            "D. 20 30 should be in parentheses"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL counts the number of users?",
          "choices": [
            "A. SELECT COUNT(*) FROM users;",
            "B. SELECT COUNT(users) FROM *;",
            "C. SELECT users FROM COUNT(*);",
            "D. SELECT * FROM users COUNT();"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users older than 18?",
          "choices": [
            "A. SELECT * FROM users WHERE age > 18;",
            "B. SELECT * FROM users WHERE age = 18;",
            "C. SELECT * FROM users WHERE age < 18;",
            "D. SELECT * FROM users WHERE age >= 18;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL orders users by name ascending?",
          "choices": [
            "A. SELECT * FROM users ORDER BY name ASC;",
            "B. SELECT * FROM users ORDER name ASC;",
            "C. SELECT * FROM users ORDER BY ASC name;",
            "D. SELECT * FROM users ORDER name;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL groups users by age?",
          "choices": [
            "A. SELECT age, COUNT(*) FROM users GROUP BY age;",
            "B. SELECT * FROM users GROUP age;",
            "C. SELECT age FROM users GROUP BY;",
            "D. SELECT * FROM users GROUP age BY;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users with age between 20 and 30?",
          "choices": [
            "A. SELECT * FROM users WHERE age BETWEEN 20 AND 30;",
            "B. SELECT * FROM users WHERE age = 20 OR age = 30;",
            "C. SELECT * FROM users WHERE age > 20 AND age < 30;",
            "D. SELECT * FROM users WHERE age IN (20, 30);"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command creates a stored procedure?", "choices": ["CREATE PROCEDURE", "NEW PROCEDURE", "MAKE PROCEDURE", "ADD PROCEDURE"], "answer": "CREATE PROCEDURE"},
        {"question": "Which command creates a trigger?", "choices": ["CREATE TRIGGER", "NEW TRIGGER", "MAKE TRIGGER", "ADD TRIGGER"], "answer": "CREATE TRIGGER"},
        {"question": "Which command creates a view?", "choices": ["CREATE VIEW", "NEW VIEW", "MAKE VIEW", "ADD VIEW"], "answer": "CREATE VIEW"},
        {"question": "Which command grants privileges to a user?", "choices": ["GRANT", "GIVE", "ALLOW", "PERMIT"], "answer": "GRANT"},
        {"question": "Which command revokes privileges from a user?", "choices": ["REVOKE", "REMOVE", "TAKE", "DENY"], "answer": "REVOKE"},
        {"question": "Which command creates a user?", "choices": ["CREATE USER", "NEW USER", "ADD USER", "MAKE USER"], "answer": "CREATE USER"},
        {"question": "Which command backs up a database?", "choices": ["pg_dump", "mysqldump", "backupdb", "dumpdb"], "answer": "pg_dump"},
        {"question": "Which command restores a database from a backup?", "choices": ["psql", "restoredb", "importdb", "pg_dump"], "answer": "psql"},
        {"question": "Which command shows the structure of a table?", "choices": ["\\d table", "SHOW STRUCTURE table", "SHOW COLUMNS table", "TABLE STRUCTURE"], "answer": "\\d table"},
        {"question": "Which command changes a user's password?", "choices": ["ALTER USER", "CHANGE PASSWORD", "SET PASSWORD", "UPDATE USER"], "answer": "ALTER USER"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT u.name, o.amount FROM users u JOIN orders o ON u.id = o.user_id WHERE o.amount > 100 GROUP u.name;",
          "choices": [
            "A. Should be GROUP BY u.name",
            "B. JOIN should be INNER JOIN",
            "C. amount should be in quotes",
            "D. 100 should be '100'"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT * FROM users LEFT JOIN orders WHERE users.id = orders.user_id;",
          "choices": [
            "A. LEFT JOIN requires ON, not WHERE, for join condition",
            "B. users should be user",
            "C. orders should be in quotes",
            "D. * should be columns"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT name FROM users WHERE age IN 20, 30;",
          "choices": [
            "A. Should be IN (20, 30)",
            "B. age should be in quotes",
            "C. users should be user",
            "D. 20, 30 should be in quotes"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug?\n\nSELECT name, COUNT(*) FROM users;",
          "choices": [
            "A. Should use GROUP BY name",
            "B. COUNT should be SUM",
            "C. name should be in quotes",
            "D. users should be user"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT * FROM users WHERE EXISTS SELECT * FROM orders WHERE users.id = orders.user_id;",
          "choices": [
            "A. EXISTS requires parentheses around the subquery",
            "B. WHERE should be HAVING",
            "C. users should be user",
            "D. * should be columns"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL joins users and orders on user id?",
          "choices": [
            "A. SELECT * FROM users u JOIN orders o ON u.id = o.user_id;",
            "B. SELECT * FROM users u, orders o WHERE u.id = o.user_id;",
            "C. SELECT * FROM users u LEFT JOIN orders o ON u.id = o.user_id;",
            "D. SELECT * FROM users u RIGHT JOIN orders o ON u.id = o.user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects the maximum age from users?",
          "choices": [
            "A. SELECT MAX(age) FROM users;",
            "B. SELECT age FROM users MAX();",
            "C. SELECT * FROM users WHERE age = MAX;",
            "D. SELECT MAX FROM users age;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users who have orders?",
          "choices": [
            "A. SELECT * FROM users WHERE EXISTS (SELECT * FROM orders WHERE users.id = orders.user_id);",
            "B. SELECT * FROM users WHERE orders.id IS NOT NULL;",
            "C. SELECT * FROM users JOIN orders;",
            "D. SELECT * FROM users WHERE users.id = orders.user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL counts the number of orders per user?",
          "choices": [
            "A. SELECT user_id, COUNT(*) FROM orders GROUP BY user_id;",
            "B. SELECT COUNT(*) FROM orders;",
            "C. SELECT user_id FROM orders;",
            "D. SELECT * FROM orders GROUP user_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL selects users with no orders?",
          "choices": [
            "A. SELECT * FROM users u LEFT JOIN orders o ON u.id = o.user_id WHERE o.id IS NULL;",
            "B. SELECT * FROM users WHERE orders.id IS NULL;",
            "C. SELECT * FROM users u RIGHT JOIN orders o ON u.id = o.user_id WHERE o.id IS NULL;",
            "D. SELECT * FROM users WHERE NOT EXISTS (SELECT * FROM orders WHERE users.id = orders.user_id);"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "Oracle Database": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command connects to Oracle DB?", "choices": ["sqlplus", "psql", "mysql", "mongo"], "answer": "sqlplus"},
        {"question": "Which command lists all tables in Oracle?", "choices": ["SELECT table_name FROM user_tables;", "SHOW TABLES;", "LIST TABLES;", "TABLES;"], "answer": "SELECT table_name FROM user_tables;"},
        {"question": "Which command shows all databases in Oracle?", "choices": ["SELECT name FROM v$database;", "SHOW DATABASES;", "LIST DATABASES;", "DATABASES;"], "answer": "SELECT name FROM v$database;"},
        {"question": "Which data type is used for text in Oracle?", "choices": ["VARCHAR2", "VARCHAR", "TEXT", "CHARACTER"], "answer": "VARCHAR2"},
        {"question": "Which command creates a table?", "choices": ["CREATE TABLE", "NEW TABLE", "MAKE TABLE", "ADD TABLE"], "answer": "CREATE TABLE"},
        {"question": "Which command inserts data into a table?", "choices": ["INSERT INTO", "ADD TO", "PUT INTO", "APPEND TO"], "answer": "INSERT INTO"},
        {"question": "Which command retrieves all rows from a table?", "choices": ["SELECT * FROM table", "GET ALL FROM table", "SHOW table", "FETCH table"], "answer": "SELECT * FROM table"},
        {"question": "Which command deletes a table?", "choices": ["DROP TABLE", "REMOVE TABLE", "DELETE TABLE", "DESTROY TABLE"], "answer": "DROP TABLE"},
        {"question": "Which command updates data in a table?", "choices": ["UPDATE", "MODIFY", "CHANGE", "EDIT"], "answer": "UPDATE"},
        {"question": "Which command creates a user in Oracle?", "choices": ["CREATE USER", "NEW USER", "ADD USER", "MAKE USER"], "answer": "CREATE USER"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this SQL?\n\nSELECT name age FROM employees;",
        "choices": [
          "A. Missing comma between columns",
          "B. FROM should be WHERE",
          "C. name should be in quotes",
          "D. employees should be employee"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this SQL?\n\nINSERT INTO employees (name, age VALUES ('Alice', 25);",
        "choices": [
          "A. Missing closing parenthesis after columns",
          "B. VALUES should be VALUE",
          "C. 'Alice' should be in double quotes",
          "D. age should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nUPDATE employees SET name = 'Bob' age = 30 WHERE id = 1;",
        "choices": [
          "A. Missing comma between assignments",
          "B. SET should be WHERE",
          "C. id should be in quotes",
          "D. 1 should be '1'"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this SQL?\n\nDELETE employees WHERE id = 2;",
        "choices": [
          "A. Missing FROM keyword",
          "B. WHERE should be SET",
          "C. id should be employee_id",
          "D. 2 should be '2'"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this SQL?\n\nSELECT * FORM employees;",
        "choices": [
          "A. FORM should be FROM",
          "B. * should be all",
          "C. employees should be employee",
          "D. SELECT should be select"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which SQL will select all columns from the employees table?",
        "choices": [
          "A. SELECT * FROM employees;",
          "B. SELECT employees FROM *;",
          "C. SELECT ALL FROM employees;",
          "D. SELECT * employees;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL will insert a new employee named 'John' aged 28?",
        "choices": [
          "A. INSERT INTO employees (name, age) VALUES ('John', 28);",
          "B. INSERT employees VALUES ('John', 28);",
          "C. ADD INTO employees (name, age) VALUES ('John', 28);",
          "D. INSERT INTO employees VALUES name = 'John', age = 28;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL will update the age of employee with id 3 to 35?",
        "choices": [
          "A. UPDATE employees SET age = 35 WHERE id = 3;",
          "B. UPDATE employees age = 35 WHERE id = 3;",
          "C. SET age = 35 WHERE id = 3 IN employees;",
          "D. UPDATE employees WHERE id = 3 SET age = 35;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL will delete the employee with id 4?",
        "choices": [
          "A. DELETE FROM employees WHERE id = 4;",
          "B. REMOVE FROM employees WHERE id = 4;",
          "C. DELETE employees WHERE id = 4;",
          "D. DELETE FROM employees id = 4;"
        ],
        "answer": "A"
      },
      {
        "question": "Which SQL will select only the name column from employees?",
        "choices": [
          "A. SELECT name FROM employees;",
          "B. SELECT employees FROM name;",
          "C. SELECT * FROM employees WHERE name;",
          "D. SELECT name employees;"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which command adds a column to a table?", "choices": ["ALTER TABLE", "ADD COLUMN", "MODIFY TABLE", "CHANGE TABLE"], "answer": "ALTER TABLE"},
        {"question": "Which command removes a column from a table?", "choices": ["ALTER TABLE ... DROP COLUMN", "REMOVE COLUMN", "DELETE COLUMN", "DROP COLUMN"], "answer": "ALTER TABLE ... DROP COLUMN"},
        {"question": "Which command creates an index?", "choices": ["CREATE INDEX", "NEW INDEX", "MAKE INDEX", "ADD INDEX"], "answer": "CREATE INDEX"},
        {"question": "Which command adds a foreign key?", "choices": ["ALTER TABLE ... ADD CONSTRAINT", "ADD FOREIGN KEY", "NEW FOREIGN KEY", "CREATE FOREIGN KEY"], "answer": "ALTER TABLE ... ADD CONSTRAINT"},
        {"question": "Which command deletes all rows from a table?", "choices": ["DELETE FROM table", "REMOVE ALL FROM table", "DROP ALL FROM table", "CLEAR table"], "answer": "DELETE FROM table"},
        {"question": "Which function counts rows in a table?", "choices": ["COUNT(*)", "SUM(*)", "TOTAL()", "ROWS()"], "answer": "COUNT(*)"},
        {"question": "Which clause sorts results?", "choices": ["ORDER BY", "SORT BY", "GROUP BY", "ARRANGE BY"], "answer": "ORDER BY"},
        {"question": "Which clause groups rows?", "choices": ["GROUP BY", "ORDER BY", "SORT BY", "COLLECT BY"], "answer": "GROUP BY"},
        {"question": "Which function returns the maximum value?", "choices": ["MAX()", "MIN()", "GREATEST()", "HIGHEST()"], "answer": "MAX()"},
        {"question": "Which function returns the minimum value?", "choices": ["MIN()", "MAX()", "LEAST()", "LOWEST()"], "answer": "MIN()"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this PL/SQL block?\n\nBEGIN\n  x := 10;\n  DBMS_OUTPUT.PUT_LINE(x);\nEND;",
          "choices": [
            "A. Missing DECLARE section for variable x",
            "B. Missing semicolon after END",
            "C. DBMS_OUTPUT should be dbms_output",
            "D. x should be a string"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nSELECT COUNT(*) AS total FROM employees GROUP BY;",
          "choices": [
            "A. GROUP BY should specify a column",
            "B. COUNT should be COUNT(1)",
            "C. total should be in quotes",
            "D. FROM should be WHERE"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this join?\n\nSELECT e.name, d.name FROM employees e JOIN departments d ON e.dept_id = d.id",
          "choices": [
            "A. Missing semicolon at the end",
            "B. Should use LEFT JOIN",
            "C. d.id should be d.dept_id",
            "D. e.name should be employee_name"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this PL/SQL?\n\nDECLARE\n  total NUMBER;\nBEGIN\n  SELECT COUNT(*) INTO total employees;\n  DBMS_OUTPUT.PUT_LINE(total);\nEND;",
          "choices": [
            "A. Missing FROM keyword in SELECT",
            "B. total should be initialized",
            "C. DBMS_OUTPUT should be print",
            "D. employees should be employee"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this function call?\n\nSELECT get_salary(101) FROM dual;",
          "choices": [
            "A. Nothing, this is correct",
            "B. FROM should be WHERE",
            "C. get_salary should be GET_SALARY",
            "D. dual should be DUAL"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which PL/SQL block will print 'Hello Oracle'?",
          "choices": [
            "A. BEGIN DBMS_OUTPUT.PUT_LINE('Hello Oracle'); END;",
            "B. PRINT 'Hello Oracle';",
            "C. DBMS_OUTPUT('Hello Oracle');",
            "D. BEGIN PRINT('Hello Oracle'); END;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will count the number of employees in each department?",
          "choices": [
            "A. SELECT dept_id, COUNT(*) FROM employees GROUP BY dept_id;",
            "B. SELECT COUNT(*) FROM employees;",
            "C. SELECT dept_id, COUNT(*) FROM employees;",
            "D. SELECT COUNT(dept_id) FROM employees GROUP BY dept_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will join employees and departments on dept_id?",
          "choices": [
            "A. SELECT e.name, d.name FROM employees e JOIN departments d ON e.dept_id = d.id;",
            "B. SELECT * FROM employees, departments;",
            "C. SELECT e.name, d.name FROM employees e, departments d;",
            "D. SELECT e.name, d.name FROM employees e JOIN departments d;"
          ],
          "answer": "A"
        },
        {
          "question": "Which PL/SQL block declares a variable and assigns it a value?",
          "choices": [
            "A. DECLARE x NUMBER := 5; BEGIN NULL; END;",
            "B. x := 5;",
            "C. DECLARE x := 5; BEGIN NULL; END;",
            "D. BEGIN x := 5; END;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will select employees with age greater than 30?",
          "choices": [
            "A. SELECT * FROM employees WHERE age > 30;",
            "B. SELECT * FROM employees WHERE age >= 30;",
            "C. SELECT * FROM employees WHERE age < 30;",
            "D. SELECT * FROM employees WHERE age = 30;"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command creates a stored procedure?", "choices": ["CREATE PROCEDURE", "NEW PROCEDURE", "MAKE PROCEDURE", "ADD PROCEDURE"], "answer": "CREATE PROCEDURE"},
        {"question": "Which command creates a trigger?", "choices": ["CREATE TRIGGER", "NEW TRIGGER", "MAKE TRIGGER", "ADD TRIGGER"], "answer": "CREATE TRIGGER"},
        {"question": "Which command creates a view?", "choices": ["CREATE VIEW", "NEW VIEW", "MAKE VIEW", "ADD VIEW"], "answer": "CREATE VIEW"},
        {"question": "Which command grants privileges to a user?", "choices": ["GRANT", "GIVE", "ALLOW", "PERMIT"], "answer": "GRANT"},
        {"question": "Which command revokes privileges from a user?", "choices": ["REVOKE", "REMOVE", "TAKE", "DENY"], "answer": "REVOKE"},
        {"question": "Which command creates a user?", "choices": ["CREATE USER", "NEW USER", "ADD USER", "MAKE USER"], "answer": "CREATE USER"},
        {"question": "Which command backs up a database?", "choices": ["expdp", "mysqldump", "backupdb", "dumpdb"], "answer": "expdp"},
        {"question": "Which command restores a database from a backup?", "choices": ["impdp", "restoredb", "importdb", "expdp"], "answer": "impdp"},
        {"question": "Which command shows the structure of a table?", "choices": ["DESC table", "SHOW STRUCTURE table", "SHOW COLUMNS table", "TABLE STRUCTURE"], "answer": "DESC table"},
        {"question": "Which command changes a user's password?", "choices": ["ALTER USER", "CHANGE PASSWORD", "SET PASSWORD", "UPDATE USER"], "answer": "ALTER USER"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this trigger?\n\nCREATE OR REPLACE TRIGGER trg_update BEFORE UPDATE ON employees BEGIN :NEW.updated_at := SYSDATE; END;",
          "choices": [
            "A. Missing FOR EACH ROW clause",
            "B. SYSDATE should be CURRENT_DATE",
            "C. :NEW should be :new",
            "D. BEGIN should be DECLARE"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this procedure?\n\nCREATE OR REPLACE PROCEDURE add_employee(name VARCHAR2, age NUMBER) IS BEGIN INSERT INTO employees (name, age) VALUES (name, age); END;",
          "choices": [
            "A. Parameters should be referenced as variables with colon",
            "B. Missing semicolon after END",
            "C. name and age should be in quotes in VALUES",
            "D. IS should be AS"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this view creation?\n\nCREATE VIEW emp_view AS SELECT name, age employees;",
          "choices": [
            "A. Missing FROM keyword",
            "B. emp_view should be in quotes",
            "C. name should be employee_name",
            "D. SELECT should be select"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this cursor usage?\n\nDECLARE\n  CURSOR c IS SELECT * FROM employees;\nBEGIN\n  OPEN c;\n  FETCH c INTO r;\n  CLOSE c;\nEND;",
          "choices": [
            "A. Variable r is not declared",
            "B. c should be C",
            "C. employees should be employee",
            "D. FETCH should be SELECT"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this exception handling?\n\nBEGIN\n  x := 1/0;\nEXCEPTION\n  WHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE('Error');\nEND;",
          "choices": [
            "A. x is not declared",
            "B. OTHERS should be others",
            "C. DBMS_OUTPUT should be print",
            "D. 1/0 should be 1\\0"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL will create a view of employee names and ages?",
          "choices": [
            "A. CREATE VIEW emp_view AS SELECT name, age FROM employees;",
            "B. CREATE emp_view AS SELECT name, age FROM employees;",
            "C. CREATE VIEW emp_view SELECT name, age FROM employees;",
            "D. CREATE VIEW emp_view AS name, age FROM employees;"
          ],
          "answer": "A"
        },
        {
          "question": "Which PL/SQL block creates a trigger to update updated_at before update?",
          "choices": [
            "A. CREATE OR REPLACE TRIGGER trg_update BEFORE UPDATE ON employees FOR EACH ROW BEGIN :NEW.updated_at := SYSDATE; END;",
            "B. CREATE TRIGGER trg_update BEFORE UPDATE ON employees BEGIN :NEW.updated_at := SYSDATE; END;",
            "C. CREATE OR REPLACE TRIGGER trg_update AFTER UPDATE ON employees FOR EACH ROW BEGIN :NEW.updated_at := SYSDATE; END;",
            "D. CREATE OR REPLACE TRIGGER trg_update BEFORE UPDATE ON employees BEGIN :NEW.updated_at := SYSDATE; END;"
          ],
          "answer": "A"
        },
        {
          "question": "Which PL/SQL block declares and uses a cursor?",
          "choices": [
            "A. DECLARE CURSOR c IS SELECT * FROM employees; BEGIN OPEN c; FETCH c INTO r; CLOSE c; END;",
            "B. CURSOR c IS SELECT * FROM employees; OPEN c; FETCH c INTO r; CLOSE c;",
            "C. DECLARE c CURSOR IS SELECT * FROM employees; BEGIN OPEN c; FETCH c INTO r; CLOSE c; END;",
            "D. DECLARE CURSOR c SELECT * FROM employees; BEGIN OPEN c; FETCH c INTO r; CLOSE c; END;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will grant SELECT on employees to user 'bob'?",
          "choices": [
            "A. GRANT SELECT ON employees TO bob;",
            "B. GRANT SELECT employees TO bob;",
            "C. GRANT employees SELECT TO bob;",
            "D. GRANT SELECT TO bob ON employees;"
          ],
          "answer": "A"
        },
        {
          "question": "Which PL/SQL block handles division by zero exception?",
          "choices": [
            "A. BEGIN x := 1/0; EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error'); END;",
            "B. BEGIN x := 1/0; EXCEPTION WHEN ZERO_DIVIDE THEN DBMS_OUTPUT.PUT_LINE('Error'); END;",
            "C. BEGIN x := 1/0; EXCEPTION WHEN DIVIDE_BY_ZERO THEN DBMS_OUTPUT.PUT_LINE('Error'); END;",
            "D. BEGIN x := 1/0; EXCEPTION WHEN ERROR THEN DBMS_OUTPUT.PUT_LINE('Error'); END;"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "MongoDB": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command starts the MongoDB shell?", "choices": ["mongo", "psql", "mysql", "sqlplus"], "answer": "mongo"},
        {"question": "Which data format does MongoDB use for documents?", "choices": ["BSON", "JSON", "XML", "CSV"], "answer": "BSON"},
        {"question": "Which command lists all databases?", "choices": ["show dbs", "list databases", "db.list()", "show databases"], "answer": "show dbs"},
        {"question": "Which command lists all collections in a database?", "choices": ["show collections", "list collections", "db.listCollections()", "show tables"], "answer": "show collections"},
        {"question": "Which method inserts a document into a collection?", "choices": ["insertOne", "add", "put", "create"], "answer": "insertOne"},
        {"question": "Which method finds all documents in a collection?", "choices": ["find", "getAll", "select", "fetchAll"], "answer": "find"},
        {"question": "Which method deletes a document?", "choices": ["deleteOne", "remove", "delete", "drop"], "answer": "deleteOne"},
        {"question": "Which method updates a document?", "choices": ["updateOne", "modify", "change", "edit"], "answer": "updateOne"},
        {"question": "Which command drops a collection?", "choices": ["db.collection.drop()", "drop collection", "remove collection", "delete collection"], "answer": "db.collection.drop()"},
        {"question": "Which command switches to a database?", "choices": ["use dbname", "switch dbname", "db.use(dbname)", "select dbname"], "answer": "use dbname"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this insert command?\n\ndb.users.insert({name: 'Alice', age: 25);",
        "choices": [
          "A. Missing closing curly brace }",
          "B. insert should be insertOne",
          "C. name should be in double quotes",
          "D. age should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this find command?\n\ndb.users.find(name: 'Bob')",
        "choices": [
          "A. The query should be inside curly braces",
          "B. find should be findOne",
          "C. name should be in double quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this update command?\n\ndb.users.update({name: 'Alice'}, {$set: age: 26})",
        "choices": [
          "A. $set value should be an object",
          "B. update should be updateOne",
          "C. name should be in double quotes",
          "D. age should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this remove command?\n\ndb.users.remove(name: 'Charlie')",
        "choices": [
          "A. The query should be inside curly braces",
          "B. remove should be deleteOne",
          "C. name should be in double quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this projection?\n\ndb.users.find({}, name: 1, age: 1)",
        "choices": [
          "A. Projection should be in a separate object",
          "B. name should be in double quotes",
          "C. find should be findOne",
          "D. users should be user"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which command inserts a new user named 'John' aged 30?",
        "choices": [
          "A. db.users.insert({name: 'John', age: 30})",
          "B. db.users.add({name: 'John', age: 30})",
          "C. db.users.save({name: 'John', age: 30})",
          "D. db.users.create({name: 'John', age: 30})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command finds all users named 'Alice'?",
        "choices": [
          "A. db.users.find({name: 'Alice'})",
          "B. db.users.search({name: 'Alice'})",
          "C. db.users.get({name: 'Alice'})",
          "D. db.users.lookup({name: 'Alice'})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command updates the age of 'Bob' to 28?",
        "choices": [
          "A. db.users.update({name: 'Bob'}, {$set: {age: 28}})",
          "B. db.users.modify({name: 'Bob'}, {age: 28})",
          "C. db.users.set({name: 'Bob'}, {age: 28})",
          "D. db.users.updateOne({name: 'Bob'}, {age: 28})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command removes all users named 'Charlie'?",
        "choices": [
          "A. db.users.remove({name: 'Charlie'})",
          "B. db.users.delete({name: 'Charlie'})",
          "C. db.users.drop({name: 'Charlie'})",
          "D. db.users.removeOne({name: 'Charlie'})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command returns only the name and age fields for all users?",
        "choices": [
          "A. db.users.find({}, {name: 1, age: 1})",
          "B. db.users.find({name, age})",
          "C. db.users.select({name: 1, age: 1})",
          "D. db.users.find({fields: ['name', 'age']})"
        ],
        "answer": "A"
      }
    ]
  },
    "intermediate": {
    "multipleChoice": [
        {"question": "Which method updates multiple documents?", "choices": ["updateMany", "updateOne", "modifyMany", "changeAll"], "answer": "updateMany"},
        {"question": "Which method deletes multiple documents?", "choices": ["deleteMany", "deleteOne", "removeMany", "dropMany"], "answer": "deleteMany"},
        {"question": "Which method finds one document?", "choices": ["findOne", "find", "getOne", "selectOne"], "answer": "findOne"},
        {"question": "Which method creates an index?", "choices": ["createIndex", "addIndex", "makeIndex", "index"], "answer": "createIndex"},
        {"question": "Which method counts documents in a collection?", "choices": ["countDocuments", "count", "size", "length"], "answer": "countDocuments"},
        {"question": "Which method sorts documents?", "choices": ["sort", "orderBy", "arrange", "order"], "answer": "sort"},
        {"question": "Which method limits the number of results?", "choices": ["limit", "restrict", "max", "top"], "answer": "limit"},
        {"question": "Which method skips a number of results?", "choices": ["skip", "omit", "pass", "ignore"], "answer": "skip"},
        {"question": "Which method projects specific fields?", "choices": ["project", "select", "fields", "show"], "answer": "project"},
        {"question": "Which method performs an aggregation?", "choices": ["aggregate", "group", "sum", "collect"], "answer": "aggregate"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this aggregation pipeline?\n\ndb.orders.aggregate([{$group: _id: '$customer', total: {$sum: '$amount'}}])",
        "choices": [
          "A. $group stage should be an object",
          "B. _id and total should be inside curly braces",
          "C. aggregate should be aggregation",
          "D. orders should be order"
        ],
        "answer": "B"
      },
      {
        "question": "What is the bug in this index creation?\n\ndb.users.createIndex(name: 1)",
        "choices": [
          "A. Index keys should be inside curly braces",
          "B. createIndex should be createIndexes",
          "C. name should be in double quotes",
          "D. users should be user"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this $match stage?\n\ndb.sales.aggregate([{$match: region: 'East'}])",
        "choices": [
          "A. $match value should be an object",
          "B. region should be in double quotes",
          "C. aggregate should be aggregation",
          "D. sales should be sale"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this updateMany command?\n\ndb.products.updateMany({category: 'Books'}, $set: {discount: 0.1})",
        "choices": [
          "A. $set value should be inside curly braces",
          "B. updateMany should be update",
          "C. category should be in double quotes",
          "D. products should be product"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this $project stage?\n\ndb.users.aggregate([{$project: name: 1, age: 1}])",
        "choices": [
          "A. $project value should be an object",
          "B. name should be in double quotes",
          "C. aggregate should be aggregation",
          "D. users should be user"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which command creates an index on the email field?",
        "choices": [
          "A. db.users.createIndex({email: 1})",
          "B. db.users.addIndex({email: 1})",
          "C. db.users.index({email: 1})",
          "D. db.users.create({email: 1})"
        ],
        "answer": "A"
      },
      {
        "question": "Which aggregation pipeline groups orders by customer and sums the amount?",
        "choices": [
          "A. db.orders.aggregate([{$group: {_id: '$customer', total: {$sum: '$amount'}}}])",
          "B. db.orders.group({customer: 1, sum: 'amount'})",
          "C. db.orders.aggregate([{$sum: '$amount', group: '$customer'}])",
          "D. db.orders.aggregate([{$group: {customer: '$customer', total: '$amount'}}])"
        ],
        "answer": "A"
      },
      {
        "question": "Which command updates all users in 'NY' to have status 'active'?",
        "choices": [
          "A. db.users.updateMany({city: 'NY'}, {$set: {status: 'active'}})",
          "B. db.users.update({city: 'NY'}, {status: 'active'})",
          "C. db.users.modifyMany({city: 'NY'}, {$set: {status: 'active'}})",
          "D. db.users.updateAll({city: 'NY'}, {status: 'active'})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command finds all products with price greater than 100?",
        "choices": [
          "A. db.products.find({price: {$gt: 100}})",
          "B. db.products.find({price > 100})",
          "C. db.products.find(price: 100)",
          "D. db.products.find({price: $gt 100})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command removes all users with status 'inactive'?",
        "choices": [
          "A. db.users.deleteMany({status: 'inactive'})",
          "B. db.users.removeAll({status: 'inactive'})",
          "C. db.users.delete({status: 'inactive'})",
          "D. db.users.remove({status: 'inactive'})"
        ],
        "answer": "A"
      }
    ]
  },
    "advanced": {
    "multipleChoice": [
        {"question": "Which method performs a map-reduce operation?", "choices": ["mapReduce", "aggregate", "reduce", "map"], "answer": "mapReduce"},
        {"question": "Which method performs a bulk write?", "choices": ["bulkWrite", "writeMany", "multiWrite", "batchWrite"], "answer": "bulkWrite"},
        {"question": "Which method creates a capped collection?", "choices": ["create", "createCapped", "makeCapped", "capped"], "answer": "create"},
        {"question": "Which method drops a database?", "choices": ["dropDatabase", "dropDB", "removeDatabase", "deleteDatabase"], "answer": "dropDatabase"},
        {"question": "Which method renames a collection?", "choices": ["renameCollection", "changeName", "setName", "moveCollection"], "answer": "renameCollection"},
        {"question": "Which method creates a validation rule?", "choices": ["createCollection", "validate", "setValidation", "addRule"], "answer": "createCollection"},
        {"question": "Which method enables sharding?", "choices": ["enableSharding", "shard", "startSharding", "setSharding"], "answer": "enableSharding"},
        {"question": "Which method adds a shard?", "choices": ["addShard", "insertShard", "newShard", "createShard"], "answer": "addShard"},
        {"question": "Which method gets the current replica set status?", "choices": ["rs.status", "getStatus", "replicaStatus", "status"], "answer": "rs.status"},
        {"question": "Which method creates a text index?", "choices": ["createIndex", "textIndex", "addTextIndex", "makeTextIndex"], "answer": "createIndex"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this $lookup stage?\n\ndb.orders.aggregate([{$lookup: from: 'customers', localField: 'customer_id', foreignField: '_id', as: 'customer_info'}])",
        "choices": [
          "A. $lookup value should be an object",
          "B. from should be in double quotes",
          "C. orders should be order",
          "D. $lookup should be $join"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this transaction?\n\nsession.startTransaction()\ndb.accounts.updateOne({_id: 1}, {$inc: {balance: -100}}, {session})\ndb.accounts.updateOne({_id: 2}, {$inc: {balance: 100}}, {session})\nsession.commit()",
        "choices": [
          "A. commit should be commitTransaction",
          "B. updateOne should be update",
          "C. session should be transaction",
          "D. startTransaction should be begin"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this change stream?\n\ndb.collection.watch([{operationType: 'insert'}])",
        "choices": [
          "A. operationType should be inside $match",
          "B. watch should be observe",
          "C. collection should be in quotes",
          "D. insert should be insertOne"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this aggregation pipeline?\n\ndb.sales.aggregate([{$group: {_id: '$region', total: sum: '$amount'}}])",
        "choices": [
          "A. $sum should be an operator",
          "B. total should be inside curly braces",
          "C. sales should be sale",
          "D. group should be $group"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this schema validation?\n\ndb.createCollection('users', {validator: {name: {$type: 'string'}}})",
        "choices": [
          "A. validator should be an object with $jsonSchema",
          "B. name should be in double quotes",
          "C. createCollection should be create",
          "D. users should be user"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which command performs a left outer join between orders and customers?",
        "choices": [
          "A. db.orders.aggregate([{$lookup: {from: 'customers', localField: 'customer_id', foreignField: '_id', as: 'customer_info'}}])",
          "B. db.orders.join('customers', 'customer_id', '_id')",
          "C. db.orders.find({$join: 'customers'})",
          "D. db.orders.aggregate([{$join: {from: 'customers'}}])"
        ],
        "answer": "A"
      },
      {
        "question": "Which command starts a session and a transaction?",
        "choices": [
          "A. const session = db.getMongo().startSession(); session.startTransaction();",
          "B. db.startTransaction();",
          "C. session = db.startSession(); session.begin();",
          "D. db.session.start();"
        ],
        "answer": "A"
      },
      {
        "question": "Which command creates a change stream to watch inserts?",
        "choices": [
          "A. db.collection.watch([{$match: {operationType: 'insert'}}])",
          "B. db.collection.observe('insert')",
          "C. db.collection.watch('insert')",
          "D. db.collection.stream('insert')"
        ],
        "answer": "A"
      },
      {
        "question": "Which command creates a collection with JSON schema validation?",
        "choices": [
          "A. db.createCollection('users', {validator: {$jsonSchema: {bsonType: 'object', required: ['name'], properties: {name: {bsonType: 'string'}}}}})",
          "B. db.createCollection('users', {validator: {name: {$type: 'string'}}})",
          "C. db.create('users', {schema: {name: 'string'}})",
          "D. db.users.create({validator: {name: 'string'}})"
        ],
        "answer": "A"
      },
      {
        "question": "Which command uses an aggregation pipeline to group sales by region and sum the amount?",
        "choices": [
          "A. db.sales.aggregate([{$group: {_id: '$region', total: {$sum: '$amount'}}}])",
          "B. db.sales.group({region: 1, sum: 'amount'})",
          "C. db.sales.aggregate([{$sum: '$amount', group: '$region'}])",
          "D. db.sales.aggregate([{$group: {region: '$region', total: '$amount'}}])"
        ],
        "answer": "A"
      }
    ]
    }
  },
  "Redis": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which command sets a value in Redis?", "choices": ["SET", "GET", "PUT", "ADD"], "answer": "SET"},
        {"question": "Which command gets a value from Redis?", "choices": ["GET", "SET", "FETCH", "READ"], "answer": "GET"},
        {"question": "Which command deletes a key from Redis?", "choices": ["DEL", "DELETE", "REMOVE", "DROP"], "answer": "DEL"},
        {"question": "Which command checks if a key exists?", "choices": ["EXISTS", "CHECK", "HAS", "CONTAINS"], "answer": "EXISTS"},
        {"question": "Which command sets a key with expiration time?", "choices": ["SETEX", "EXPIRE", "TTL", "TIMEOUT"], "answer": "SETEX"},
        {"question": "Which command gets the type of a key?", "choices": ["TYPE", "KIND", "CATEGORY", "SORT"], "answer": "TYPE"},
        {"question": "Which command lists all keys matching a pattern?", "choices": ["KEYS", "LIST", "SHOW", "FIND"], "answer": "KEYS"},
        {"question": "Which command gets the time to live of a key?", "choices": ["TTL", "EXPIRE", "LIFETIME", "DURATION"], "answer": "TTL"},
        {"question": "Which command removes expiration from a key?", "choices": ["PERSIST", "REMOVE", "CLEAR", "DELETE"], "answer": "PERSIST"},
        {"question": "Which command renames a key?", "choices": ["RENAME", "MOVE", "CHANGE", "SETNAME"], "answer": "RENAME"}
    ],
    "debugging":[
      {
        "question": "What is wrong with this command?\n\nSET mykey 'value'",
        "choices": [
          "A. Should use double quotes or no quotes for value",
          "B. SET should be set",
          "C. mykey should be in quotes",
          "D. value should be a number"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this command?\n\nGET mykey value",
        "choices": [
          "A. GET only takes one argument (the key)",
          "B. value should be in quotes",
          "C. GET should be get",
          "D. mykey should be a number"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this command?\n\nDEL mykey, mykey2",
        "choices": [
          "A. Keys should be space-separated, not comma-separated",
          "B. DEL should be DELETE",
          "C. mykey2 should be in quotes",
          "D. DEL only deletes one key"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this command?\n\nINCRBY mykey",
        "choices": [
          "A. INCRBY requires a key and an increment value",
          "B. mykey should be a number",
          "C. INCRBY should be INCREMENT",
          "D. INCRBY only works on lists"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this command?\n\nSETEX mykey 60",
        "choices": [
          "A. SETEX requires a key, expiration, and value",
          "B. 60 should be in quotes",
          "C. SETEX should be SET",
          "D. mykey should be a number"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which command sets the value of 'foo' to 'bar'?",
        "choices": [
          "A. SET foo bar",
          "B. SET foo = bar",
          "C. set foo bar",
          "D. SET foo:bar"
        ],
        "answer": "A"
      },
      {
        "question": "Which command gets the value of 'foo'?",
        "choices": [
          "A. GET foo",
          "B. FETCH foo",
          "C. get foo",
          "D. GET:foo"
        ],
        "answer": "A"
      },
      {
        "question": "Which command deletes the key 'foo'?",
        "choices": [
          "A. DEL foo",
          "B. DELETE foo",
          "C. REMOVE foo",
          "D. DEL:foo"
        ],
        "answer": "A"
      },
      {
        "question": "Which command increments the value of 'counter' by 1?",
        "choices": [
          "A. INCR counter",
          "B. INCREMENT counter",
          "C. ADD counter 1",
          "D. INCRBY counter"
        ],
        "answer": "A"
      },
      {
        "question": "Which command sets 'foo' to 'bar' with an expiration of 10 seconds?",
        "choices": [
          "A. SETEX foo 10 bar",
          "B. SET foo bar 10",
          "C. SET foo bar EX 10",
          "D. SET foo 10 bar"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which command adds an element to a list?", "choices": ["LPUSH", "ADD", "INSERT", "APPEND"], "answer": "LPUSH"},
        {"question": "Which command removes an element from a list?", "choices": ["LPOP", "REMOVE", "DELETE", "TAKE"], "answer": "LPOP"},
        {"question": "Which command adds an element to a set?", "choices": ["SADD", "ADD", "INSERT", "PUSH"], "answer": "SADD"},
        {"question": "Which command removes an element from a set?", "choices": ["SREM", "REMOVE", "DELETE", "POP"], "answer": "SREM"},
        {"question": "Which command adds a field to a hash?", "choices": ["HSET", "SET", "ADD", "INSERT"], "answer": "HSET"},
        {"question": "Which command gets a field from a hash?", "choices": ["HGET", "GET", "FETCH", "READ"], "answer": "HGET"},
        {"question": "Which command adds an element to a sorted set?", "choices": ["ZADD", "ADD", "INSERT", "PUSH"], "answer": "ZADD"},
        {"question": "Which command gets the rank of an element in a sorted set?", "choices": ["ZRANK", "RANK", "POSITION", "INDEX"], "answer": "ZRANK"},
        {"question": "Which command gets the length of a list?", "choices": ["LLEN", "LENGTH", "SIZE", "COUNT"], "answer": "LLEN"},
        {"question": "Which command gets the size of a set?", "choices": ["SCARD", "SIZE", "LENGTH", "COUNT"], "answer": "SCARD"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this command?\n\nLPUSH mylist 1,2,3",
          "choices": [
            "A. Values should be space-separated, not comma-separated",
            "B. LPUSH should be RPUSH",
            "C. mylist should be in quotes",
            "D. LPUSH only takes one value"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\nLRANGE mylist 0",
          "choices": [
            "A. LRANGE requires a start and stop index",
            "B. mylist should be a number",
            "C. LRANGE should be RANGE",
            "D. LRANGE only works on sets"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nSADD myset 'a', 'b'",
          "choices": [
            "A. Values should be space-separated, not comma-separated",
            "B. SADD should be ADD",
            "C. myset should be in quotes",
            "D. SADD only works on lists"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\nHSET myhash field1",
          "choices": [
            "A. HSET requires a key, field, and value",
            "B. myhash should be a number",
            "C. HSET should be SET",
            "D. HSET only works on sets"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nZADD myzset 1 a, 2 b",
          "choices": [
            "A. Score-member pairs should be space-separated, not comma-separated",
            "B. ZADD should be ADD",
            "C. myzset should be in quotes",
            "D. ZADD only works on lists"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which command adds 'a', 'b', and 'c' to the list 'mylist'?",
          "choices": [
            "A. LPUSH mylist a b c",
            "B. LPUSH mylist 'a', 'b', 'c'",
            "C. ADD mylist a b c",
            "D. LPUSH mylist [a, b, c]"
          ],
          "answer": "A"
        },
        {
          "question": "Which command gets the first 3 elements of 'mylist'?",
          "choices": [
            "A. LRANGE mylist 0 2",
            "B. LRANGE mylist 1 3",
            "C. GET mylist 0 2",
            "D. LRANGE mylist 0 3"
          ],
          "answer": "A"
        },
        {
          "question": "Which command adds 'x' and 'y' to the set 'myset'?",
          "choices": [
            "A. SADD myset x y",
            "B. SADD myset 'x', 'y'",
            "C. ADD myset x y",
            "D. SADD myset [x, y]"
          ],
          "answer": "A"
        },
        {
          "question": "Which command sets the field 'age' to 25 in hash 'user:1'?",
          "choices": [
            "A. HSET user:1 age 25",
            "B. HSET user:1 'age' 25",
            "C. SET user:1 age 25",
            "D. HSET user:1 age=25"
          ],
          "answer": "A"
        },
        {
          "question": "Which command adds 'a' with score 1 and 'b' with score 2 to 'myzset'?",
          "choices": [
            "A. ZADD myzset 1 a 2 b",
            "B. ZADD myzset (1, a), (2, b)",
            "C. ZADD myzset 1:a 2:b",
            "D. ZADD myzset [1, a], [2, b]"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command executes a Lua script?", "choices": ["EVAL", "EXECUTE", "RUN", "SCRIPT"], "answer": "EVAL"},
        {"question": "Which command performs a transaction?", "choices": ["MULTI", "TRANSACTION", "BEGIN", "START"], "answer": "MULTI"},
        {"question": "Which command executes a transaction?", "choices": ["EXEC", "COMMIT", "END", "FINISH"], "answer": "EXEC"},
        {"question": "Which command discards a transaction?", "choices": ["DISCARD", "ROLLBACK", "CANCEL", "ABORT"], "answer": "DISCARD"},
        {"question": "Which command watches a key for changes?", "choices": ["WATCH", "MONITOR", "OBSERVE", "TRACK"], "answer": "WATCH"},
        {"question": "Which command creates a Redis cluster?", "choices": ["CLUSTER MEET", "CLUSTER CREATE", "CLUSTER ADD", "CLUSTER JOIN"], "answer": "CLUSTER MEET"},
        {"question": "Which command enables Redis persistence?", "choices": ["CONFIG SET", "SAVE", "PERSIST", "ENABLE"], "answer": "CONFIG SET"},
        {"question": "Which command creates a Redis replication?", "choices": ["SLAVEOF", "REPLICATE", "COPY", "MIRROR"], "answer": "SLAVEOF"},
        {"question": "Which command enables Redis pub/sub?", "choices": ["SUBSCRIBE", "PUBLISH", "CHANNEL", "TOPIC"], "answer": "SUBSCRIBE"},
        {"question": "Which command performs a Redis backup?", "choices": ["BGSAVE", "SAVE", "BACKUP", "DUMP"], "answer": "BGSAVE"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this transaction?\n\nMULTI\nSET foo bar\nGET foo\nCOMMIT",
          "choices": [
            "A. COMMIT should be EXEC",
            "B. MULTI should be TRANSACTION",
            "C. SET should be set",
            "D. GET should be get"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this Lua script?\n\nEVAL 'return redis.call('SET', 'foo', 'bar')' 0",
          "choices": [
            "A. Single quotes inside the script should be double quotes",
            "B. EVAL should be SCRIPT",
            "C. SET should be set",
            "D. 0 should be 1"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this pub/sub command?\n\nPUBLISH mychannel, 'hello'",
          "choices": [
            "A. Arguments should be space-separated, not comma-separated",
            "B. PUBLISH should be PUB",
            "C. mychannel should be in quotes",
            "D. 'hello' should be hello"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this command?\n\nBITOP AND destkey key1, key2",
          "choices": [
            "A. Keys should be space-separated, not comma-separated",
            "B. AND should be and",
            "C. destkey should be in quotes",
            "D. BITOP only works on lists"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this command?\n\nSCAN 0 MATCH user:* COUNT",
          "choices": [
            "A. COUNT requires a number after it",
            "B. SCAN should be scan",
            "C. user:* should be in quotes",
            "D. MATCH should be FILTER"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which sequence starts a transaction, sets 'foo' to 'bar', and executes it?",
          "choices": [
            "A. MULTI, SET foo bar, EXEC",
            "B. TRANSACTION, SET foo bar, COMMIT",
            "C. BEGIN, SET foo bar, END",
            "D. MULTI, SET foo bar, COMMIT"
          ],
          "answer": "A"
        },
        {
          "question": "Which command runs a Lua script to set 'foo' to 'bar'?",
          "choices": [
            "A. EVAL \"return redis.call('SET', 'foo', 'bar')\" 0",
            "B. SCRIPT \"SET foo bar\" 0",
            "C. LUA \"SET foo bar\" 0",
            "D. EVAL 'SET foo bar' 0"
          ],
          "answer": "A"
        },
        {
          "question": "Which command publishes 'hello' to 'mychannel'?",
          "choices": [
            "A. PUBLISH mychannel hello",
            "B. PUB mychannel hello",
            "C. PUBLISH 'mychannel' 'hello'",
            "D. PUBLISH mychannel, hello"
          ],
          "answer": "A"
        },
        {
          "question": "Which command performs a bitwise AND on key1 and key2, storing the result in destkey?",
          "choices": [
            "A. BITOP AND destkey key1 key2",
            "B. BITOP AND destkey, key1, key2",
            "C. BITOP OR destkey key1 key2",
            "D. BITOP AND destkey key1, key2"
          ],
          "answer": "A"
        },
        {
          "question": "Which command scans all keys matching 'user:*' with a count of 100?",
          "choices": [
            "A. SCAN 0 MATCH user:* COUNT 100",
            "B. SCAN 0 FILTER user:* LIMIT 100",
            "C. SCAN 0 user:* 100",
            "D. SCAN 0 MATCH user:* 100"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "DynamoDB": {
    "beginner": {
    "multipleChoice": [
        {"question": "Which company provides DynamoDB?", "choices": ["Amazon", "Google", "Microsoft", "Oracle"], "answer": "Amazon"},
        {"question": "Which command inserts an item in DynamoDB?", "choices": ["PutItem", "Insert", "AddItem", "CreateItem"], "answer": "PutItem"},
        {"question": "Which key uniquely identifies an item in DynamoDB?", "choices": ["Primary Key", "Foreign Key", "Index", "Sort Key"], "answer": "Primary Key"},
        {"question": "Which data format does DynamoDB use for items?", "choices": ["JSON", "XML", "CSV", "YAML"], "answer": "JSON"},
        {"question": "Which operation retrieves an item by key?", "choices": ["GetItem", "FetchItem", "ReadItem", "QueryItem"], "answer": "GetItem"},
        {"question": "Which operation retrieves all items from a table?", "choices": ["Scan", "Query", "GetAll", "FetchAll"], "answer": "Scan"},
        {"question": "Which AWS service is used to manage DynamoDB tables?", "choices": ["AWS Management Console", "AWS Lambda", "AWS S3", "AWS EC2"], "answer": "AWS Management Console"},
        {"question": "Which attribute type stores numbers in DynamoDB?", "choices": ["N", "S", "B", "BOOL"], "answer": "N"},
        {"question": "Which attribute type stores strings in DynamoDB?", "choices": ["S", "N", "B", "BOOL"], "answer": "S"},
        {"question": "Which operation deletes an item from a table?", "choices": ["DeleteItem", "RemoveItem", "DropItem", "EraseItem"], "answer": "DeleteItem"}
    ],
    "debugging": [
      {
        "question": "What is wrong with this PutItem request?\n\n{\n  TableName: 'Users',\n  Item: { id: 1, name: 'Alice' }\n}",
        "choices": [
          "A. Attribute values should be typed (e.g., { id: {N: '1'} })",
          "B. TableName should be Table",
          "C. name should be in double quotes",
          "D. id should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this GetItem request?\n\n{\n  TableName: 'Users',\n  Key: { id: 1 }\n}",
        "choices": [
          "A. Key values should be typed (e.g., { id: {N: '1'} })",
          "B. TableName should be Table",
          "C. id should be in double quotes",
          "D. Key should be Keys"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this UpdateItem request?\n\n{\n  TableName: 'Users',\n  Key: { id: {N: '1'} },\n  UpdateExpression: 'SET name = Alice'\n}",
        "choices": [
          "A. Attribute value in UpdateExpression should be :name",
          "B. SET should be UPDATE",
          "C. name should be in double quotes",
          "D. id should be a string"
        ],
        "answer": "A"
      },
      {
        "question": "What is the bug in this DeleteItem request?\n\n{\n  TableName: 'Users',\n  Key: { id: 1 }\n}",
        "choices": [
          "A. Key values should be typed (e.g., { id: {N: '1'} })",
          "B. TableName should be Table",
          "C. id should be a string",
          "D. Key should be Keys"
        ],
        "answer": "A"
      },
      {
        "question": "What is wrong with this Scan request?\n\n{\n  TableName: 'Users',\n  FilterExpression: 'age > 20'\n}",
        "choices": [
          "A. FilterExpression should use :age as a placeholder",
          "B. TableName should be Table",
          "C. age should be in double quotes",
          "D. Scan should be Find"
        ],
        "answer": "A"
      }
    ],
    "coding": [
      {
        "question": "Which request inserts a user with id 1 and name 'Bob'?",
        "choices": [
          "A. { TableName: 'Users', Item: { id: {N: '1'}, name: {S: 'Bob'} } }",
          "B. { Table: 'Users', Item: { id: 1, name: 'Bob' } }",
          "C. { TableName: 'Users', Items: { id: 1, name: 'Bob' } }",
          "D. { TableName: 'Users', Item: { id: 1, name: 'Bob' } }"
        ],
        "answer": "A"
      },
      {
        "question": "Which request gets the user with id 2?",
        "choices": [
          "A. { TableName: 'Users', Key: { id: {N: '2'} } }",
          "B. { Table: 'Users', Key: { id: 2 } }",
          "C. { TableName: 'Users', Keys: { id: 2 } }",
          "D. { TableName: 'Users', Key: { id: 2 } }"
        ],
        "answer": "A"
      },
      {
        "question": "Which request updates the name of user with id 3 to 'Carol'?",
        "choices": [
          "A. { TableName: 'Users', Key: { id: {N: '3'} }, UpdateExpression: 'SET #n = :name', ExpressionAttributeNames: { '#n': 'name' }, ExpressionAttributeValues: { ':name': {S: 'Carol'} } }",
          "B. { TableName: 'Users', Key: { id: {N: '3'} }, Update: { name: 'Carol' } }",
          "C. { Table: 'Users', Key: { id: 3 }, UpdateExpression: 'SET name = Carol' }",
          "D. { TableName: 'Users', Key: { id: 3 }, UpdateExpression: 'SET name = :name', ExpressionAttributeValues: { ':name': 'Carol' } }"
        ],
        "answer": "A"
      },
      {
        "question": "Which request deletes the user with id 4?",
        "choices": [
          "A. { TableName: 'Users', Key: { id: {N: '4'} } }",
          "B. { Table: 'Users', Key: { id: 4 } }",
          "C. { TableName: 'Users', Keys: { id: 4 } }",
          "D. { TableName: 'Users', Key: { id: 4 } }"
        ],
        "answer": "A"
      },
      {
        "question": "Which request scans for users with age greater than 25?",
        "choices": [
          "A. { TableName: 'Users', FilterExpression: 'age > :age', ExpressionAttributeValues: { ':age': {N: '25'} } }",
          "B. { TableName: 'Users', Filter: 'age > 25' }",
          "C. { Table: 'Users', FilterExpression: 'age > 25' }",
          "D. { TableName: 'Users', FilterExpression: 'age > 25' }"
        ],
        "answer": "A"
      }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which key allows sorting in DynamoDB tables?", "choices": ["Sort Key", "Primary Key", "Index Key", "Partition Key"], "answer": "Sort Key"},
        {"question": "Which operation retrieves items using a key condition expression?", "choices": ["Query", "Scan", "GetItem", "PutItem"], "answer": "Query"},
        {"question": "Which index allows efficient queries on non-key attributes?", "choices": ["Global Secondary Index", "Local Secondary Index", "Primary Index", "Sort Index"], "answer": "Global Secondary Index"},
        {"question": "Which index allows sorting on a different attribute?", "choices": ["Local Secondary Index", "Global Secondary Index", "Primary Index", "Sort Index"], "answer": "Local Secondary Index"},
        {"question": "Which data type stores binary data in DynamoDB?", "choices": ["B", "S", "N", "BOOL"], "answer": "B"},
        {"question": "Which operation updates an attribute value?", "choices": ["UpdateItem", "PutItem", "ModifyItem", "ChangeItem"], "answer": "UpdateItem"},
        {"question": "Which AWS CLI command creates a DynamoDB table?", "choices": ["aws dynamodb create-table", "aws dynamodb new-table", "aws dynamodb add-table", "aws dynamodb make-table"], "answer": "aws dynamodb create-table"},
        {"question": "Which attribute type stores boolean values?", "choices": ["BOOL", "B", "N", "S"], "answer": "BOOL"},
        {"question": "Which operation deletes all items in a table?", "choices": ["DeleteTable", "DeleteAll", "DropTable", "RemoveAll"], "answer": "DeleteTable"},
        {"question": "Which operation adds multiple items at once?", "choices": ["BatchWriteItem", "PutItem", "BulkInsert", "MultiPut"], "answer": "BatchWriteItem"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this BatchWriteItem request?\n\n{\n  RequestItems: { Users: [ { PutRequest: { Item: { id: 1, name: 'Alice' } } } ] }\n}",
          "choices": [
            "A. Attribute values should be typed (e.g., { id: {N: '1'} })",
            "B. RequestItems should be Items",
            "C. Users should be in quotes",
            "D. PutRequest should be Put"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this Query request?\n\n{\n  TableName: 'Users',\n  KeyConditionExpression: 'id = 1'\n}",
          "choices": [
            "A. KeyConditionExpression should use :id as a placeholder",
            "B. TableName should be Table",
            "C. id should be in double quotes",
            "D. Query should be Find"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this UpdateItem request?\n\n{\n  TableName: 'Users',\n  Key: { id: {N: '1'} },\n  UpdateExpression: 'SET name = :name',\n  ExpressionAttributeValues: { name: {S: 'Bob'} }\n}",
          "choices": [
            "A. ExpressionAttributeValues key should be ':name'",
            "B. name should be in double quotes",
            "C. SET should be UPDATE",
            "D. id should be a string"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this ConditionExpression?\n\n{\n  TableName: 'Users',\n  Key: { id: {N: '1'} },\n  ConditionExpression: 'age > 20'\n}",
          "choices": [
            "A. ConditionExpression should use :age as a placeholder",
            "B. TableName should be Table",
            "C. age should be in double quotes",
            "D. Condition should be Filter"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this ProjectionExpression?\n\n{\n  TableName: 'Users',\n  ProjectionExpression: 'name, age'\n}",
          "choices": [
            "A. If attribute names are reserved words, use ExpressionAttributeNames",
            "B. TableName should be Table",
            "C. name should be in double quotes",
            "D. Projection should be Select"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which request batch writes two users?",
          "choices": [
            "A. { RequestItems: { 'Users': [ { PutRequest: { Item: { id: {N: '1'}, name: {S: 'Alice'} } } }, { PutRequest: { Item: { id: {N: '2'}, name: {S: 'Bob'} } } } ] } }",
            "B. { Items: { 'Users': [ { id: 1, name: 'Alice' }, { id: 2, name: 'Bob' } ] } }",
            "C. { RequestItems: { 'Users': [ { id: 1, name: 'Alice' }, { id: 2, name: 'Bob' } ] } }",
            "D. { BatchWrite: { 'Users': [ { id: 1, name: 'Alice' }, { id: 2, name: 'Bob' } ] } }"
          ],
          "answer": "A"
        },
        {
          "question": "Which request queries users with id = 5?",
          "choices": [
            "A. { TableName: 'Users', KeyConditionExpression: 'id = :id', ExpressionAttributeValues: { ':id': {N: '5'} } }",
            "B. { TableName: 'Users', KeyCondition: 'id = 5' }",
            "C. { Table: 'Users', KeyConditionExpression: 'id = 5' }",
            "D. { TableName: 'Users', KeyConditionExpression: 'id = 5' }"
          ],
          "answer": "A"
        },
        {
          "question": "Which request updates the age of user with id 6 to 40 if their name is 'Eve'?",
          "choices": [
            "A. { TableName: 'Users', Key: { id: {N: '6'} }, UpdateExpression: 'SET age = :age', ConditionExpression: 'name = :name', ExpressionAttributeValues: { ':age': {N: '40'}, ':name': {S: 'Eve'} } }",
            "B. { TableName: 'Users', Key: { id: {N: '6'} }, Update: { age: 40 }, Condition: { name: 'Eve' } }",
            "C. { Table: 'Users', Key: { id: 6 }, UpdateExpression: 'SET age = 40', ConditionExpression: 'name = Eve' }",
            "D. { TableName: 'Users', Key: { id: 6 }, UpdateExpression: 'SET age = :age', ConditionExpression: 'name = :name', ExpressionAttributeValues: { ':age': 40, ':name': 'Eve' } }"
          ],
          "answer": "A"
        },
        {
          "question": "Which request scans for users with name 'Sam' and projects only the id?",
          "choices": [
            "A. { TableName: 'Users', FilterExpression: 'name = :name', ExpressionAttributeValues: { ':name': {S: 'Sam'} }, ProjectionExpression: 'id' }",
            "B. { TableName: 'Users', Filter: 'name = Sam', Projection: 'id' }",
            "C. { Table: 'Users', FilterExpression: 'name = :name', ProjectionExpression: 'id' }",
            "D. { TableName: 'Users', FilterExpression: 'name = Sam', ProjectionExpression: 'id' }"
          ],
          "answer": "A"
        },
        {
          "question": "Which request deletes user with id 7 only if age is 30?",
          "choices": [
            "A. { TableName: 'Users', Key: { id: {N: '7'} }, ConditionExpression: 'age = :age', ExpressionAttributeValues: { ':age': {N: '30'} } }",
            "B. { TableName: 'Users', Key: { id: {N: '7'} }, Condition: { age: 30 } }",
            "C. { Table: 'Users', Key: { id: 7 }, ConditionExpression: 'age = 30' }",
            "D. { TableName: 'Users', Key: { id: 7 }, ConditionExpression: 'age = :age', ExpressionAttributeValues: { ':age': 30 } }"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which feature provides point-in-time recovery for DynamoDB tables?", "choices": ["PITR", "Backup", "Restore", "Snapshot"], "answer": "PITR"},
        {"question": "Which operation streams changes from a DynamoDB table?", "choices": ["DynamoDB Streams", "ChangeFeed", "EventStream", "TableStream"], "answer": "DynamoDB Streams"},
        {"question": "Which consistency model is default in DynamoDB?", "choices": ["Eventually consistent", "Strongly consistent", "Read-after-write", "Immediate"], "answer": "Eventually consistent"},
        {"question": "Which operation restores a table from a backup?", "choices": ["RestoreTableFromBackup", "RestoreTable", "RecoverTable", "BackupRestore"], "answer": "RestoreTableFromBackup"},
        {"question": "Which feature automatically scales throughput?", "choices": ["Auto Scaling", "Manual Scaling", "Dynamic Scaling", "Elastic Scaling"], "answer": "Auto Scaling"},
        {"question": "Which operation enables TTL on a table?", "choices": ["UpdateTimeToLive", "SetTTL", "EnableTTL", "TTLOn"], "answer": "UpdateTimeToLive"},
        {"question": "Which operation enables encryption at rest?", "choices": ["EnableEncryption", "UpdateTable", "EncryptTable", "SetEncryption"], "answer": "UpdateTable"},
        {"question": "Which operation creates a global table?", "choices": ["CreateGlobalTable", "NewGlobalTable", "AddGlobalTable", "GlobalTableCreate"], "answer": "CreateGlobalTable"},
        {"question": "Which feature allows cross-region replication?", "choices": ["Global Tables", "Multi-Region", "Replication", "CrossRegion"], "answer": "Global Tables"},
        {"question": "Which operation lists all backups for a table?", "choices": ["ListBackups", "ShowBackups", "GetBackups", "DescribeBackups"], "answer": "ListBackups"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this Global Secondary Index definition?\n\n{\n  IndexName: 'AgeIndex',\n  KeySchema: [ { AttributeName: 'age', KeyType: 'HASH' } ],\n  Projection: { ProjectionType: 'ALL' }\n}",
          "choices": [
            "A. Attribute 'age' must be defined in AttributeDefinitions",
            "B. IndexName should be Index",
            "C. KeyType should be RANGE",
            "D. ProjectionType should be KEYS_ONLY"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this TransactWriteItems request?\n\n{\n  TransactItems: [ { Put: { TableName: 'Users', Item: { id: {N: '1'}, name: {S: 'Alice'} } } } ]\n}",
          "choices": [
            "A. TransactItems should be an array of objects with Put, Update, Delete, or ConditionCheck",
            "B. TableName should be Table",
            "C. id should be a string",
            "D. Put should be Insert"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this StreamSpecification?\n\n{\n  StreamEnabled: true,\n  StreamViewType: 'NEW_IMAGE'\n}",
          "choices": [
            "A. StreamSpecification should be an object containing StreamEnabled and StreamViewType",
            "B. StreamEnabled should be EnableStream",
            "C. StreamViewType should be NEW_AND_OLD_IMAGES",
            "D. StreamSpecification should be Stream"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this PartiQL statement?\n\nSELECT * FROM Users WHERE id = 1",
          "choices": [
            "A. The value 1 should be in single quotes",
            "B. SELECT should be select",
            "C. FROM should be from",
            "D. Users should be user"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this Time To Live (TTL) specification?\n\n{\n  TableName: 'Users',\n  TimeToLiveSpecification: { Enabled: true, AttributeName: 'expireAt' }\n}",
          "choices": [
            "A. AttributeName must exist in the table's schema",
            "B. Enabled should be EnableTTL",
            "C. expireAt should be in double quotes",
            "D. TimeToLiveSpecification should be TTL"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which request creates a global secondary index on 'age'?",
          "choices": [
            "A. { AttributeDefinitions: [ { AttributeName: 'age', AttributeType: 'N' } ], GlobalSecondaryIndexes: [ { IndexName: 'AgeIndex', KeySchema: [ { AttributeName: 'age', KeyType: 'HASH' } ], Projection: { ProjectionType: 'ALL' } } ] }",
            "B. { Index: 'AgeIndex', Key: 'age', Type: 'N' }",
            "C. { GlobalSecondaryIndexes: [ { IndexName: 'AgeIndex', KeySchema: [ { AttributeName: 'age', KeyType: 'HASH' } ] } ] }",
            "D. { AttributeDefinitions: [ { AttributeName: 'age', AttributeType: 'N' } ], Indexes: [ { IndexName: 'AgeIndex', KeySchema: [ { AttributeName: 'age', KeyType: 'HASH' } ] } ] }"
          ],
          "answer": "A"
        },
        {
          "question": "Which request performs a transactional write to insert two users?",
          "choices": [
            "A. { TransactItems: [ { Put: { TableName: 'Users', Item: { id: {N: '1'}, name: {S: 'Alice'} } } }, { Put: { TableName: 'Users', Item: { id: {N: '2'}, name: {S: 'Bob'} } } } ] }",
            "B. { BatchWrite: [ { TableName: 'Users', Item: { id: 1, name: 'Alice' } }, { TableName: 'Users', Item: { id: 2, name: 'Bob' } } ] }",
            "C. { TransactWrite: [ { TableName: 'Users', Item: { id: 1, name: 'Alice' } }, { TableName: 'Users', Item: { id: 2, name: 'Bob' } } ] }",
            "D. { TransactItems: [ { Insert: { TableName: 'Users', Item: { id: {N: '1'}, name: {S: 'Alice'} } } }, { Insert: { TableName: 'Users', Item: { id: {N: '2'}, name: {S: 'Bob'} } } } ] }"
          ],
          "answer": "A"
        },
        {
          "question": "Which request enables DynamoDB Streams for a table?",
          "choices": [
            "A. { TableName: 'Users', StreamSpecification: { StreamEnabled: true, StreamViewType: 'NEW_IMAGE' } }",
            "B. { Table: 'Users', Stream: true }",
            "C. { TableName: 'Users', EnableStream: true }",
            "D. { TableName: 'Users', StreamSpecification: { StreamEnabled: true } }"
          ],
          "answer": "A"
        },
        {
          "question": "Which PartiQL statement selects all users with age 30?",
          "choices": [
            "A. SELECT * FROM Users WHERE age = 30",
            "B. SELECT * FROM Users WHERE age == 30",
            "C. SELECT * FROM Users WHERE age: 30",
            "D. SELECT * FROM Users WHERE age = '30'"
          ],
          "answer": "A"
        },
        {
          "question": "Which request enables TTL on the 'expireAt' attribute?",
          "choices": [
            "A. { TableName: 'Users', TimeToLiveSpecification: { Enabled: true, AttributeName: 'expireAt' } }",
            "B. { Table: 'Users', TTL: { Enabled: true, Attribute: 'expireAt' } }",
            "C. { TableName: 'Users', TTL: { Enabled: true, AttributeName: 'expireAt' } }",
            "D. { TableName: 'Users', TimeToLive: { Enabled: true, AttributeName: 'expireAt' } }"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "sqlserver": {
    "beginner": {
      "multipleChoice": [
        {"question": "Which tool is commonly used to manage SQL Server databases?", "choices": ["SQL Server Management Studio", "phpMyAdmin", "Toad", "Oracle SQL Developer"], "answer": "SQL Server Management Studio"},
        {"question": "What is the default port for SQL Server?", "choices": ["1433", "3306", "1521", "5432"], "answer": "1433"},
        {"question": "Which data type is used to store whole numbers in SQL Server?", "choices": ["INT", "VARCHAR", "FLOAT", "DATE"], "answer": "INT"},
        {"question": "Which command is used to retrieve data from a table?", "choices": ["SELECT", "GET", "FETCH", "READ"], "answer": "SELECT"},
        {"question": "Which T-SQL statement adds a new row to a table?", "choices": ["INSERT INTO", "ADD ROW", "NEW ROW", "APPEND"], "answer": "INSERT INTO"},
        {"question": "Which function returns the current date and time in SQL Server?", "choices": ["GETDATE()", "NOW()", "CURRENT_DATE()", "SYSDATE()"], "answer": "GETDATE()"},
        {"question": "Which keyword is used to remove duplicate rows in a SELECT query?", "choices": ["DISTINCT", "UNIQUE", "ONLY", "DIFFERENT"], "answer": "DISTINCT"},
        {"question": "Which clause is used to filter results?", "choices": ["WHERE", "FILTER", "IF", "CONDITION"], "answer": "WHERE"},
        {"question": "Which command deletes all rows from a table but keeps the structure?", "choices": ["TRUNCATE TABLE", "DROP TABLE", "DELETE TABLE", "REMOVE ALL"], "answer": "TRUNCATE TABLE"},
        {"question": "Which command is used to change data in a table?", "choices": ["UPDATE", "MODIFY", "CHANGE", "EDIT"], "answer": "UPDATE"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this SQL?\n\nSELECT name age FROM Employees;",
          "choices": [
            "A. Missing comma between columns",
            "B. FROM should be WHERE",
            "C. name should be in quotes",
            "D. Employees should be Employee"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nINSERT INTO Employees (name, age VALUES ('Alice', 25);",
          "choices": [
            "A. Missing closing parenthesis after columns",
            "B. VALUES should be VALUE",
            "C. 'Alice' should be in double quotes",
            "D. age should be a string"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nUPDATE Employees SET name = 'Bob' age = 30 WHERE id = 1;",
          "choices": [
            "A. Missing comma between assignments",
            "B. SET should be WHERE",
            "C. id should be in quotes",
            "D. 1 should be '1'"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this SQL?\n\nDELETE Employees WHERE id = 2;",
          "choices": [
            "A. Missing FROM keyword",
            "B. WHERE should be SET",
            "C. id should be employee_id",
            "D. 2 should be '2'"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this SQL?\n\nSELECT * FORM Employees;",
          "choices": [
            "A. FORM should be FROM",
            "B. * should be all",
            "C. Employees should be Employee",
            "D. SELECT should be select"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL will select all columns from the Employees table?",
          "choices": [
            "A. SELECT * FROM Employees;",
            "B. SELECT Employees FROM *;",
            "C. SELECT ALL FROM Employees;",
            "D. SELECT * Employees;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will insert a new employee named 'John' aged 28?",
          "choices": [
            "A. INSERT INTO Employees (name, age) VALUES ('John', 28);",
            "B. INSERT Employees VALUES ('John', 28);",
            "C. ADD INTO Employees (name, age) VALUES ('John', 28);",
            "D. INSERT INTO Employees VALUES name = 'John', age = 28;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will update the age of employee with id 3 to 35?",
          "choices": [
            "A. UPDATE Employees SET age = 35 WHERE id = 3;",
            "B. UPDATE Employees age = 35 WHERE id = 3;",
            "C. SET age = 35 WHERE id = 3 IN Employees;",
            "D. UPDATE Employees WHERE id = 3 SET age = 35;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will delete the employee with id 4?",
          "choices": [
            "A. DELETE FROM Employees WHERE id = 4;",
            "B. REMOVE FROM Employees WHERE id = 4;",
            "C. DELETE Employees WHERE id = 4;",
            "D. DELETE FROM Employees id = 4;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will select only the name column from Employees?",
          "choices": [
            "A. SELECT name FROM Employees;",
            "B. SELECT Employees FROM name;",
            "C. SELECT * FROM Employees WHERE name;",
            "D. SELECT name Employees;"
          ],
          "answer": "A"
        }
      ]
    },
    "intermediate": {
      "multipleChoice": [
        {"question": "Which join returns only matching rows from both tables?", "choices": ["INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "FULL OUTER JOIN"], "answer": "INNER JOIN"},
        {"question": "Which function calculates the average of a column?", "choices": ["AVG", "MEAN", "AVERAGE", "MEDIAN"], "answer": "AVG"},
        {"question": "Which clause groups rows in a SELECT statement?", "choices": ["GROUP BY", "GROUP", "COLLECT", "BATCH"], "answer": "GROUP BY"},
        {"question": "Which clause filters grouped results?", "choices": ["HAVING", "WHERE", "FILTER", "IF"], "answer": "HAVING"},
        {"question": "Which command creates a stored procedure?", "choices": ["CREATE PROCEDURE", "NEW PROCEDURE", "MAKE PROCEDURE", "ADD PROCEDURE"], "answer": "CREATE PROCEDURE"},
        {"question": "Which command creates a view?", "choices": ["CREATE VIEW", "NEW VIEW", "MAKE VIEW", "ADD VIEW"], "answer": "CREATE VIEW"},
        {"question": "Which command creates an index?", "choices": ["CREATE INDEX", "ADD INDEX", "MAKE INDEX", "NEW INDEX"], "answer": "CREATE INDEX"},
        {"question": "Which constraint ensures unique values?", "choices": ["UNIQUE", "DISTINCT", "ONLY", "SINGLE"], "answer": "UNIQUE"},
        {"question": "Which command starts a transaction?", "choices": ["BEGIN TRANSACTION", "START TRANSACTION", "BEGIN", "TRANSACTION START"], "answer": "BEGIN TRANSACTION"},
        {"question": "Which command commits a transaction?", "choices": ["COMMIT", "SAVE", "END", "FINISH"], "answer": "COMMIT"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this JOIN?\n\nSELECT e.name, d.name FROM Employees e JOIN Departments d ON e.dept_id = d.id",
          "choices": [
            "A. Missing semicolon at the end",
            "B. Should use LEFT JOIN",
            "C. d.id should be d.dept_id",
            "D. e.name should be employee_name"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this GROUP BY?\n\nSELECT dept_id, COUNT(*) FROM Employees GROUP BY;",
          "choices": [
            "A. GROUP BY should specify a column",
            "B. COUNT should be COUNT(1)",
            "C. dept_id should be in quotes",
            "D. FROM should be WHERE"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this subquery?\n\nSELECT name FROM Employees WHERE id = (SELECT id FROM Departments);",
          "choices": [
            "A. Subquery returns more than one row",
            "B. id should be in quotes",
            "C. FROM should be WHERE",
            "D. Employees should be Employee"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this UPDATE?\n\nUPDATE Employees SET salary = salary * 1.1 WHERE;",
          "choices": [
            "A. WHERE clause is incomplete",
            "B. SET should be WHERE",
            "C. salary should be in quotes",
            "D. 1.1 should be 10%"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this ORDER BY?\n\nSELECT * FROM Employees ORDER name;",
          "choices": [
            "A. ORDER should be ORDER BY",
            "B. name should be in quotes",
            "C. Employees should be Employee",
            "D. * should be all"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL will join Employees and Departments on dept_id?",
          "choices": [
            "A. SELECT e.name, d.name FROM Employees e JOIN Departments d ON e.dept_id = d.id;",
            "B. SELECT * FROM Employees, Departments;",
            "C. SELECT e.name, d.name FROM Employees e, Departments d;",
            "D. SELECT e.name, d.name FROM Employees e JOIN Departments d;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will count the number of employees in each department?",
          "choices": [
            "A. SELECT dept_id, COUNT(*) FROM Employees GROUP BY dept_id;",
            "B. SELECT COUNT(*) FROM Employees;",
            "C. SELECT dept_id, COUNT(*) FROM Employees;",
            "D. SELECT COUNT(dept_id) FROM Employees GROUP BY dept_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will select employees with salary greater than 50000?",
          "choices": [
            "A. SELECT * FROM Employees WHERE salary > 50000;",
            "B. SELECT * FROM Employees WHERE salary >= 50000;",
            "C. SELECT * FROM Employees WHERE salary < 50000;",
            "D. SELECT * FROM Employees WHERE salary = 50000;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will update the department of employee with id 5 to 2?",
          "choices": [
            "A. UPDATE Employees SET dept_id = 2 WHERE id = 5;",
            "B. UPDATE Employees dept_id = 2 WHERE id = 5;",
            "C. SET dept_id = 2 WHERE id = 5 IN Employees;",
            "D. UPDATE Employees WHERE id = 5 SET dept_id = 2;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL will delete all employees in department 3?",
          "choices": [
            "A. DELETE FROM Employees WHERE dept_id = 3;",
            "B. REMOVE FROM Employees WHERE dept_id = 3;",
            "C. DELETE Employees WHERE dept_id = 3;",
            "D. DELETE FROM Employees dept_id = 3;"
          ],
          "answer": "A"
        }
      ]
    },
    "advanced": {
      "multipleChoice": [
        {"question": "Which command creates a trigger?", "choices": ["CREATE TRIGGER", "NEW TRIGGER", "MAKE TRIGGER", "ADD TRIGGER"], "answer": "CREATE TRIGGER"},
        {"question": "Which command grants privileges to a user?", "choices": ["GRANT", "GIVE", "ALLOW", "PERMIT"], "answer": "GRANT"},
        {"question": "Which command revokes privileges from a user?", "choices": ["REVOKE", "REMOVE", "TAKE", "DENY"], "answer": "REVOKE"},
        {"question": "Which command creates a user?", "choices": ["CREATE USER", "NEW USER", "ADD USER", "MAKE USER"], "answer": "CREATE USER"},
        {"question": "Which command creates a database?", "choices": ["CREATE DATABASE", "NEW DATABASE", "ADD DATABASE", "MAKE DATABASE"], "answer": "CREATE DATABASE"},
        {"question": "Which command backs up a database?", "choices": ["BACKUP DATABASE", "DUMP", "EXPORT", "SAVE"], "answer": "BACKUP DATABASE"},
        {"question": "Which command restores a database from a backup?", "choices": ["RESTORE DATABASE", "IMPORT", "LOAD", "RECOVER"], "answer": "RESTORE DATABASE"},
        {"question": "Which function is used for windowed aggregation?", "choices": ["ROW_NUMBER()", "COUNT()", "SUM()", "AVG()"], "answer": "ROW_NUMBER()"},
        {"question": "Which command shows the structure of a table?", "choices": ["sp_help", "DESCRIBE", "SHOW", "EXPLAIN"], "answer": "sp_help"},
        {"question": "Which command is used to rebuild an index?", "choices": ["ALTER INDEX ... REBUILD", "REBUILD INDEX", "RECREATE INDEX", "UPDATE INDEX"], "answer": "ALTER INDEX ... REBUILD"}
      ],
      "debugging": [
        {
          "question": "What is wrong with this stored procedure?\n\nCREATE PROCEDURE GetEmployee AS SELECT * FROM Employees WHERE id = emp_id;",
          "choices": [
            "A. emp_id should be a parameter",
            "B. AS should be BEGIN",
            "C. Employees should be Employee",
            "D. SELECT should be select"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this trigger?\n\nCREATE TRIGGER trg AFTER INSERT ON Employees BEGIN UPDATE Employees SET count = count + 1; END;",
          "choices": [
            "A. Missing FOR EACH ROW clause",
            "B. count should be in quotes",
            "C. Employees should be Employee",
            "D. BEGIN should be AS"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this view creation?\n\nCREATE VIEW EmpView AS SELECT name, age Employees;",
          "choices": [
            "A. Missing FROM keyword",
            "B. EmpView should be in quotes",
            "C. name should be employee_name",
            "D. SELECT should be select"
          ],
          "answer": "A"
        },
        {
          "question": "What is the bug in this cursor usage?\n\nDECLARE c CURSOR FOR SELECT * FROM Employees; OPEN c; FETCH c INTO r; CLOSE c;",
          "choices": [
            "A. Variable r is not declared",
            "B. c should be C",
            "C. Employees should be Employee",
            "D. FETCH should be SELECT"
          ],
          "answer": "A"
        },
        {
          "question": "What is wrong with this exception handling?\n\nBEGIN TRY SELECT 1/0; END TRY BEGIN CATCH PRINT 'Error'; END CATCH;",
          "choices": [
            "A. PRINT should be RAISERROR for exceptions",
            "B. 1/0 should be 1\\0",
            "C. BEGIN TRY should be TRY",
            "D. CATCH should be EXCEPTION"
          ],
          "answer": "A"
        }
      ],
      "coding": [
        {
          "question": "Which SQL creates a view of employee names and ages?",
          "choices": [
            "A. CREATE VIEW EmpView AS SELECT name, age FROM Employees;",
            "B. CREATE EmpView AS SELECT name, age FROM Employees;",
            "C. CREATE VIEW EmpView SELECT name, age FROM Employees;",
            "D. CREATE VIEW EmpView AS name, age FROM Employees;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL creates a stored procedure to get employee by id?",
          "choices": [
            "A. CREATE PROCEDURE GetEmployee @emp_id INT AS SELECT * FROM Employees WHERE id = @emp_id;",
            "B. CREATE PROCEDURE GetEmployee AS SELECT * FROM Employees WHERE id = emp_id;",
            "C. CREATE PROCEDURE GetEmployee (emp_id INT) AS SELECT * FROM Employees WHERE id = emp_id;",
            "D. CREATE PROCEDURE GetEmployee AS SELECT * FROM Employees WHERE id = @emp_id;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL creates a trigger to update count after insert?",
          "choices": [
            "A. CREATE TRIGGER trg ON Employees AFTER INSERT AS UPDATE Employees SET count = count + 1;",
            "B. CREATE TRIGGER trg AFTER INSERT ON Employees BEGIN UPDATE Employees SET count = count + 1; END;",
            "C. CREATE TRIGGER trg ON Employees AFTER INSERT UPDATE Employees SET count = count + 1;",
            "D. CREATE TRIGGER trg ON Employees INSERT AS UPDATE Employees SET count = count + 1;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL declares and uses a cursor?",
          "choices": [
            "A. DECLARE c CURSOR FOR SELECT * FROM Employees; OPEN c; FETCH NEXT FROM c INTO @r; CLOSE c; DEALLOCATE c;",
            "B. CURSOR c IS SELECT * FROM Employees; OPEN c; FETCH c INTO r; CLOSE c;",
            "C. DECLARE c CURSOR IS SELECT * FROM Employees; OPEN c; FETCH c INTO r; CLOSE c;",
            "D. DECLARE CURSOR c SELECT * FROM Employees; OPEN c; FETCH c INTO r; CLOSE c;"
          ],
          "answer": "A"
        },
        {
          "question": "Which SQL handles division by zero exception?",
          "choices": [
            "A. BEGIN TRY SELECT 1/0; END TRY BEGIN CATCH PRINT 'Error'; END CATCH;",
            "B. TRY SELECT 1/0; CATCH PRINT 'Error';",
            "C. BEGIN TRY SELECT 1/0; CATCH PRINT 'Error'; END TRY;",
            "D. BEGIN TRY SELECT 1/0; END CATCH PRINT 'Error'; END TRY;"
          ],
          "answer": "A"
        }
      ]
    }
  },
  "cassandra": {
  "beginner": {
    "multipleChoice": [
      {"question": "What is Cassandra primarily designed for?", "choices": ["Relational data storage", "Distributed, scalable NoSQL storage", "In-memory caching", "File system management"], "answer": "Distributed, scalable NoSQL storage"},
      {"question": "Which query language does Cassandra use?", "choices": ["SQL", "CQL", "MongoQL", "RedisQL"], "answer": "CQL"},
      {"question": "What is a 'keyspace' in Cassandra?", "choices": ["A single row", "A collection of tables", "A column family", "A data type"], "answer": "A collection of tables"},
      {"question": "Which command creates a keyspace?", "choices": ["CREATE DATABASE", "CREATE KEYSPACE", "CREATE TABLE", "CREATE COLUMNFAMILY"], "answer": "CREATE KEYSPACE"},
      {"question": "What is the default consistency level in Cassandra?", "choices": ["ONE", "QUORUM", "ALL", "ANY"], "answer": "ONE"},
      {"question": "Which of the following is NOT a valid Cassandra data type?", "choices": ["text", "int", "float", "blob"], "answer": "float"},
      {"question": "How does Cassandra achieve high availability?", "choices": ["Master-slave replication", "Peer-to-peer architecture", "Single-node design", "Sharding"], "answer": "Peer-to-peer architecture"},
      {"question": "Which command inserts data into a table?", "choices": ["INSERT INTO", "ADD TO", "PUT INTO", "UPDATE"], "answer": "INSERT INTO"},
      {"question": "What is a partition key?", "choices": ["The key used to split data across nodes", "The key used to join tables", "The key used for sorting", "The key used for indexing"], "answer": "The key used to split data across nodes"},
      {"question": "Which tool is commonly used to interact with Cassandra from the command line?", "choices": ["cqlsh", "cassandra-cli", "mongo", "redis-cli"], "answer": "cqlsh"}
    ],
    "debugging": [
      {"question": "What is wrong with this CQL?\n\nCREATE TABLE users (id int PRIMARY, name text);", "choices": ["A. PRIMARY should be PRIMARY KEY", "B. int should be integer", "C. name should be varchar", "D. CREATE should be create"], "answer": "A"},
      {"question": "What is the bug in this insert?\n\nINSERT INTO users (id, name) VALUES (1, Alice);", "choices": ["A. Alice should be in single quotes", "B. id should be in quotes", "C. VALUES should be VALUE", "D. users should be user"], "answer": "A"},
      {"question": "What is wrong with this select?\n\nSELECT * users;", "choices": ["A. Missing FROM keyword", "B. * should be all", "C. users should be in quotes", "D. SELECT should be select"], "answer": "A"},
      {"question": "What is the bug in this keyspace creation?\n\nCREATE KEYSPACE myks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};", "choices": ["A. replication_factor should be in quotes", "B. SimpleStrategy should be in double quotes", "C. myks should be in quotes", "D. WITH should be with"], "answer": "A"},
      {"question": "What is wrong with this update?\n\nUPDATE users SET name = Bob WHERE id = 1;", "choices": ["A. Bob should be in single quotes", "B. id should be in quotes", "C. SET should be set", "D. UPDATE should be update"], "answer": "A"}
    ],
    "coding": [
      {"question": "Which CQL creates a table for users with id and name?", "choices": ["A. CREATE TABLE users (id int PRIMARY KEY, name text);", "B. CREATE users (id int PRIMARY KEY, name text);", "C. CREATE TABLE users (id integer PRIMARY KEY, name varchar);", "D. CREATE TABLE users (id int, name text);"], "answer": "A"},
      {"question": "Which CQL inserts a user with id 2 and name 'Eve'?", "choices": ["A. INSERT INTO users (id, name) VALUES (2, 'Eve');", "B. INSERT users (id, name) VALUES (2, 'Eve');", "C. INSERT INTO users VALUES (2, 'Eve');", "D. INSERT INTO users (id, name) VALUE (2, 'Eve');"], "answer": "A"},
      {"question": "Which CQL selects all users?", "choices": ["A. SELECT * FROM users;", "B. SELECT users;", "C. SELECT ALL FROM users;", "D. SELECT * users;"], "answer": "A"},
      {"question": "Which CQL updates the name of user with id 3 to 'Sam'?", "choices": ["A. UPDATE users SET name = 'Sam' WHERE id = 3;", "B. UPDATE users name = 'Sam' WHERE id = 3;", "C. UPDATE users SET name = Sam WHERE id = 3;", "D. UPDATE users SET name = 'Sam';"], "answer": "A"},
      {"question": "Which CQL deletes the user with id 4?", "choices": ["A. DELETE FROM users WHERE id = 4;", "B. REMOVE FROM users WHERE id = 4;", "C. DELETE users WHERE id = 4;", "D. DELETE FROM users id = 4;"], "answer": "A"}
    ]
  },
  "intermediate": {
    "multipleChoice": [
      {"question": "Which CQL creates an index on the name column of users?", "choices": ["CREATE INDEX name_idx ON users (name);", "CREATE INDEX ON users name;", "CREATE INDEX users_name ON users (name);", "CREATE INDEX name_idx users (name);"], "answer": "CREATE INDEX name_idx ON users (name);"},
      {"question": "Which CQL adds an email column to users?", "choices": ["ALTER TABLE users ADD email text;", "ALTER users ADD email text;", "ALTER TABLE users email text;", "ALTER TABLE users ADD email varchar;"], "answer": "ALTER TABLE users ADD email text;"},
      {"question": "Which CQL deletes all users with name 'Bob'?", "choices": ["DELETE FROM users WHERE name = 'Bob';", "REMOVE FROM users WHERE name = 'Bob';", "DELETE users WHERE name = 'Bob';", "DELETE FROM users name = 'Bob';"], "answer": "DELETE FROM users WHERE name = 'Bob';"},
      {"question": "Which CQL command drops the users table?", "choices": ["DROP TABLE users;", "DROP users;", "DELETE TABLE users;", "REMOVE TABLE users;"], "answer": "DROP TABLE users;"},
      {"question": "Which CQL command creates a keyspace with SimpleStrategy and replication factor 2?", "choices": ["CREATE KEYSPACE myks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};", "CREATE KEYSPACE myks WITH SimpleStrategy = 2;", "CREATE DATABASE myks WITH replication = 2;", "CREATE KEYSPACE myks WITH class = 'SimpleStrategy', replication_factor = 2;"], "answer": "CREATE KEYSPACE myks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};"}
    ],
    "debugging": [
      {"question": "What is wrong with this CQL?\n\nCREATE INDEX name_idx ON users name;", "choices": ["A. Should be ON users (name)", "B. name_idx should be in quotes", "C. users should be in quotes", "D. CREATE should be create"], "answer": "A"},
      {"question": "What is the bug in this select?\n\nSELECT name FROM users WHERE age > 20;", "choices": ["A. age is not a primary key or indexed column", "B. name should be in quotes", "C. users should be user", "D. > should be ="], "answer": "A"},
      {"question": "What is wrong with this batch?\n\nBEGIN BATCH INSERT INTO users (id, name) VALUES (5, 'Tom'); APPLY;", "choices": ["A. Missing END BATCH before APPLY", "B. Tom should be in double quotes", "C. BEGIN should be begin", "D. BATCH should be batch"], "answer": "A"},
      {"question": "What is the bug in this alter table?\n\nALTER TABLE users ADD email text", "choices": ["A. Missing semicolon at the end", "B. email should be in quotes", "C. ADD should be add", "D. text should be varchar"], "answer": "A"},
      {"question": "What is wrong with this drop table?\n\nDROP users;", "choices": ["A. Should be DROP TABLE users;", "B. users should be in quotes", "C. DROP should be drop", "D. TABLE should be table"], "answer": "A"}
    ],
    "coding": [
      {"question": "Which CQL creates an index on the name column of users?", "choices": ["A. CREATE INDEX name_idx ON users (name);", "B. CREATE INDEX ON users name;", "C. CREATE INDEX users_name ON users (name);", "D. CREATE INDEX name_idx users (name);"], "answer": "A"},
      {"question": "Which CQL adds an email column to users?", "choices": ["A. ALTER TABLE users ADD email text;", "B. ALTER users ADD email text;", "C. ALTER TABLE users email text;", "D. ALTER TABLE users ADD email varchar;"], "answer": "A"},
      {"question": "Which CQL deletes all users with name 'Bob'?", "choices": ["A. DELETE FROM users WHERE name = 'Bob';", "B. REMOVE FROM users WHERE name = 'Bob';", "C. DELETE users WHERE name = 'Bob';", "D. DELETE FROM users name = 'Bob';"], "answer": "A"},
      {"question": "Which CQL command drops the users table?", "choices": ["A. DROP TABLE users;", "B. DROP users;", "C. DELETE TABLE users;", "D. REMOVE TABLE users;"], "answer": "A"},
      {"question": "Which CQL command creates a keyspace with SimpleStrategy and replication factor 2?", "choices": ["A. CREATE KEYSPACE myks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};", "B. CREATE KEYSPACE myks WITH SimpleStrategy = 2;", "C. CREATE DATABASE myks WITH replication = 2;", "D. CREATE KEYSPACE myks WITH class = 'SimpleStrategy', replication_factor = 2;"], "answer": "A"}
    ]
  },
  "advanced": {
    "multipleChoice": [
      {"question": "Which CQL creates a user-defined type for address?", "choices": ["CREATE TYPE address AS (street text, city text);", "CREATE UDT address (street text, city text);", "CREATE TYPE address (street text, city text);", "CREATE TYPE address AS street text, city text;"], "answer": "CREATE TYPE address AS (street text, city text);"},
      {"question": "Which CQL creates a materialized view for users by name?", "choices": ["CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL AND id IS NOT NULL PRIMARY KEY (name, id);", "CREATE VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL PRIMARY KEY (name, id);", "CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL PRIMARY KEY (name, id);", "CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL AND id PRIMARY KEY (name, id);"], "answer": "CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL AND id IS NOT NULL PRIMARY KEY (name, id);"},
      {"question": "Which CQL creates a function to add two integers?", "choices": ["CREATE FUNCTION add(a int, b int) RETURNS NULL ON NULL INPUT RETURNS int LANGUAGE java AS $$ return a + b; $$;", "CREATE FUNCTION add(a int, b int) RETURNS int LANGUAGE java AS 'return a + b';", "CREATE FUNCTION add(a int, b int) RETURNS int AS 'return a + b';", "CREATE FUNCTION add(a int, b int) RETURNS int LANGUAGE java AS $$ return a + b; $$"], "answer": "CREATE FUNCTION add(a int, b int) RETURNS NULL ON NULL INPUT RETURNS int LANGUAGE java AS $$ return a + b; $$;"},
      {"question": "Which CQL creates a trigger on users?", "choices": ["CREATE TRIGGER mytrig ON users USING 'com.example.Trigger';", "CREATE TRIGGER mytrig users USING 'com.example.Trigger';", "CREATE TRIGGER ON users USING 'com.example.Trigger';", "CREATE TRIGGER mytrig ON users 'com.example.Trigger';"], "answer": "CREATE TRIGGER mytrig ON users USING 'com.example.Trigger';"},
      {"question": "Which CQL creates an aggregate function?", "choices": ["CREATE AGGREGATE sum_state(int) SFUNC state STYPE int FINALFUNC final INITCOND 0;", "CREATE AGGREGATE sum_state(int) SFUNC state STYPE int FINALFUNC final;", "CREATE AGGREGATE sum_state(int) STYPE int FINALFUNC final;", "CREATE AGGREGATE sum_state(int) SFUNC state FINALFUNC final INITCOND 0;"], "answer": "CREATE AGGREGATE sum_state(int) SFUNC state STYPE int FINALFUNC final INITCOND 0;"}
    ],
    "debugging": [
      {"question": "What is wrong with this UDT creation?\n\nCREATE TYPE address (street text, city text);", "choices": ["A. Should be CREATE TYPE address AS (street text, city text);", "B. address should be in quotes", "C. street should be varchar", "D. CREATE should be create"], "answer": "A"},
      {"question": "What is the bug in this materialized view?\n\nCREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL PRIMARY KEY (name, id);", "choices": ["A. Must include all primary key columns in WHERE clause", "B. name should be in quotes", "C. users should be user", "D. PRIMARY KEY should be PRIMARY"], "answer": "A"},
      {"question": "What is wrong with this function creation?\n\nCREATE FUNCTION add(a int, b int) RETURNS int LANGUAGE java AS 'return a + b';", "choices": ["A. Missing $$ around the function body", "B. add should be in quotes", "C. int should be integer", "D. LANGUAGE should be language"], "answer": "A"},
      {"question": "What is the bug in this trigger?\n\nCREATE TRIGGER mytrig ON users USING 'com.example.Trigger';", "choices": ["A. Trigger class must implement ITrigger interface", "B. mytrig should be in quotes", "C. users should be user", "D. USING should be use"], "answer": "A"},
      {"question": "What is wrong with this aggregate creation?\n\nCREATE AGGREGATE sum_state(int) SFUNC state STYPE int FINALFUNC final;", "choices": ["A. Missing AS keyword before function body", "B. sum_state should be in quotes", "C. int should be integer", "D. AGGREGATE should be aggregate"], "answer": "A"}
    ],
    "coding": [
      {"question": "Which CQL creates a user-defined type for address?", "choices": ["A. CREATE TYPE address AS (street text, city text);", "B. CREATE UDT address (street text, city text);", "C. CREATE TYPE address (street text, city text);", "D. CREATE TYPE address AS street text, city text;"], "answer": "A"},
      {"question": "Which CQL creates a materialized view for users by name?", "choices": ["A. CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL AND id IS NOT NULL PRIMARY KEY (name, id);", "B. CREATE VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL PRIMARY KEY (name, id);", "C. CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL PRIMARY KEY (name, id);", "D. CREATE MATERIALIZED VIEW user_by_name AS SELECT * FROM users WHERE name IS NOT NULL AND id PRIMARY KEY (name, id);"], "answer": "A"},
      {"question": "Which CQL creates a function to add two integers?", "choices": ["A. CREATE FUNCTION add(a int, b int) RETURNS NULL ON NULL INPUT RETURNS int LANGUAGE java AS $$ return a + b; $$;", "B. CREATE FUNCTION add(a int, b int) RETURNS int LANGUAGE java AS 'return a + b';", "C. CREATE FUNCTION add(a int, b int) RETURNS int AS 'return a + b';", "D. CREATE FUNCTION add(a int, b int) RETURNS int LANGUAGE java AS $$ return a + b; $$"], "answer": "A"},
      {"question": "Which CQL creates a trigger on users?", "choices": ["A. CREATE TRIGGER mytrig ON users USING 'com.example.Trigger';", "B. CREATE TRIGGER mytrig users USING 'com.example.Trigger';", "C. CREATE TRIGGER ON users USING 'com.example.Trigger';", "D. CREATE TRIGGER mytrig ON users 'com.example.Trigger';"], "answer": "A"},
      {"question": "Which CQL creates an aggregate function?", "choices": ["A. CREATE AGGREGATE sum_state(int) SFUNC state STYPE int FINALFUNC final INITCOND 0;", "B. CREATE AGGREGATE sum_state(int) SFUNC state STYPE int FINALFUNC final;", "C. CREATE AGGREGATE sum_state(int) STYPE int FINALFUNC final;", "D. CREATE AGGREGATE sum_state(int) SFUNC state FINALFUNC final INITCOND 0;"], "answer": "A"}
      ]
    }
  }
}
